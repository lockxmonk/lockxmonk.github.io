<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LZH007]]></title>
  <link href="https://lockxmonk.github.io/atom.xml" rel="self"/>
  <link href="https://lockxmonk.github.io/"/>
  <updated>2017-04-19T16:38:56+08:00</updated>
  <id>https://lockxmonk.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im">MWeb</generator>

  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="https://lockxmonk.github.io/14925924499918.html"/>
    <updated>2017-04-19T17:00:49+08:00</updated>
    <id>https://lockxmonk.github.io/14925924499918.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用模块]]></title>
    <link href="https://lockxmonk.github.io/14922429288489.html"/>
    <updated>2017-04-15T15:55:28+08:00</updated>
    <id>https://lockxmonk.github.io/14922429288489.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">模块介绍</h2>

<p>python中的文件关联模块和java语言类似，一个<code>abc.py</code>的文件就是一个名字叫abc的模块，一个<code>xyz.py</code>的文件就是一个名字叫xyz的模块。</p>

<p>现在，假设我们的<code>abc和xyz</code>这两个模块名字与其他模块冲突了，于是我们可以通过包来组织模块，避免冲突。方法是选择一个顶层包名，比如<code>mycompany</code>，按照如下目录存放：<br/>
<img src="media/14922429288489/14922430767659.jpg" alt=""/></p>

<p>引入了包以后，只要顶层的包名不与别人冲突，那所有模块都不会与别人冲突。现在，abc.py模块的名字就变成了mycompany.abc，类似的，xyz.py的模块名变成了mycompany.xyz。</p>

<p>请注意，每一个包目录下面都会有一个<code>__init__.py</code>的文件，这个文件是必须存在的，否则，Python就把这个目录当成普通目录，而不是一个包。<code>__init__.py</code>可以是空文件，也可以有Python代码，因为<code>__init__.py</code>本身就是一个模块，而它的模块名就是<code>mycompany</code>。</p>

<p>类似的，可以有多级目录，组成多级层次的包结构，比如如下的目录结构：<br/>
<img src="media/14922429288489/14922431763848.jpg" alt=""/></p>

<h2 id="toc_1">模块的使用</h2>

<p>Python本身就内置了很多非常有用的模块，只要安装完毕，这些模块就可以立刻使用。</p>

<p>我们以内建的<code>sys</code>模块为例，编写一个<code>hello</code>的模块：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-


&#39;a test module&#39;

_author_ = &#39;梁中豪&#39;

import sys

def test():
    args = sys.argv
    if len(args)==1:
        print &#39;Hello ,world!&#39;
    elif len(args)==2:
        print &#39;Hello ,%s!&#39; % args[1]
    else:
        print &#39;Too many arguments!&#39;
if __name__==&#39;_main_&#39;:
    test()
</code></pre>

<p>第1行注释表示.py文件本身使用标准UTF-8编码；</p>

<p>第4行是一个字符串，表示模块的文档注释，任何模块代码的第一个字符串都被视为模块的文档注释；</p>

<p>第6行使用__author__变量把作者写进去，这样当你公开源代码后别人就可以瞻仰你的大名；</p>

<p>以上就是Python模块的标准文件模板，当然也可以全部删掉不写，但是，按标准办事肯定没错。</p>

<p>后面开始就是真正的代码部分。</p>

<p>使用sys模块的第一步，就是导入该模块：<code>import sys</code><br/>
导入<code>sys</code>模块后，我们就有了变量<code>sys</code>指向该模块，利用<code>sys</code>这个变量，就可以访问<code>sys</code>模块的所有功能。</p>

<p><code>sys</code>模块有一个<code>argv</code>变量，用<code>list</code>存储了命令行的所有参数。<code>argv</code>至少有一个元素，因为第一个参数永远是该.py文件的名称，例如：</p>

<p>运行<code>python hello.py</code>获得的<code>sys.argv</code>就是<code>[&#39;hello.py&#39;]</code>；</p>

<p>运行<code>python hello.py Michael</code>获得的<code>sys.argv</code>就是<code>[&#39;hello.py&#39;, &#39;Michael]</code>。</p>

<p>最后，注意到这两行代码：</p>

<pre><code class="language-py">if __name__==&#39;__main__&#39;:
    test()
</code></pre>

<p>当我们在命令行运行<code>hello</code>模块文件时，Python解释器把一个特殊变量<code>__name__置为__main__</code>，而如果在其他地方导入该<code>hello</code>模块时，if判断将失败，因此，这种if测试可以让一个模块通过命令行运行时执行一些额外的代码，最常见的就是运行测试。</p>

<p>可以启动python交互环境，导入hello模块来测试下：</p>

<pre><code>$ python
Python 2.7.5 (default, Aug 25 2013, 00:04:04) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.
&gt;&gt;&gt; import hello
&gt;&gt;&gt; hello.test()
Hello, world!
</code></pre>

<h2 id="toc_2">别名</h2>

<p>导入模块时，可以使用别名，这样，可以在运行时根据当前环境选择最合适的模块。比如Python标准库一般会提供<code>StringIO</code>和<code>cStringIO</code>两个库，这两个库的接口和功能是一样的，但是<code>cStringIO</code>是C写的，速度更快，所以，你会经常看到这样的写法：</p>

<pre><code class="language-py">try:
    import cStringIO as StringIO
except ImportError: # 导入失败会捕获到ImportError
    import StringIO
</code></pre>

<p>这样就可以优先导入<code>cStringIO</code>。如果有些平台不提供<code>cStringIO</code>，还可以降级使用<code>StringIO</code>。导入<code>cStringIO</code>时，用<code>import ... as ...</code>指定了别名<code>StringIO</code>，因此，后续代码引用<code>StringIO</code>即可正常工作。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[偏函数]]></title>
    <link href="https://lockxmonk.github.io/14922391300067.html"/>
    <updated>2017-04-15T14:52:10+08:00</updated>
    <id>https://lockxmonk.github.io/14922391300067.html</id>
    <content type="html"><![CDATA[
<p>Python的<code>functools</code>模块提供了很多有用的功能，其中一个就是偏函数（Partial function）。要注意，这里的偏函数和数学意义上的偏函数不一样。</p>

<p><code>int()</code>函数可以把字符串转换为整数<br/>
例如：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
num = int(&#39;12345&#39;)
num1 = int(&#39;12345&#39;, base=8)
num2 = int(&#39;12345&#39;, 16)
print num, num1, num2
</code></pre>

<p><img src="media/14922391300067/14922396420577.jpg" alt=""/></p>

<p>其中<code>base</code>参数可以指定转换的进制</p>

<p>假设要转换大量的二进制字符串，每次都传入<code>int(x, base=2)</code>非常麻烦，于是，我们想到，可以定义一个<code>int2()</code>的函数，默认把<code>base=2</code>传进去：</p>

<pre><code class="language-py">def int2(x,base=2):
    return int(x,base)

</code></pre>

<p>这样我们转换二进制就很方便，<code>functools.partial</code>就是帮助我们创建一个偏函数的，不需要我们自己定义<code>int2()</code>，可以直接使用下面的代码创建一个新的函数<code>int2</code>：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
import functools
int2 = functools.partial(int, base=8)
num = int2(&#39;10000&#39;)
num1 = int2(&#39;10000&#39;,base=2)
print num,num1  
</code></pre>

<p><img src="media/14922391300067/14922410514665.jpg" alt=""/></p>

<p>创建偏函数时，实际上可以接收函数对象、<code>*args和**kw</code>这3个参数:</p>

<pre><code class="language-py">int2 = functools.partial(int, base=2)
#相当于下面
kw = { base: 2 }
int(&#39;10010&#39;, **kw)

max2 = functools.partial(max, 10)
#相当于下面，实际上会把10作为*args的一部分自动加到左边
args = (10, 5, 6, 7)
max(*args)
</code></pre>

<blockquote>
<p>总结：当函数的参数个数太多，需要简化时，使用<code>functools.partial</code>可以创建一个新的函数，这个新函数可以固定住原函数的部分参数，从而在调用时更简单。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[支持向量机]]></title>
    <link href="https://lockxmonk.github.io/14921577512970.html"/>
    <updated>2017-04-14T16:15:51+08:00</updated>
    <id>https://lockxmonk.github.io/14921577512970.html</id>
    <content type="html"><![CDATA[
<p>支持向量机（support vector machines，SVM)是一种二类分类模型。它的基本模型是定义在特征空间上的间隔最大的线性分类器，间隔最大使它有别于感知机；支持向量机还包括核技巧，这使它成为实质上的非线性分类器.<font color=red>支持向量机的学习策略就是间隔最大化，可形式化为一个求解凸二次规划（convex quadratic programming)的问题，也等价于正则化的合页损失函数的最小化问题.</font>支持向量机的<strong><em>学习算法是求解凸二次规划的最优化算法</em></strong>.</p>

<p>支持向量机学习方法包含构建由简至繁的模型：线性可分支持向量机（linear support vector machine in linearly separable ease)、线性支持向量机（linear support vector machine)及非线性支持向量机（ncm-linear support vector machine).简单模型是复杂模型的基础，也是复杂模型的特殊情况.当训练数据线性可分时，通过硬间隔最大化（hard margin maximization)，学习一个线性的分类器，<strong><em>即线性可分支持向量机，又称为硬间隔支持向量机</em></strong>；当训练数据近似线性可分时，通过软间隔最大化（soft margin maximization)，也学习一个线性的分类器，<strong><em>即线性支持向量机，又称为软间隔支持向量机</em></strong>；<strong><em>当训练数据线性不可分时，通过使用核技巧 (kernel trick)及软间隔最大化，学习非线性支持向量机</em></strong>.</p>

<p>当输入空间为欧氏空间或离散集合、特征空间为希尔伯特空间时，<strong><em>核函数(kernel fimcticm)表示将输入从输入空间映射到特征空间得到的特征向量之间的内积.</em></strong>通过使用核函数可以学习非线性支持向量机，等价于隐式地在高维的特征空间中学习线性支持向量机.这样的方法称为核技巧.<strong>核方法（kernel method)是比支持向量机更为一般的机器学习方法</strong>.</p>

<p>Cortes与Vapnik提出线性支持向量机，Boser、Guyon与Vapnik又引入核技巧，提出非线性支持向量机.</p>

<p>本次一次学习3类支持向量机、核函数以及一种跨苏学习方法——序列最小最优化算法(SMO)</p>

<h2 id="toc_0">线性可支持性良机与硬间隔最大化</h2>

<h3 id="toc_1">线性可支持向量机</h3>

<p>考虑一个二类分类问题，假设输入空间与特征空间为两个不同的空间.输入空间为欧氏空间或离散集合，特征空间为欧氏空间或希尔伯特空间.线性可分支持向量机、线性支持向量机假设这两个空间的元素一一对应，并将输入空间中的输入映射为特征空间中的特征向量.非线性支持向量机利用一个从输入空间到特征空间的非线性映射将输入映射为特征向量.所以，输入都由输入空间转换到特征空间，支持向量机的学习是在特征空间进行的.</p>

<p>假设给定一个特征空间上的训练数据集：<br/>
\(T={\{x_1,y_1},(x_2,y_2),...(x_N,y_N)\}\)<br/>
,其中，\(x_i \in \mathcal{X}=R^n,y_i \in \mathcal{Y}={\{+1,-1}\},i=1,2,...N,x_i\)为第i个特征向量，也成为实例，\(y_i为x_i的类标记，当y_i=+1时，称x_i为正例；当y_i=-1时，称x_i为负例,(x_i,y_i)成为样本点，再假设训练数据集是线性可分的\)</p>

<p>学习的目标是在特征空间中找到一个分离超平面，能将实例分到不同的类，分离超平面对应于方程\(w*x+b=0\),它由法向量w和截距b决定，可用(w,b)来表示.分离超平面将特征空间划分为两部分，一部分是正类，一部分是负类.法向量指向的一侧为正类，另一侧为负类.</p>

<p>一般地，当训练数据集线性可分时，存在无穷个分离超平面可将两类数据正确分开.感知机利用误分类最小的策略，求得分离超平面，不过这时的解有无穷多个,<font color=red>线性可分支持向量机利用间隔最大化求最优分离超平面，这时，解是唯一的.</font></p>

<p><strong><em>下面给出线性可支持向量机的定义</em></strong>：<br/>
<img src="media/14921577512970/14922239390041.jpg" alt=""/></p>

<p>考虑如图7.1所示的二维特征空间中的分类问题.图中“。”表示正例，“x” 表示负例。训练数据集线性可分，这时有许多直线能将两类数据正确划分.线性可分支持向量机对应着将两类数据正确划分并且间隔最大的直线，如图7.1所示.<br/>
<img src="media/14921577512970/14922248209178.jpg" alt=""/></p>

<p>间隔最大及相应的约束最优化问题将在下面叙述.这里先介绍<font color=red>函数间隔和几何间隔的概念</font>.</p>

<h3 id="toc_2">函数间隔和几何间隔</h3>

<p>在图7.1中，有A,B,C三个点，表示3个实例，均在分离超平面的正类一侧，预测它们的类.点A距分离超平面较远，若预测该点为正类，就比较确信预测是正确的；点C距分离超平面较近，若预测该点为正类就不那么确信；点B介于点A与C之间，预测其为正类的确信度也在A与C之间.</p>

<p>一般来说，一个点距离分离超平面的远近可以表示分类预测的确信程度.在超平面w*x+ b = 0确定的情况下，|w*x+b丨能够相对地表示点x距离超平面的远近.而w*+b的符号与类标记y的符号是否一致能够表示分类是否正确.所以可用量y(w*x+b)来表示分类的正确性及确信度，这就是函数间隔（fimctional margin)的概念.</p>

<p><strong>下面给出函数间隔的定义：</strong></p>

<p><img src="media/14921577512970/14925656291102.jpg" alt=""/></p>

<p>函数间隔可以表示分类预测的正确性及确信度.<strong><em>但是选择分离超平面时，只有函数间隔还不够.因为只要成比例地改变w和例如将它们改为2w和2b,超平面并没有改变，但函数间隔却成为原来的2倍</em></strong>.这一事实启示我们，可以对分离超平面的法向量w加某些约束，如规范化，||w||=1，使得间隔是确定的.这时函数间隔成为几何间隔（geometric margin).</p>

<p>下图给出了超平面（w，b）及其法向量w，点A表示某一实例\(x_i\)，其类标记为\(y_i =+1\)，点A与超平面（w，b）的距离由线段AB给出，记作\(\gamma_i\)。<br/>
<img src="media/14921577512970/14925666238039.jpg" alt=""/><br/>
一般的，当样本点\((x_i,y_i)\)被超平面\((w,b)\)正确分类是，点\(x_i\)与超平面\((w,b)\)的距离是：<br/>
<img src="media/14921577512970/14925667203290.jpg" alt=""/><br/>
所以：由这一事实导出几何间隔的概念。<br/>
<img src="media/14921577512970/14925667539444.jpg" alt=""/></p>

<p>下面具体给出几何间隔的定义：<br/>
<img src="media/14921577512970/14925669395725.jpg" alt=""/></p>

<p>从函数间隔和几何间隔的定义（式(7.3)〜式(7.6))可知，函数间隔和几何间隔有下面的关系：<br/>
<img src="media/14921577512970/14925676726509.jpg" alt=""/></p>

<p><strong><em>如果||w||=1,那么函数间隔和几何间隔相等.如果超平面参数w和b成比例地改变（超平面没有改变)，函数间隔也按此比例改变，而几何间隔不变.</em></strong></p>

<h2 id="toc_3">间隔最大化</h2>

<p>支持向量机学习的基本想法是求解能够正确划分训练数据集并且<strong><em>几何间隔</em></strong>最大的分离超平面.对线性可分的训练数据集而言，线性可分分离超平面有无穷多个（等价于感知机)，<strong><em>但是几何间隔最大的分离超平面是唯一的</em></strong>.这里的间隔最大化又称为硬间隔最大化（与将要讨论的训练数据集近似线性可分时的软间隔最大化相对应).</p>

<p><font color=red>间隔最大化的直观解释是：对训练数据集找到几何间隔最大的超平面意味着以充分大的确信度对训练数据进行分类.也就是说，不仅将正负实例点分开，而且对最难分的实例点（离超平面最近的点）也有足够大的确信度将它们分开.这样的超平面应该对未知的新实例有很好的分类预测能力.</font></p>

<h4 id="toc_4">1. 最大间隔分离超平面</h4>

<p>下面考虑如何求得一个几何间隔最大的分离超平面，即最大间隔分离超平面.具体地，这个问题可以表示为下面的约束最优化问题：<br/>
<img src="media/14921577512970/14925687970547.jpg" alt=""/><br/>
即我们希望最大化超平面(w,b)关于训练数据集的几何间隔\(\gamma\),约束条件表示的是超平面(w, b)关于每个训练样本点的几何间隔至少是\(\gamma\).</p>

<p>考虑几何间隔和函数间隔的关系式(7.8),可将这个问题改写为:<br/>
<img src="media/14921577512970/14925690130129.jpg" alt=""/><br/>
这是一个凸二次规划（convex quadratic programming)问题，凸优化问题是指约束最优化问题。</p>

<p>凸优化问题是指约束最优化问题：<br/>
    <img src="media/14921577512970/14925706995554.jpg" alt=""/></p>

<p>当目标函数f(w)是二次函数且约束函数\(g_i(w)\)是仿射函数时，上述凸最优化问题成为凸二次规划问题。</p>

<blockquote>
<p>仿射函数即由1阶多项式构成的函数，一般形式为 f(x)=Ax+b，这里A是一个 m×k 矩阵，x是一个k向量,b是一个m向量，实际上反映了一种从 k维到m维的空间映射关系。</p>
</blockquote>

<p>如果求出了约束最优化问题(7.13)〜(7.14)的解\(w^*,b^*\)，那么就可以得到最大间隔分离超平面\(w^*·x + b = 0\)及分类决策函数\(f(x)=sign(w^*+b^*)\),即线性可分支持向量机模型.</p>

<p>根据上面所得出的结论，就有下面的支持向量机的学习算法————<strong>最大间隔法(maximum margin method )</strong></p>

<p><img src="media/14921577512970/14925717155289.jpg" alt=""/></p>

<h4 id="toc_5">2.最大间隔分离超平面的存在唯一性</h4>

<p>线性可分训练数据集的最大间隔分离超平面是存在且唯一的。</p>

<p><strong>定理7.1 (最大间隔分离趄平面的存在唯一性）</strong>若训练数据集T线性可分，则可将训练数据集中的样本点完全正确分开的最大间隔分离超平面存在且唯一.</p>

<blockquote>
<p>这里关于唯一性的证明不在总结。相关资料可以阅读《统计学习方法》p101.</p>
</blockquote>

<h4 id="toc_6">3.支持向量和间隔边界</h4>

<p><font color=red>在线性可分情况下，训练数据集的样本点中与分离超平面距离最近的样本点的实例称为支持向量（support vector).</font>支持向量是使约束条件式(7.14)等号成立的点，即：<br/>
<img src="media/14921577512970/14925722828338.jpg" alt=""/><br/>
对\(y_i=+1\)的正例点，支持向量在超平面：<br/>
<img src="media/14921577512970/14925723574226.jpg" alt=""/></p>

<p>对\(y_i=-1\)的负例点，支持向量在超平面：<br/>
<img src="media/14921577512970/14925723990202.jpg" alt=""/></p>

<p>如下图所示，在\(H_1和H_2上的点就是支持向量\)<br/>
<img src="media/14921577512970/14925724626444.jpg" alt=""/></p>

<p>注意到\(H_1\)和\(H_2\)平行，并且没有实例点落在它们中间.在\(H_1\)与\(H_2\)之间形成一条长带，分离超平面与它们平行且位于它们中央.长带的宽度，即\(H_1\)与\(H_2\)之间的距离称为间隔（margin).间隔依赖于分离超平面的法向量w，等于\(\frac{2}{||w||}\).<br/>
\(H_1\)和\(H_2\)称为间隔边界.</p>

<p><font color=red>在决定分离超平面时只有支持向量起作用，而其他实例点并不起作用</font>。如果移动支持向量将改变所求的解；但是如果在间隔边界以外移动其他实例点，<strong>甚至去掉这些点，则解是不会改变的</strong>.<font color=red>由于支持向量在确定分离超平面中起着决定性作用，所以将这种分类模型称为支持向量机</font>.支持向量的个数一般很少，所以支 持向量机由很少的“重要的”训练样本确定.</p>

<p><strong>下面举例说明：</strong></p>

<p><img src="media/14921577512970/14925909777337.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[拟牛顿法（最大熵模型的学习）]]></title>
    <link href="https://lockxmonk.github.io/14921570225186.html"/>
    <updated>2017-04-14T16:03:42+08:00</updated>
    <id>https://lockxmonk.github.io/14921570225186.html</id>
    <content type="html"><![CDATA[
<p>最大熵模型学习还可以应用牛顿法或者拟牛顿法。<br/>
对于最大熵模型而言，<br/>
<img src="media/14921570225186/14921574471740.jpg" alt=""/><br/>
<img src="media/14921570225186/14921574611293.jpg" alt=""/><br/>
相应的拟牛顿法BFGS算法如下。<br/>
<img src="media/14921570225186/14921576945600.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[装饰器]]></title>
    <link href="https://lockxmonk.github.io/14921324340299.html"/>
    <updated>2017-04-14T09:13:54+08:00</updated>
    <id>https://lockxmonk.github.io/14921324340299.html</id>
    <content type="html"><![CDATA[
<p>函数也是一个对象，而且函数对象可以被赋值给变量，所以，通过变量也能调用该函数。</p>

<p>函数对象有一个<code>__name__</code>属性，可以拿到函数的名字：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def now():
    print &#39;1992-12-14&#39;
f = now
f()
print now.__name__,f.__name__

</code></pre>

<p><img src="media/14921324340299/14921328219891.jpg" alt=""/></p>

<p><strong>现在，假设我们要增强<code>now()</code>函数的功能，比如，在函数调用前后自动打印日志，但又不希望修改<code>now()</code>函数的定义，这种在代码运行期间动态增加功能的方式，称之为“装饰器”<code>（Decorator）</code>。</strong></p>

<p>本质上，<code>decorator</code>就是一个返回函数的高阶函数。所以，我们要定义一个能打印日志的<code>decorator</code>，可以定义如下：</p>

<pre><code class="language-py">def log(func):
    def wrapper(*args, **kw):
        print &#39;call %s():&#39; % func.__name__
        return func(*args, **kw)
    return wrapper
</code></pre>

<p>观察上面的log，因为它是一个decorator，所以接受一个函数作为参数，并返回一个函数。我们要借助Python的@语法，把decorator置于函数的定义处：</p>

<pre><code>@log
def now():
    print &#39;2013-12-25&#39;
</code></pre>

<p><img src="media/14921324340299/14921338711853.jpg" alt=""/></p>

<p><strong>练习题：请编写一个decorator，能在函数调用的前后打印出&#39;begin call&#39;和&#39;end call&#39;的日志。</strong></p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def log(func):
    def wrapper(*args, **kw):
        print  &#39;begin call&#39;
        res =  func(*args, **kw)
        print &#39;end call2&#39;
        return res
    return wrapper
@log
def now():
    print &#39;test&#39;
now()
</code></pre>

<p><img src="media/14921324340299/14921348025676.jpg" alt=""/></p>

<p><strong>练习题：再思考一下能否写出一个@log的decorator，使它既支持：</strong></p>

<pre><code class="language-py">@log
def f():
    pass
</code></pre>

<p><strong>又支持</strong></p>

<pre><code class="language-py">@log(&#39;execute&#39;)
def f():
    pass
</code></pre>

<p>解答：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
import functools

def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args ,**kw):
            if len(text)&gt;0:
                print &#39;%s %s()&#39; % (text, func.__name__)
            else:
                print &#39;%s()&#39; % func.__name__
            return func(*args,**kw)
        return wrapper
    return decorator

@log(&#39;sdfsf&#39;)
def now():
    print &#39;test&#39;
now()
</code></pre>

<p><img src="media/14921324340299/14921357641252.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[匿名函数]]></title>
    <link href="https://lockxmonk.github.io/14921312042142.html"/>
    <updated>2017-04-14T08:53:24+08:00</updated>
    <id>https://lockxmonk.github.io/14921312042142.html</id>
    <content type="html"><![CDATA[
<p>当我们在传入函数时，有些时候，不需要显式地定义函数，直接传入匿名函数更方便。</p>

<p>关键字<code>lambda</code>表示匿名函数</p>

<p><strong>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。</strong></p>

<p>例如：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
print map(lambda x:x*x, [1,2,3,4,5,6])
</code></pre>

<p><img src="media/14921312042142/14921315287449.jpg" alt=""/></p>

<p><font color=red>其中冒号前面的x表示函数参数。</font></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[返回函数]]></title>
    <link href="https://lockxmonk.github.io/14920643245223.html"/>
    <updated>2017-04-13T14:18:44+08:00</updated>
    <id>https://lockxmonk.github.io/14920643245223.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">函数作为返回值</h2>

<p>在求和函数中，如果不需要立刻求和，而是在后面的代码中，根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数！</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum
f = lazy_sum(1,3,4,5,5)
#这里是f()不是f
print f()
</code></pre>

<h2 id="toc_1">闭包</h2>

<p>注意到返回的函数在其定义内部引用了局部变量args，所以，当一个函数返回了一个函数后，其内部的局部变量还被新函数引用，所以，闭包用起来简单，实现起来可不容易。</p>

<p><strong>返回的函数并没有立刻执行，而是直到调用了<code>f()</code>才执行</strong><br/>
例如：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f)
    return fs

f1, f2, f3 = count()
print f1(),f2(),f3()
</code></pre>

<p>可能认为结果为<code>1，4，9</code>但是结果为：<br/>
<img src="media/14920643245223/14920656661011.jpg" alt=""/><br/>
<font color=red>原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时，它们所引用的变量i已经变成了3，因此最终结果为9。</font></p>

<blockquote>
<p>所以：返回闭包时牢记的一点就是：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p>
</blockquote>

<p>要引用的话，方法是再创建一个函数，用该函数的参数绑定循环变量当前的值，无论该循环变量后续如何更改，已绑定到函数参数的值不变：</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def count():
    fs=[]
    for i in range(1,4):
        def f(j):
            def g():
                return j*j
            return g
        fs.append(f(i))
    return fs
f1, f2, f3 = count()
print f1(),f2(),f3()
</code></pre>

<p><img src="media/14920643245223/14920669289447.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorted（排序）]]></title>
    <link href="https://lockxmonk.github.io/14920539372230.html"/>
    <updated>2017-04-13T11:25:37+08:00</updated>
    <id>https://lockxmonk.github.io/14920539372230.html</id>
    <content type="html"><![CDATA[
<p><strong>1.用sorted进行排序</strong></p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
num =[2,5,6,4,3,29,12]
print sorted(num)

</code></pre>

<p><img src="media/14920539372230/14920542668861.jpg" alt=""/></p>

<p><strong>2.默认情况下，对字符串排序，是按照ASCII的大小比较的，由于&#39;Z&#39; &lt; &#39;a&#39;，结果，大写字母Z会排在小写字母a的前面。<br/>
现在，我们提出排序应该忽略大小写，按照字母序排序。</strong></p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def cmp_ignore_case(s1, s2):
    u1 = s1.upper()
    u2 = s2.upper()
    if u1 &lt; u2:
        return -1
    if u1 &gt; u2:
        return 1
    return 0
print sorted([&#39;bob&#39;, &#39;about&#39;, &#39;Zoo&#39;, &#39;Credit&#39;], cmp_ignore_case)
</code></pre>

<p><img src="media/14920539372230/14920543761031.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filter]]></title>
    <link href="https://lockxmonk.github.io/14920527647833.html"/>
    <updated>2017-04-13T11:06:04+08:00</updated>
    <id>https://lockxmonk.github.io/14920527647833.html</id>
    <content type="html"><![CDATA[
<p><strong>1.请尝试用filter()删除1~100的素数。</strong></p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
num = range(1, 101)

def prime_num(s):
    for x in range(2, s):
        if (s % x) == 0:
            return True
        else:
            return False
print filter(prime_num, num)
</code></pre>

<p>结果：<br/>
<img src="media/14920527647833/14920538585519.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Map/Reduce]]></title>
    <link href="https://lockxmonk.github.io/14920523812017.html"/>
    <updated>2017-04-13T10:59:41+08:00</updated>
    <id>https://lockxmonk.github.io/14920523812017.html</id>
    <content type="html"><![CDATA[
<p>1.利用map()函数，把用户输入的不规范的英文名字，变为首字母大写，其他小写的规范名字。输入：[&#39;adam&#39;, &#39;LISA&#39;, &#39;barT&#39;]，输出：[&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]。</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def upper(s):
    return s.capitalize()
print(map(upper, [&#39;Adam&#39;, &#39;Lisa&#39;, &#39;Bart&#39;]) )
</code></pre>

<p><img src="media/14920523812017/14920538865556.jpg" alt=""/></p>

<p>2.Python提供的sum()函数可以接受一个list并求和，请编写一个prod()函数，可以接受一个list并利用reduce()求积。</p>

<pre><code class="language-py"># -*- coding: utf-8 -*-
def prod(x,y):
    return x*y
m = [1,2,3,4]
print (reduce(prod,m))
</code></pre>

<p><img src="media/14920523812017/14920539075590.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模型学习的最优化算法（接上一文）]]></title>
    <link href="https://lockxmonk.github.io/14920445399813.html"/>
    <updated>2017-04-13T08:48:59+08:00</updated>
    <id>https://lockxmonk.github.io/14920445399813.html</id>
    <content type="html"><![CDATA[
<p>逻辑斯谛回归模型、最大嫡模型学习归结为以似然函数为目标函数的最优化问题，通常通过迭代算法求解.从最优化的观点看，这时的目标函数具有很好的性质.<font color=red>它是光滑的凸函数，因此多种最优化的方法都适用，保证能找到全局最优解.</font>常用的方法有改进的迭代尺度法、梯度下降法、牛顿法或拟牛顿法.牛顿法或拟牛顿法一般收敛速度更快.</p>

<p>这次主要学习基于改进的迭代尺度法与拟牛顿法的最大熵模型学习算法。（还有梯度下降法，这次不过多学习）</p>

<h2 id="toc_0">改进的迭代尺度法</h2>

<p>改进的迭代尺度法（improved iterative scaling，IIS)是一种最大熵模型学习的最优化算法.</p>

<p>已知最大熵模型为：<br/>
<img src="media/14920445399813/14920447866369.jpg" alt=""/><br/>
对数似然函数为：<br/>
<img src="media/14920445399813/14920449425684.jpg" alt=""/><br/>
目标是通过极大似然估计学习模型参数，即求对数似然函数的极大值\(\hat{w}\)</p>

<p>改进的迭代尺度算法（iis）的想法是：假设最大熵模型当前的参数向量是\(w=(w_1,w_2,...,w_n)^T\),我们 希望找到一个新的参数向量\(w+\delta = (w_1+\delta_1,w_2+\delta_2,....,w_n+\delta_n)^T\)，使得模型的对数似然函数值增大.如果能有这样一种参数向量更新的方法\(\tau:w \rightarrow w+\delta\),那么就 可以重复使用这一方法，直至找到对数似然函数的最大值.</p>

<p>对于给定的经验分布\(\tilde P(x,y)\),模型参数从\(w到w+\delta\)，对数似然函数的改变量是：<br/>
<img src="media/14920445399813/14920457816508.jpg" alt=""/></p>

<p>如果能找到适当的\(\delta使下届A(\delta | w)\)提高，那么对数似然函数也会提高。然而，函数\(A(\delta | w)\)中的\(\delta\)是一个向量，含有多个变量，不容易同时优化，IIS试图以此只优化其中一个变量\(\delta_i\)，而固定其他变量\(\delta_j,i  \neq j\).</p>

<p>为达到这一目的，IIS进一步降低下界\(A(\delta | w)\),具体的，IIS引进一个量\(f^{\#}(x,y)\):<br/>
<img src="media/14920445399813/14920481227290.jpg" alt=""/><br/>
因为\(f_i\)是一个二值函数，故\(f^{\#}(x,y)\)表示所有特征在（x，y）出现的次数，这样，\(A(\delta | w)\)可以改写为：</p>

<p><img src="media/14920445399813/14920483320007.jpg" alt=""/></p>

<p><strong>下面给出IIS算法：</strong><br/>
<img src="media/14920445399813/14920487060621.jpg" alt=""/><br/>
<img src="media/14920445399813/14920491294532.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[logistic regression(逻辑斯蒂回归)]]></title>
    <link href="https://lockxmonk.github.io/14917858710123.html"/>
    <updated>2017-04-10T08:57:51+08:00</updated>
    <id>https://lockxmonk.github.io/14917858710123.html</id>
    <content type="html"><![CDATA[
<p>简介：逻辑斯谛回归（logistic regression)是统计学习中的经典分类方法.最大熵是 概率模型学习的一个准则，将其推广到分类问题得到最大熵模型(maximum entropy model).逻辑斯谛回归模型与最大熵模型都属于对数线性模型.</p>

<h2 id="toc_0">逻辑斯蒂回归模型</h2>

<h3 id="toc_1">逻辑斯蒂分布</h3>

<p><img src="media/14917858710123/14918919297549.jpg" alt=""/></p>

<h3 id="toc_2">二项逻辑斯蒂回归模型</h3>

<p>二项逻辑斯诗回归模型（binomial logistic regression model)是一种分类模型，由条件概率分布\(P(Y|X)\)表示，形式为参数化的逻辑斯谛分布.这里，随机变量X取值为实数，随机变量Y取值为1或0.我们通过监督学习的方法来估计模型参数.</p>

<p><img src="media/14917858710123/14918930389977.jpg" alt=""/><br/>
现在考査逻辑斯谛回归模型的特点.一个事件的几率（odds)是指该事件发生的概率与该事件不发生的概率的比值.如果事件发生的概率是p,那么该亊件的几率是\(\frac{1}{1-p}\) ,该事件的对数几率(log odds)或logit函数是<br/>
<img src="media/14917858710123/14918936472837.jpg" alt=""/><br/>
<font color = red>这就是说，在逻辑斯谛回归模型中，输出y = l的对数几率是输入x的线性函数.或者说，输出Y=1的对数几率是由输入x的线性函数表示的模型，即逻辑斯谛回归模型.</font></p>

<p>换一个角度看，考虑对输入x进行分类的线性函数\(w*x\),其值域为实数域.注意，这里\(x\in R^{n+1},w \in R^{n+1}\).通过逻辑斯谛回归模型定义式(6.5)可以将线性函数\(w*x\)转换为概率：<br/>
<img src="media/14917858710123/14918951209571.jpg" alt=""/></p>

<p><strong>这时，线性函数的值越接近正无穷，概率值就越接近1；线性函数的值越接近负无穷，概率值就越接近0(如图6.1所示).这样的模型就是逻辑斯谛回归模型.</strong></p>

<h3 id="toc_3">模型参数估计</h3>

<p>逻辑斯谛回归模型学习时，对于给定的训练数据集\(T=\{{(x_1,y_1),(x_2,y_2)...(x_N,y_N)\}}\),其中\(x_i\in R^n,y_i \in \{{0,1\}}\)，<strong>可以应用极大似然估计法估计模型参数，从而得到逻辑斯谛回归模型.</strong><br/>
<img src="media/14917858710123/14918969386189.jpg" alt=""/></p>

<h3 id="toc_4">多项了逻辑斯蒂回归</h3>

<p>上面介绍的逻辑斯谛回归模型是二项分类模型，用于二类分类.可以将其推广为多项逻辑斯缔回归模型(multi-nominal logistic regression model)，用于多类分类.假设离散型随机变量Y的取值集合是{1,2...K}，那么多项逻辑斯谛回归模型是:<br/>
<img src="media/14917858710123/14918973306162.jpg" alt=""/><br/>
二项逻辑斯谛回归的参数估计法也可以推广到多项逻辑斯讳回归.</p>

<h1 id="toc_5">最大熵模型</h1>

<p>最大熵模型（maximum entropy model)由最大熵原理推导实现.这里首先叙述一般的最大熵原理，然后讲解最大熵模型的推导，最后给出最大熵模型学习的形式。</p>

<h2 id="toc_6">最大熵原理</h2>

<p>最大熵原理是概率模型学习的一个准则.<font color=red>最大熵原理认为，学习概率模型时，在所有可能的概率模型（分布）中，熵最大的模型是最好的模型.通常用约束条件来确定概率模型的集合，所以，最大熵原理也可以表述为在满足约束条件的模型集合中选取熵最大的模型.</font></p>

<p>假设离散随机变量X的概率分布是p(X),则其熵是：<br/>
<img src="media/14917858710123/14919006601164.jpg" alt=""/><br/>
直观地，<font color=red>最大熵原理认为要选择的概率模型首先必须满足已有的事实，即约束条件.在没有更多信息的情况下，那些不确定的部分都是“等可能的”.最大熵原理通过熵的最大化来表示等可能性.</font>“等可能”不容易操作，而熵则是一个可优化的数值指标.</p>

<p>首先，可以通过一个简单的例子来了解一下最大熵原理.<br/>
<img src="media/14917858710123/14919019478267.jpg" alt=""/></p>

<p>图6.2提供了用最大熵原理进行概率模型选择的几何解释.概率模型集合P可由欧氏空间中的单纯形(simplex)表示，如左图的三角形(2-单纯形).一个点代表一个模型，整个单纯形代表模型集合.右图上的一条直线对应于一个约束 条件，直线的交集对应于满足所有约束条件的模型集合.一般地，这样的模型仍有无穷多个.学习的目的是在可能的模型集合中选择最优模型，而最大熵原理则给出最优模型选择的一个准则.<br/>
<img src="media/14917858710123/14919593499530.jpg" alt=""/></p>

<h3 id="toc_7">最大熵模型的定义</h3>

<p>最大熵原理是统计学习的一般原理，将它应用到分类得到最大熵模型. </p>

<p>假设分类模型是一个条件概率分布\(P(Y|X),X \in \mathcal{X} \subseteq R^n\)表示输入，\(Y \in \mathcal{Y}\)表示输出，\(\mathcal{X}\)和\(\mathcal{Y}\)分别是输入和输出的集合.这个模型表示的是对于给定的输入\(\mathcal{X}\)，以条作概率\(P(Y|X)\)输出Y.<br/>
给定一个训练数据集<br/>
\(T= {\{(x_1,y_1),(x_2,y_2),...(x_N,y_N)}\}\)<br/>
学习的目标是用最大熵原理选择最好的分类模型。</p>

<p>首先考虑模型应该满足的条件，给定训练数据集，可以确定联合分布P(X,Y)的经验分布和边缘分布P(X)的经验分布，分别以\(\tilde{P}(X,Y)和\tilde{P}(X)\)表示。这里：<br/>
<img src="media/14917858710123/14919609290680.jpg" alt=""/><br/>
 用特征函数\(f(x,y)描述输入x和输出y之间的某一个事实\)。其定义是：<br/>
 <img src="media/14917858710123/14919611561526.jpg" alt=""/><br/>
特征函数f(x,y)关于经验分布\(\tilde{P}(X,Y)\)的期望值，用\(E_\tilde{P}(f)\)表示：<br/>
<img src="media/14917858710123/14919613926643.jpg" alt=""/><br/>
特征函数f(x,y)关于模型P(Y|X)与经验分布\(\tilde{P}(X)\)的期望值，用\(E_{P}(f)\)表示：<br/>
<img src="media/14917858710123/14919617357953.jpg" alt=""/></p>

<p>最大熵模型的定义为：<br/>
<img src="media/14917858710123/14919625972087.jpg" alt=""/></p>

<h3 id="toc_8">最大熵模型的学习</h3>

<p>最大熵模型的学习过程就是求解最大熵模型的过程.最大熵模型的学习可以形式化为约束最优化问题.<br/>
对于给定的训练数据集\(T= {\{(x_1,y_1),(x_2,y_2),...(x_N,y_N)}\}\)以及特征函数\(f_i(x,y),i=1,2,...n\),最大熵模型的学习等价于约束最优化问题：<br/>
<img src="media/14917858710123/14919630413332.jpg" alt=""/><br/>
求解约束最优化问题(6.14)〜(6.16)，所得出的解，就是最大熵模型学习的解.下面给出具体推导.<br/>
这里，将约束最优化的原始问题转换为无约束最优化的对偶问题.通过求解对偶问题求解原始问题.<br/>
<img src="media/14917858710123/14919633775267.jpg" alt=""/><br/>
<img src="media/14917858710123/14919633957280.jpg" alt=""/></p>

<p>下面举例来说明最大熵模型的计算：</p>

<p><strong>例：假设随机变量X有5个取值{A,B,C,D,E}，要估计各个值的概率P(A),P(B),P(C),P(D),P(E).</strong></p>

<p><img src="media/14917858710123/14919642672585.jpg" alt=""/><br/>
<img src="media/14917858710123/14919642856866.jpg" alt=""/><br/>
<img src="media/14917858710123/14919643007948.jpg" alt=""/></p>

<h3 id="toc_9">极大似然估计</h3>

<p>从以上最大熵模型学习中可以看出，最大熵模型是由式(6.22)、式(6.23)表示的 条件概率分布.下面证明对偶函数的极大化等价于最大嫡模型的极大似然估计.</p>

<p>己知训练数据的经验概率分布\(\tilde{P}(X,Y)\),条件概率分布\(P(Y|X)\)的对数似然 函数表示为:<br/>
<img src="media/14917858710123/14919659054476.jpg" alt=""/><br/>
当提哦啊煎概率分布P(y|x)是最大熵模型(6.22)和(6.23)时,对数似然函数\(L_ \tilde{p}(P_w)\)为：<br/>
<img src="media/14917858710123/14919660761710.jpg" alt=""/><br/>
比较算式(6.26)和式(6.27),可得：<br/>
<img src="media/14917858710123/14920442862315.jpg" alt=""/></p>

<p>既然对偶函数\(\psi(w)\)等价于对数似然函数\(L_{\tilde p}(P_w)\) ,于是证明了最大熵模型学习中的对偶函数极大化等价于最大熵模型的极大似然估计这一事实.<br/>
这样，最大熵模型的学习问题就转换为具体求解对数似然函数极大化或对偶函数极大化的问题.</p>

<p>可以将最大熵模型写成更一般的形式.<br/>
<img src="media/14917858710123/14920444597468.jpg" alt=""/><br/>
最大熵模型与逻辑斯谛回归模型有类似的形式，它们又称为对数线性模型(log linear model).模型学习就是在给定的训练数据条件下对模型进行极大似然估计或正则化的极大似然估计.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[决策树生成--CART算法]]></title>
    <link href="https://lockxmonk.github.io/14908575557810.html"/>
    <updated>2017-03-30T15:05:55+08:00</updated>
    <id>https://lockxmonk.github.io/14908575557810.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">CART算法</h2>

<p>分类与回归树(classification and regression tree, CART)模型由 Breiman等人在1984年提出，是应用广泛的决策树学习方法.CART同样由特征选择、树 的生成及剪枝组成，<mark>既可以用于分类也可以用于回归.</mark>以下将用于分类与回归的树统称为决策树.</p>

<p>CART是在给定输入随机变量X的条件下输出随机变量Y的条件概率分布的学习方法.CART假设决策树是二叉树，内部结点特征的取值为“是”和“否”，左分支是取值为“是”的分支，右分支是取值为“否”的分支.这样的决策树等价于递归地二分每个特征，将输入空间即特征空间划分为有限个单元，并在这些单元上确定预测的概率分布，也就是在输入给定的条件下输出的条件概率分布.</p>

<p><strong>CART算法由以下两步组成：</strong></p>

<p>1.决策树生成：基于训练数据集生成决策树，生成的决策树要尽量大：<br/>
2.决策树剪枝：用验证数据集对己生成的树进行剪枝并选择最优子树，这时用损失函数最小作为剪枝的标准.</p>

<h3 id="toc_1">CART生成</h3>

<p>决策树的生成就是递归地构建二叉决策树的过程.对回归树用平方误差最小化准则，对分类树用基尼指数(Gini index)最小化准则，进行特征选择，生成二叉树.</p>

<h4 id="toc_2">1.回归树的生成</h4>

<p>假设X与Y分别为输入和输出变量，并且Y是连续变量，给定训练数据集:<br/>
    \(D={(x_1,y_1),(x_2,y_2),...(x_N,y_N)}\)<br/>
考虑如何生成回归树。</p>

<p>一个回归树对应着输入空间（即特征空间）的一个划分以及在划分的单元上 的输出值.假设己将输入空间划分为M个单元\(R_1,R_2,R_3...R_M\),并且在每个单元\(R_M\)上 有一个固定的输出值\(c_m\)，于是回归树模型可表示为:<br/>
<img src="media/14908575557810/14909500378632.jpg" alt=""/></p>

<p>当输入空间的划分确定时，可以用平方误差\(\sum_{x_i\in R}(y_i-f(x_i))^2\)来表示回归树对于训练数据的预测误差，用平方误差最小的准则求解每个单元上的最优输出值.易知，单元\(R_m\)上的\(c_m\)的最优值\(\hat c_m\)是\(R_m\)上的所有输入实例\(x_i\)对应的输出\(y_i\)的均值，即:<br/>
<img src="media/14908575557810/14909504677321.jpg" alt=""/></p>

<p>问题是怎样对输入空间进行划分,这里采用启发式的方法，选择第j个变量\(x^{(j)}\)和它取的值s，作为切分变量（splitting variable)和切分点（splitting point),并定义两个区域：<br/>
<img src="media/14908575557810/14909505605933.jpg" alt=""/><br/>
然后寻找最优切分变量j和最优切分点s，最优地，求解：<br/>
<img src="media/14908575557810/14909506372664.jpg" alt=""/><br/>
对固定输入变量j可以找到最优切分点s:<br/>
<img src="media/14908575557810/14909506657025.jpg" alt=""/><br/>
便利所有输入变量，找到最优的切分变量j，构成一个对\((j,s)\).依此将输入空间划分为两个区域。接着，对每个区域重复上述划分过程，直到满足停止条件为止.这样就生成一棵回归树。这样的回归树通常称为最小二乘回归树(least squares regression tree)，现将算法叙述如下：</p>

<p>最小二乘回归树生成算法：<br/>
<img src="media/14908575557810/14909510077124.jpg" alt=""/></p>

<h4 id="toc_3">2.分类树的生成</h4>

<p>分类树用基尼指数选择最有特征，同时决定该特征的最优二值切分点。</p>

<p><strong>基尼指数：</strong><br/>
<img src="media/14908575557810/14913540871077.jpg" alt=""/><br/>
如果样本集合D根据特征A是否取某一可能值a被分割成\(D_1和D_2\)两部分，即：<br/>
<img src="media/14908575557810/14913550101283.jpg" alt=""/></p>

<p>基尼指数Gini(D)表示集合D的不确定性，基尼指数Gini(D,A)表示经A=a分割后集合D的不确定性。基尼指数值越大，样本集合的不确定性也就越大，这一点与熵相似。</p>

<p>图5.7显示二类分类问题中基尼指数Gini(p)、熵（单位比特）之半和分类误差率的关系.横坐标表示概率P，纵坐标表示损失.可以看出基尼指数和 熵之半的曲线很接近，都可以近似地代表分类误差率.<br/>
<img src="media/14908575557810/14913559817897.jpg" alt=""/></p>

<p><strong>CART生成算法：</strong><br/>
<img src="media/14908575557810/14913560936133.jpg" alt=""/><br/>
<img src="media/14908575557810/14913561059742.jpg" alt=""/></p>

<p><strong>下面继续用例题来说明该算法：</strong><br/>
<img src="media/14898241272608/14908402191601.jpg" alt=""/><br/>
根据上表所给的训练数据集，应用CART算法生成决策树。</p>

<p><img src="media/14908575557810/14913582940784.jpg" alt=""/></p>

<h4 id="toc_4">CART剪枝</h4>

<p>CART剪枝算法从“完全生长”的决策树的底端剪去一些子树，使决策树变小(模型变简单)，从而能够对未知数据有更准确的预测.CART剪枝算法由两步组成：首先从生成算法产生的决策树\(T_0\)底端开始不断剪枝，直到\(T_0\)的根结点，形成一个子树序列\( {T_0,T_1,...,T_n}\);然后通过交叉验证法在独立的验证数据集上对子树序列进行测试，从中选择最优子树.</p>

<p>1.<strong>剪枝</strong>，形成一个子树序列<br/>
在剪枝过程中，计算子树的损失函数：<br/>
<img src="media/14908575557810/14913604606599.jpg" alt=""/><br/>
其中，T为任意子树，C(T)为对训练数据的预测误差(如基尼指数)，丨T丨为子树的叶结点个数，\(α \geq0\)为参数，\(C_{\alpha}(T)\)为参数是\(\alpha\)时的子树T的整体损失.参数\(\alpha\)权衡训练数据的拟合程度与模型的复杂度.</p>

<p>对固定的\(\alpha\), —定存在使损失函数\(C_{\alpha}(T)\)最小的子树，将其表示为\(T_{\alpha}\)。\(T_{\alpha}\)在损失函数\(C_{\alpha}(T)\)最小的意义下是最优的.容易验证这样的最优子树是唯一的.当\(\alpha\)大的时候，最优子树\(T_{\alpha}\)偏小；当\(\alpha\)小的时候，最优子树\(T_{\alpha}\)偏大.极端情况，当\(\alpha\) = 0时，整体树是最优的.当\(\alpha \rightarrow \infty \)时，根结点组成的单结点树是最优的.</p>

<p>Breiman等人证明：可以用递归的方法对树进行剪枝.将\(\alpha\)从小增大，\(0=\alpha_0&lt;\alpha_1&lt;...&lt;\alpha_n&lt;\infty,\)，产生一系列的区间\([\alpha_i,\alpha_{i+1}),i=0,1,...n;\)，剪枝得到的子树 序列对应着区间\(\alpha \in [\alpha_i,\alpha_{i+1}),i=0,1,...n;\)的最优子树序列\( {T_0,T_1,...,T_n}\),序列中的子树是嵌套的.</p>

<p><img src="media/14908575557810/14913621104324.jpg" alt=""/><br/>
<img src="media/14908575557810/14913625337737.jpg" alt=""/></p>

<p><strong>CART剪枝算法：</strong><br/>
<img src="media/14908575557810/14913629643758.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[决策树的生成]]></title>
    <link href="https://lockxmonk.github.io/14898241272608.html"/>
    <updated>2017-03-18T16:02:07+08:00</updated>
    <id>https://lockxmonk.github.io/14898241272608.html</id>
    <content type="html"><![CDATA[
<p>这次将学习决策树的生成算法，首先了解ID3的生成算法，然后再学习C4.5的生成算法，这些都是决策树学习的经典算法。</p>

<h2 id="toc_0">ID3算法</h2>

<p>ID3算法的核心是在决策树各个结点上应用信息增益准则选择特征，递归地构建决策树.具体方法是：从根结点（root node)开始，对结点计算所有可能的特征的信息增益，选择信息增益最大的特征作为结点的特征，由该特征的不同取值建立子结点：再对子结点递归地调用以上方法，构建决策树；直到所有特征的 信息增益均很小或没有特征可以选择为止.最后得到一个决策树.ID3相当于用极大似然法进行概率模型的选择.</p>

<p><strong>该算法的具体步骤为：</strong><br/>
<img src="media/14898241272608/14908400085381.jpg" alt=""/><br/>
<img src="media/14898241272608/14908400481942.jpg" alt=""/></p>

<p><strong>这里我们继续使用之前用过的表来进行计算：</strong><br/>
<img src="media/14898241272608/14908402191601.jpg" alt=""/><br/>
利用ID3算法建立决策树：<br/>
<img src="media/14898241272608/14908417653584.jpg" alt=""/><br/>
<mark>但是ID3只有树的生成，容易发生过拟合现象。</mark></p>

<h2 id="toc_1">C4.5d的生成算法</h2>

<p>C4.5算法与ID3算法相似，C4.5算法对ID3算法进行了改进.C4.5在生成的过程中，用<mark>信息增益比</mark>来选择特征(ID3为信息增益).<br/>
<img src="media/14898241272608/14908421490687.jpg" alt=""/></p>

<h1 id="toc_2">决策树的剪枝</h1>

<p>决策树生成算法递归地产生决策树，直到不能继续下去为止.这样产生的树往往对训练数据的分类很准确，但对未知的测试数据的分类却没有那么准确，即出现过拟合现象.<mark>过拟合的原因在于学习时过多地考虑如何提高对训练数据的正确分类，从而构建出过于复杂的决策树</mark>.解决这个问题的办法是考虑决策树的复 杂度，对已生成的决策树进行简化.</p>

<p>在决策树学习中将已生成的树进行简化的过程称为剪枝（pruning).具体地，剪枝从已生成的树上裁掉一些子树或叶结点，并将其根结点或父结点作为新的叶结点，从而简化分类树模型.</p>

<p>这里学习一种简单的决策树学习的剪枝算法。</p>

<p>决策树的剪枝往往通过极小化决策树整体的损失函数(loss fimction)或代价函数(costfimction)来实现.设树T的叶结点个数为\(|T|\)，t是树T的叶结点，该叶结点有\(N_{t}\)个样本点，其中k类的样本点有\(N_{tk}个，k=1,2,3...,K,H_i(T)\)为叶结点t上的经验熵，\(a\geq0\)为参数，则决策树学习的损失函数可以定义为:<br/>
<img src="media/14898241272608/14908428498530.jpg" alt=""/><br/>
式(5.14)中，c(t)表示模型对训练数据的预测误差，即模型与训练数据的拟合程度，|T|表示模型复杂度，参数\(a\geq0\)控制两者之间的影响.较大的\(\alpha\)促使选择较简单的模型(树)，较小的\(\alpha\)促使选择较复杂的模型(树).\(\alpha = 0\)意味着只考虑 模型与训练数据的拟合程度，不考虑模型的复杂度.</p>

<p>剪枝，就是当\(\alpha\)确定时，选择损失函数最小的模型，即损失函数最小的子树.当\(\alpha\)值确定时，子树越大，往往与训练数据的拟合越好，但是模型的复杂度就越高；相反，子树越小，模型的复杂度就越低，但是往往与训练数据的拟合不好.损失函数正好表示了对两者的平衡.</p>

<p>可以看出，决策树生成只考虑了通过提高信息增益（或信息增益比）对训练数据进行更好的拟合.而决策树剪枝通过优化损失函数还考虑了减小模型复杂度，决策树生成学习局部的模型，而决策树剪枝学习整体的模型.</p>

<p>式(5.11)或式(5.14)定义的损失函数的极小化等价于正则化的极大似然估计.所以，利用损失函数最小原则进行剪枝就是用正则化的极大似然估计进行模型选择.</p>

<p>下图是决策树的剪枝过程示意图。<br/>
<img src="media/14898241272608/14908438468056.jpg" alt=""/></p>

<p>剪枝算法如下：<br/>
<img src="media/14898241272608/14908438815566.jpg" alt=""/><br/>
<img src="media/14898241272608/14908438965218.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[决策树]]></title>
    <link href="https://lockxmonk.github.io/14897993109270.html"/>
    <updated>2017-03-18T09:08:30+08:00</updated>
    <id>https://lockxmonk.github.io/14897993109270.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>决策树（decision tree)是一种基本的分类与回归方法。本章主要讨论用于分类的决策树。决策树模型呈树形结构，在分类问题中，表示基于特征对实例进行分类的过程。它可以认为是if-then规则的集合，也可以认为是定义在特征空间与类空间上的条件概率分布。其主要优点是模型具有可读性，分类速度快。学习时，利用训练数据，根据损失函数最小化的原则建立决策树模型。预测时，对新的数据，利用决策树模型进行分类。决策树学习通常包括3个步骤：特征选择、决策树的生成和决策树的修剪。这些决策树学习的思想主要来源于由Quinlan在1986年提出的ID3算法和1993年提出的C4。5算法,以及由Breiman等人在1984年提出的CART算法。</p>
</blockquote>

<h2 id="toc_0">决策树模型与学习</h2>

<p>定义（决策树）：分类决策树模型是一种描述对实例进行分类的树形结 构。决策树由结点（node)和有向边（directed edge)组成。结点有两种类型：内部结点（internal node)和叶结点（leafnode)。内部结点表示一个特征或属性，叶结点表示一个类。</p>

<p>用决策树分类，从根结点开始，对实例的某一特征进行测试，根据测试结果，将实例分配到其子结点；这时，每一个子结点对应着该特征的一个取值。如此递归地对实例进行测试并分配，直至达到叶结点。最后将实例分到叶结点的类中。</p>

<p>图5.1是一个决策树的示意图。图中圆和方框分别表示内部结点和叶结点。<br/>
<img src="media/14897993109270/14897996064452.jpg" alt=""/></p>

<h2 id="toc_1">决策树与if-then规则</h2>

<p>可以将决策树看成一个if-then规则的集合。将决策树转换成if-then规则的过程是这样的：由决策树的根结点到叶结点的每一条路径构建一条规则；路径上内部结点的特征对应着规则的条件，而叶结点的类对应着规则的结论。决策树的路径或其对应的if-then规则集合具有一个重要的性质:互斥并且完备。这就是说，每一个实例都被一条路径或一条规则所覆盖，而且只被一条路径或一条规则所覆盖。这里所谓覆盖是指实例的特征与路径上的特征一致或实例满足规则的条件。</p>

<h2 id="toc_2">决策树与条件概率分布</h2>

<p>决策树还表示给定特征条件下类的条件概率分布。这一条件概率分布定义在特征空间的一个划分（partition)上。将特征空间划分为互不相交的单元（cell)或区域（region),并在每个单元定义一个类的概率分布就构成了一个条件概率分布。决策树的一条路径对应于划分中的一个单元。决策树所表示的条件概率分布由各个单元给定条件下类的条件概率分布组成。假设X为表示特征的随机变量， Y为表示类的随机变量，那么这个条件概率分布可以表示为P(Y|X)。X取值于给定划分下单元的集合，Y取值于类的集合。各叶结点（单元）上的条件概率往往偏向某一个类，即属于某一类的概率较大。决策树分类时将该结点的实例强行分到条件概率大的那一类去。</p>

<p>图5.2 (a)示意地表示了特征空间的一个划分。图中的大正方形表示特征空间。这个大正方形被若干个小矩形分割，每个小矩形表示一个单元。特征空间划分上的单元构成了一个集合，X取值为单元的集合。为简单起见，假设只有两类:正类和负类，即Y取值为+1和-1。小矩形中的数字表示单元的类。图5.2(b)示意地表示特征空间划分确定时，特征（单元）给定条件下类的条件概率分布。 图5.2 (b)中条件概率分布对应于图5.2 (a)的划分。当某个单元c的条件概率满足\(P(Y=+1|X= C)&gt;0.5\)时，则认为这个单元属于正类，即落在这个单元的实例都被视为正例。图5.2(c)为对应于图5.2 (b)中条件概率分布的决策树。<br/>
<img src="media/14897993109270/14898004011784.jpg" alt=""/></p>

<p>决策树学习本质上是从训练数据集中归纳出一组分类规则。与训练数据集不相矛盾的决策树（即能对训练数据进行正确分类的决策树）可能有多个，也可能一个也没有。我们需要的是一个与训练数据矛盾较小的决策树，同时具有很好的泛化能力。从另一个角度看，决策树学习是由训练数据集估计条件概率模型。基于特征空间划分的类的条件概率模型有无穷多个。我们选择的条件概率模型应该 不仅对训练数据有很好的拟合，而且对未知数据有很好的预测。</p>

<p>决策树学习用损失函数表示这一目标。如下所述，决策树学习的损失函数通常是正则化的极大似然函数。决策树学习的策略是以损失函数为目标函数的最小化。<br/>
当损失函数确定以后，学习问题就变为在损失函数意义下选择最优决策树的问题。因为从所有可能的决策树中选取最优决策树是NP完全问题，所以现实中决策树学习算法通常采用启发式方法，近似求解这一最优化问题。这样得到的决策树是次最优（sub-optimal)的.<br/>
决策树学习的算法通常是一个递归地选择最优特征，并根据该特征对训练数据进行分割，使得对各个子数据集有一个最好的分类的过程。这一过程对应着对特征空间的划分，也对应着决策树的构建。<mark>开始，构建根结点，将所有训练数据都放在根结点。选择一个最优特征，按照这一特征将训练数据集分割成子集，使得各个子集有一个在当前条件下最好的分类。如果这些子集已经能够被基本正确分类，那么构建叶结点，并将这些子集分到所对应的叶结点中去：如果还有子集 不能被基本正确分类，那么就对这些子集选择新的最优特征，继续对其进行分割，构建相应的结点。如此递归地进行下去，直至所有训练数据子集被基本正确分类，或者没有合适的特征为止。最后每个子集都被分到叶结点上，即都有了明确的类。这就生成了一棵决策树。</mark></p>

<p>以上方法生成的决策树可能对训练数据有很好的分类能力，但对未知的测试数据却未必有很好的分类能力，即<mark>可能发生过拟合现象</mark>。我们需要对己生成的树自下而上进行剪枝，将树变得更简单，从而使它具有更好的泛化能力。<mark>具体地，就是去掉过于细分的叶结点，使其回退到父结点，甚至更高的结点，然后将父结点或更高的结点改为新的叶结点</mark>。</p>

<p>如果特征数童很多，也可以在决策树学习开始的时候，对特征进行选择，只留下对训练数据有足够分类能力的特征。</p>

<p>可以看出，决策树学习算法包含特征选择、决策树的生成与决策树的剪枝过程。由于决策树表示一个条件概率分布，所以深浅不同的决策树对应着不同复杂度的概率模型。决策树的生成对应于模型的局部选择，决策树的剪枝对应于模型的全局选择。决策树的生成只考虑局部最优，相对地，决策树的剪枝则考虑全局最优。</p>

<p>决策树学习常用的算法有ID3、C4.5与CART,下面结合这些算法分别叙述决策树学习的特征选择、决策树的生成和剪枝过程。</p>

<h2 id="toc_3">特征选择</h2>

<h3 id="toc_4">特征选择问题</h3>

<p>特征选择在于选取对训练数据具有分类能力的特征。这样可以提高决策树学习的效率。如果利用一个特征进行分类的结果与随机分类的结果没有很大差别，则称这个特征是没有分类能力的。经验上扔掉这样的特征对决策树学习的精度影响不大。通常特征选择的准则是信息增益或信息增益比。</p>

<p>首先通过一个例子来说明特征选择问题：</p>

<p><strong>例5.1：表5.1是一个由15个样本组成的贷款申请训练数据。数据包括贷款申请人的4个特征（属性)：第1个特征是年龄，有3个可能值：青年，中年，老年；第2个特征是有工作，有2个可能值：是，否；第3个特征是有自己的房子，有2个可能值：是，否；第4个特征是信贷情况，有3个可能值：非常好，好，一 般。表的最后一列是类别，是否同意贷款，取2个值：是，否.</strong></p>

<p><img src="media/14897993109270/14898020066279.jpg" alt=""/></p>

<p>希望通过所给的训练数据学习一个贷款申请的决策树，用以对未来的贷款申请进行分类，即当新的客户提出贷款申请时，根据申请人的特征利用决策树决定是否批准贷款申请。</p>

<p>特征选择是决定用哪个特征来划分特征空间。</p>

<p>图5.3表示从表5.1数据学习到的两个可能的决策树，分别由两个不同特征的根结点构成。图5.3(a)所示的根结点的特征是年龄，有3个取值，对应于不同的取值有不同的子结点。图5.3(b)所示的根结点的特征是有工作，有2个取值，对应于不同的取值有不同的子结点。两个决策树都可以从此延续下去。问题是：究竟选择哪个特征更好些？这就要求确定选择特征的准则。直观上，如果一个特 征具有更好的分类能力，或者说，按照这一特征将训练数据集分割成子集，使得各个子集在当前条件下有最好的分类，那么就更应该选择这个特征。信息增益 (information gain〉就能够很好地表示这一直观的准则.</p>

<h3 id="toc_5">信息增益</h3>

<p>为了便于说明，先给出熵与条件熵的定义。<br/>
在信息论与概率统计中，熵(entropy)是表示随机变量不确定性的度量，设X是一个取有限个值的离散随机变量，其概率分布为：<br/>
\(P(X=x_i) = P_i  , i=1,2,3...n\)<br/>
则随机变量X的熵定义为：<br/>
\(H(X) = -\sum^{n}_{i=1}{p_ilogp_i}\)<br/>
在上式中，若\(p_i=0\),则定义\(olog0=0\)。通常，上式中的对数以2为底或者以e为底（自然对数），这时熵的单位分别称作比特(bit)或纳特(nat).由定义可 知，熵只依赖于X的分布，而与X的取值无关，所以也可将X的熵记作开\(H_{(p)}\),即<br/>
<img src="media/14897993109270/14898028331151.jpg" alt=""/><br/>
熵越大，随机变量的不确定性就越大。从定义可验证：<br/>
<img src="media/14897993109270/14898033210936.jpg" alt=""/></p>

<p>设有随机变量(X,Y),其联合概率为：<br/>
<img src="media/14897993109270/14898040283563.jpg" alt=""/><br/>
条件熵H(Y|X)表示在已知随机变量X的条件下随机变量Y的不确定性。随机变量X给定的条件下随机变量Y的条件熵（conditional entropy) H(Y|X)，定义为X给定条件下Y的条件概率分布的熵对X的数学期望<br/>
<img src="media/14897993109270/14898042638745.jpg" alt=""/><br/>
当熵和条件熵中的概率由数据估计（特别是极大似然估计）得到时，所对应的熵与条件熵分别称为经验熵 (empirical entropy)和经验条件熵（empirical conditional entropy )。此时，如果有0概率，令0log0=0。<br/>
信息增益（information gain)表示得知特征X的信息而使得类Y的信息的不确定性减少的程度。</p>

<p>信息增益的定义如下所示：<br/>
<img src="media/14897993109270/14898059454405.jpg" alt=""/></p>

<p>决策树学习应用信息增益准则选择特征。<mark>给定训练数据集D和特征A,经验 熵H(D)表示对数据集D进行分类的不确定性。而经验条件熵H(D|A)表示在特征A给定的条件下对数据集D进行分类的不确定性。那么它们的差，即信息增益</mark>，就表示由于特征A而使得对数据集D的分类的不确定性减少的程度。显然，对于数据集D而言，信息增益依赖于特征，不同的特征往往具有不同的信息增益。信息增益大的特征具有更强的分类能力。<br/>
根据信息增益准则的特征选择方法是：对训练数据集（或子集）D,计算其每个特征的信息增益，并比较它们的大小，选择信息增益最大的特征。</p>

<p>下面讲述信息增益的算法：<br/>
<img src="media/14897993109270/14898066826354.jpg" alt=""/><br/>
<img src="media/14897993109270/14898066953482.jpg" alt=""/></p>

<p>下面举例：<br/>
<img src="media/14897993109270/14898226986668.jpg" alt=""/><br/>
<img src="media/14897993109270/14898227425071.jpg" alt=""/></p>

<h3 id="toc_6">信息增益比</h3>

<p>信息增益值的大小是相对于训练数据集而言的，并没有绝对意义。在分类问題困难时，也就是说在训练数据集的经验熵大的时候，信息增益值会偏大。反之，信息增益值会偏小。使用信息增益比（information gain ratio)可以对这一问题进行校正。这是特征选择的另一准则。<br/>
定义（信息增益比）：特征A对训练数据集D的信息增益比\(g_R(D,A)\)定义为其信息增益\(g(D,A)\)与训练数据集D的经验熵H(D)之比：<br/>
<img src="media/14897993109270/14898241117010.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[朴素贝叶斯法]]></title>
    <link href="https://lockxmonk.github.io/14893694433396.html"/>
    <updated>2017-03-13T09:44:03+08:00</updated>
    <id>https://lockxmonk.github.io/14893694433396.html</id>
    <content type="html"><![CDATA[
<p>朴素贝叶斯（naive Bayes)法是基于贝叶斯定理与特征条件独立假设的分类方。对于给定的训练数据集，首先基于特征条件独立假设学习输入/输出的联合概率分布：然后基于此模型，对给定的输入:x，利用贝叶斯定理求出后验概率最大的输出:y。朴素贝叶斯法实现简单，学习与预测的效率都很髙，是一种常用的方法.</p>

<h2 id="toc_0">朴素贝叶斯的学习与分类</h2>

<h3 id="toc_1">基本方法</h3>

<p>设输入空间\(\chi \subseteq R^n\)为n维向量的集合，输出空间为类标记集合\(\mathcal{Y}={c_1,c_2,...c_k}\)。输入为特征向量\(x\in \chi\),输出为类标记\(y\in mathcal{Y}\)。X是定义在输入空间\(\chi\)上的随机向量，Y是定义在输出空间\(\mathcal{Y}\)上的随机变量。P(X,Y)是X和Y的联合概率分布。训练数据集：<br/>
\(T = {(x_1,y_1),(x_2,y_2),...,(x_N,y_N)}\)<br/>
由P(X,Y)独立同分布产生。</p>

<p>朴素贝叶斯法通过训练数据集学习联合概率分布P(X,Y)。具体的，学习以下先验概率分布及条件概率分布。先验概率分布：<br/>
\(P(Y = c_k), k=1,2,3...K\)</p>

<p>条件概率分布：<br/>
\(P(X=x|Y=c_k)=P(X^{(1)}=x^{(1)},...,X^{(n)}=x^{(n)}|Y=c_k), k=1,2,...K\)<br/>
于是学习到联合概率分布P(X,Y)。</p>

<p>条件概率分布P(X=x|Y=\(c_k\))有指数级数量的参数，其估计实际是不可行的，事实上，假设\(x^{(j)}可取值有S_j个，j=1,2,3...n,Y可取值为K个，那么参数个数为K\prod_{j=1}^n{S_j}\)</p>

<p>朴素贝叶斯法对条件概率分布作了条件独立性的假设。由于这是一个较强的假设，朴素贝叶斯法也由此得名。具体地，条件独立性假设是：<br/>
<img src="media/14893694433396/14897352338918.jpg" alt=""/></p>

<p>朴素贝叶斯法实际上学习到生成数据的机制，所以属于生成模型。条件独立假设等于是说用于分类的特征在类确定的条件下都是条件独立的。这一假设使朴 素贝叶斯法变得简单，但有时会牺牲一定的分类准确率。<br/>
朴素贝叶斯法分类时，对给定的输入x,通过学习到的模型计算后验概率分布\(P(Y=C_k|X=x)\),将后验概率最大的类作为x的类输出。后验概率计算根据贝 叶斯定理进行：<br/>
<img src="media/14893694433396/14897352467770.jpg" alt=""/></p>

<h3 id="toc_2">后验概率最大化的含义</h3>

<p>朴素贝叶斯法将实例分到后验概率最大的类中。这等价于期望风险最小化。假设选择0-1损失函数：<br/>
<img src="media/14893694433396/14897368963380.jpg" alt=""/><br/>
式中f(X)是分类决策函数。这时，期望风险函数为：<br/>
<img src="media/14893694433396/14897369463646.jpg" alt=""/><br/>
期望是对联合分布P(X,Y)取的，由此取条件期望：<br/>
<img src="media/14893694433396/14897370507779.jpg" alt=""/><br/>
为了是期望风险最小化，只需要对\(X=x\)逐个极小化，由此得到：<br/>
<img src="media/14893694433396/14897371045644.jpg" alt=""/><br/>
这样一来，根据期望风险最小化准则就得到了后验概率最大化准则：<br/>
<img src="media/14893694433396/14897380067414.jpg" alt=""/><br/>
即朴素贝叶斯法所采用的原理。</p>

<h2 id="toc_3">朴素贝叶斯发的参数估计</h2>

<h3 id="toc_4">极大似然估计</h3>

<p>在朴素贝叶斯法中，学习意味着估计\(P(Y=c_k)\)和\(P(X^{(j)}=x^{(j)} |Y=c_k)\)。可以应用极大似然估计法估计相应的概率。先验概率\(P(Y=c_k)\)的极大似然估计是:<br/>
<img src="media/14893694433396/14897383598198.jpg" alt=""/><br/>
设第j个特征\(x^{(j)}\)可能取值的几何为{\(a_{j1},a_{j2}....a_{jS_j}\)},条件概率\(P(X^{j}=a_{jl}|Y=c_k)\)的极大似然估计是：<br/>
<img src="media/14893694433396/14897397226736.jpg" alt=""/></p>

<h2 id="toc_5">学习与分类算法</h2>

<p>下面给出朴素贝叶斯的学习与分类方法。</p>

<p>算法(朴素贝叶斯算法)：<br/>
<img src="media/14893694433396/14897403452985.jpg" alt=""/></p>

<p>下面用一个例题来解释说明上述算法：<br/>
<img src="media/14893694433396/14897405687808.jpg" alt=""/><br/>
<img src="media/14893694433396/14897405876725.jpg" alt=""/></p>

<h2 id="toc_6">贝叶斯估计</h2>

<p>用极大似然估计可能会出现所要估计的概率值为0的情况。这时会影响到后验概率的计算结果，使分类产生偏差，解决这一问题的方法是采用贝叶斯估计。具 体地，条件概率的贝叶斯估计是：<br/>
<img src="media/14893694433396/14897409238342.jpg" alt=""/></p>

<p>这次再用上述例题来举例，如下所示：<br/>
<img src="media/14893694433396/14897415528528.jpg" alt=""/></p>

<blockquote>
<p><strong>总结：朴素贝叶斯法的学习与预测大为简化。因而朴素贝叶斯法高效，且易于实现。其缺点是分类的性能不一定很高。</strong></p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[k近邻法]]></title>
    <link href="https://lockxmonk.github.io/14891936534415.html"/>
    <updated>2017-03-11T08:54:13+08:00</updated>
    <id>https://lockxmonk.github.io/14891936534415.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">k近邻算法</a>
</li>
<li>
<a href="#toc_1">k近邻模型</a>
<ul>
<li>
<a href="#toc_2">模型</a>
</li>
<li>
<a href="#toc_3">距离度量</a>
</li>
<li>
<a href="#toc_4">k值的选择</a>
</li>
<li>
<a href="#toc_5">分类决策规则</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">k近邻法的实现：kd树</a>
<ul>
<li>
<a href="#toc_7">构造kd树</a>
</li>
<li>
<a href="#toc_8">搜索kd树</a>
</li>
</ul>
</li>
</ul>


<p>k近邻法（k-nearestneighbor,k-NN)是一种基本分类与回归方法。本书只讨论分类问题中的k近邻法。k近邻法的输入为实例的特征向量，对应于特征空间 的点；输出为实例的类别，可以取多类。k近邻法假设给定一个训练数据集，其中的实例类别己定。分类时，对新的实例，根据其k个最近邻的训练实例的类别， 通过多数表决等方式进行预测。因此，k近邻法不具有显式的学习过程。近邻法实际上利用训练数据集对特征向量空间进行划分，并作为其分类的“模型“，k值的选择、距离度量及分类决策规则是k近邻法的三个基本要素。k近邻法1968年由Cover和Hart提出。</p>

<h2 id="toc_0">k近邻算法</h2>

<p>k近邻算法简单、直观：给定一个训练数据集，对新的输入实例，在训练数据集中找到与该实例最邻近的k个实例，这k个实例的多数属于某个类，就把该输入实例分为这个类，下面叙述k邻近算法。<br/>
<img src="media/14891936534415/14891944741165.jpg" alt=""/><br/>
<img src="media/14891936534415/14891946432255.jpg" alt=""/></p>

<h2 id="toc_1">k近邻模型</h2>

<p>k近邻法使用的模型实际上对应于对特征空间的划分。模型由三个基本要素——距离度量、k值的选择和分类决策规则决定。</p>

<h3 id="toc_2">模型</h3>

<p>k近邻算法中，当训练集、距离度量（如欧氏距离）、k值及分类局侧规则（如多数表决）确定后，对于任何一个新的输入实例，它所属的类唯一地确定。这相当于根据上述要素将特征空间划分为一些子空间，确定子空间里的每个点所属的类。这一事实从最近邻算法中可以看得很清楚。</p>

<p>特征空间中，对每个训练实例点\(x_i\),距离该点比其他点更近的所有点组成一个区域，叫作单元（cell).每个训练实例点拥有一个单元，所有训练实例点的单元构成对特征空间的一个划分。最近邻法将实例\(x_i\)的类\(y_i\),作为其单元中所有点的类标记（class label)。这样，每个单元的实例点的类别是确定的。下图是二维特征空间划分的一个例子。<br/>
<img src="media/14891936534415/14891961608422.jpg" alt=""/></p>

<h3 id="toc_3">距离度量</h3>

<p>特征空间中两个实例点的距离是两个实例点相似程度的反映.k近邻模型的特征空间一般是n维实数向量空间\(R^n\)。使用的距离是欧氏距离，但也可以是其他距离，如更一般的\(L_p\)距离（\(L_p -distance\))或Minkowski距离（Minkowski distance)。<br/>
关于特征空间中两坐标点的距离定义为：<br/>
<img src="media/14891936534415/14891974598310.jpg" alt=""/></p>

<p>不同的距离定义，所求出的最近邻点是不同的。<br/>
<img src="media/14891936534415/14891979526147.jpg" alt=""/></p>

<h3 id="toc_4">k值的选择</h3>

<p>k值的选择会对k近邻法的结果产生重大影响。</p>

<p>如果选择较小的k值，就相当于用较小的邻域中的训练实例进行预测，“学习”的近似误差（approximation error)会减小，只有与输入实例较近的（相似的）训练实例才会对预测结果起作用。但缺点是“学习”的估计误差（estimation error) 会增大，预测结果会对近邻的实例点非常敏感。如果邻近的实例点恰巧是噪声，预测就会出错.换句话说，值的减小就意味着整体模型变得复杂，容易发生过拟合。</p>

<p>如果选择较大的k值，就相当于用较大邻域中的训练实例进行预测。其优点是可以减少学习的估计误差。但缺点是学习的近似误差会增大。这时与输入实例 较远的（不相似的）训练实例也会对预测起作用，使预测发生错误.k值的增大就意味着整体的模型变得简单。</p>

<p>如果k=N,那么无论输入实例是什么，都将简单地预测它属于在训练实例中最多的类。这时，模型过于简单，完全忽略训练实例中的大量有用信息，是不可取的。</p>

<p>在应用中，k值一般取一个比较小的数值。通常采用交叉验证法来选取最优的k值。</p>

<h3 id="toc_5">分类决策规则</h3>

<p>k近邻法中的分类决策规则往往是多数表决，即由输入实例的k个邻近的训练实例中的多数类决定输入实例的类。</p>

<p>多数表决规则（majority voting rule)有如下解释：如果分类的损失函数为0-1损失函数，分类函数为：<br/>
<img src="media/14891936534415/14891994327344.jpg" alt=""/></p>

<p>那么误分类的概率为：<br/>
<img src="media/14891936534415/14891994564311.jpg" alt=""/><br/>
对给定的实例\(x \in \chi\),其中最邻近的k个训练实例点构成集合\(N_k(x)\),如果涵盖\(N_k(x)\)的区域的类别是\(C_j\),那么误分类率是：<br/>
<img src="media/14891936534415/14891997004694.jpg" alt=""/><br/>
要使误分类率最小即经验风险最小，就要使\(\sum_{x_i\in{N_k(x)}}I(y_i=c_j)\)最大，<mark>所以多数表决规则等价于风险最小化</mark>。</p>

<h2 id="toc_6">k近邻法的实现：kd树</h2>

<p>实现k近邻法时，主要考虑的问题是如何对训练数据进行快速k近邻捜索。这点在特征空间的维数大及训练数据容量大时尤其必要。</p>

<p>k近邻法最简单的实现方法是线性扫描（linear  scan)。这时要计算输入实例与每一个训练实例的距离。当训练集很大时，计算非常耗时，这种方法是不可行的。</p>

<p>为了提高k近邻搜索的效率，可以考虑使用特殊的结构存储训练数据，以减少计算距离的次数。具体方法很多，下面介绍其中的kd树(kd tree)方法.</p>

<h3 id="toc_7">构造kd树</h3>

<p>kd树是一种对k维空间中的实例点进行存储以便对其进行快速检索的树形数据结构。kd树是二叉树，表示对k维空间的一个划分（partition)。构造kd树相 当于不断地用垂直于坐标轴的超平面将k维空间切分，构成一系列的k维超矩形区域。kd树的每个结点对应于一个k维超矩形区域。</p>

<p>构造kd树的方法如下：构造根结点，使根结点对应于k维空间中包含所有实例点的超矩形区域；通过下面的递归方法，不断地对k维空间进行切分，生成子结 点。在超矩形区域（结点）上选择一个坐标轴和在此坐标轴上的一个切分点，确定一个超平面，这个超平面通过选定的切分点并垂直于选定的坐标轴，将当前超矩形区域切分为左右两个子区域（子结点）：这时，实例被分到两个子区域.这个过程直到子区域内没有实例时终止（终止时的结点为叶结点）。在此过程中，将实例保存在相应的结点上。</p>

<p>通常，依次选择坐标轴对空间切分，选择训练实例点在选定坐标轴上的中位数（median)为切分点，这样得到的kd树是平衡的。<mark>注意，平衡的kd树搜索时的效率未必是最优的</mark>。<br/>
下面给出构造kd树的算法：<br/>
<img src="media/14891936534415/14892010553846.jpg" alt=""/><br/>
<img src="media/14891936534415/14892019093068.jpg" alt=""/></p>

<p>下面给出一个例子，来反应上述算法的用途：<br/>
<strong>（中位数：一组数据按大小顺序排列起来，处在中间位置的一个数或两个数的平均值。）</strong><br/>
<img src="media/14891936534415/14892021282433.jpg" alt=""/><br/>
<img src="media/14891936534415/14892121527765.jpg" alt=""/></p>

<h3 id="toc_8">搜索kd树</h3>

<p>下面介绍如何利用kd树进行k近邻搜索。可以看到，利用kd树可以省去对大部分数据点的搜索，从而减少搜索的计算量。这里以最近邻为例加以叙述，同样的方法可以应用到k近邻。</p>

<p>给定一个目标点，搜索其最近邻。首先找到包含目标点的叶结点：然后从该叶结点出发，依次回退到父结点；不断査找与目标点最邻近的结点，当确定不可能存在更近的结点时终止。这样搜索就被限制在空间的局部区域上，效率大为提髙。</p>

<p>包含目标点的叶结点对应包含目标点的最小超矩形区域。以此叶结点的实例点作为当前最近点。目标点的最近邻一定在以目标点为中心并通过当前最近点的 超球体的内部（参阅图3.5)。然后返回当前结点的父结点，如果父结点的另一子结点的超矩形区域与超球体相交，那么在相交的区域内寻找与目标点更近的实例点。如果存在这样的点，将此点作为新的当前最近点。算法转到更上一级的父结点，继续上述过程。如果父结点的另一子结点的超矩形区域与超球体不相交，或不存在比当前最近点更近的点，则停止搜索。<br/>
下面叙述用kd树的最近邻搜索算法：</p>

<pre><code>算法3.3 (用kd树的最近邻搜索）

输入：己构造的kd树；目标点X；
输出：x的最近邻。
(1) 在kd树中找出包含目标点x的叶结点：从根结点出发，递归地向下访问kd树。若目标点x当前维的坐标小于切分点的坐标，则移动到左子结点，否则移 动到右子结点。直到子结点为叶结点为止.
(2) 以此叶结点为”当前最近点“
(3) 递归地向上回退，在每个结点进行以下操作：
(a) 如果该结点保存的实例点比当前最近点距离目标点更近，则以该实例点为“当前最近点”
(b) 当前最近点一定存在于该结点一个子结点对应的区域。检查该子结点的父结点的另一子结点对应的区域是否有更近的点。具体地，检査另一子结点对应
的区域是否与以目标点为球心、以目标点与“当前最近点”间的距离为半径的超球体相交。
如果相交，可能在另一个子结点对应的区域内存在距目标点更近的点，移动到另一个子结点。接着，递归地进行最近邻搜索：
如果不相交，向上回退。
(4)当回退到根结点时，搜索结束。最后的“当前最近点”即为x的最近邻点。
    
如果实例点是随机分布的，kd树搜索的平均计算复杂度是O(logN)，这里N是训练实例数.kd树更适用于训练实例数远大于空间维数时的k近邻搜索。当空 间维数接近训练实例数时，它的效率会迅速下降，几乎接近线性扫描。
</code></pre>

<p>下面通过一个例题来说明搜索方法：</p>

<p><img src="media/14891936534415/14892141583109.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感知机算法的收敛性]]></title>
    <link href="https://lockxmonk.github.io/14891071598954.html"/>
    <updated>2017-03-10T08:52:39+08:00</updated>
    <id>https://lockxmonk.github.io/14891071598954.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">感知机学习算法的对偶形式</a>
</li>
</ul>


<p>算法的收敛性主要是证明，对于线性可分数据集感知机学习算法原始形式收敛，即经过有限 次迭代可以得到一个将训练数据集完全正确划分的分离超平面及感知机模型。</p>

<p>将偏置b并入权重向量w，记做\(\hat{w} = (w^T,b)^T\)同样也将输入向量加以扩充，加进常数1，记做：\(\hat{x} = (x^T,1)^T\),这样，\(\hat{x}\in R^{n+1}\)，\(\hat{w}\in R^{n+1}\) 显然，\(\hat{w}*\hat{x}=w*x+b\)。<br/>
<img src="media/14891071598954/14891094628135.jpg" alt=""/></p>

<p>上述定理主要说明误分类的次数<code>k</code>是有上界的，算法具有收敛性。</p>

<p>下面是该定理的证明过程：<br/>
<img src="media/14891071598954/14891100385544.jpg" alt=""/><br/>
<img src="media/14891071598954/14891100637572.jpg" alt=""/><br/>
<img src="media/14891071598954/14891105642852.jpg" alt=""/><br/>
<img src="media/14891071598954/14891105771778.jpg" alt=""/></p>

<blockquote>
<p>所以定理表明，误分类的次数<code>k</code>是有上界的，经过有限次搜索可以找到将训练数据完全正确分开的分离超平面。也就是说，当训练数据集线性可分时，感知机学习算法原始形式迭代是收敛的。但是感知机学习算法存在许多解，这些解既依赖于初值的选择，也依赖于迭代过程中误分类点的选择顺序。为了得到唯一的超平面，需要对分离超平面增加约束条件。这就是线性支持向量机的想法。当训练集线性不可分时，感知机学习算法不收敛，迭代结果 就会发生震荡。</p>
</blockquote>

<h2 id="toc_0">感知机学习算法的对偶形式</h2>

<p>现在考虑感知机学习算法的对偶形式。感知机学习算法的原始形式和对偶形式与支持向量机学习算法的原始形式和对偶形式相对应。</p>

<p>对偶形式的基本思想是，将w和b表示为实例\(x_{i}\)和标记\(y_i\)的线性组合形式，通过求解其系数而求得w和b。不失一般性,在算法2.1中可假设初始值\(w_0,b_0\)均为0，对误分类点\((x_i,y_i)\)通过：<br/>
\(w\leftarrow w+ηy_ix_i\)<br/>
\(b\leftarrow b+ηy_i\)<br/>
逐步修改w，b，设修改n次，则w,b关于\((x_i,y_i)\)的增量分别是\(α_ix_iy_i和α_iy_i\)这里\(α=n_iη\)。这样，从学习过程不难看出，最后学习到的w,b可以分别表示为：<img src="media/14891071598954/14891128523346.jpg" alt=""/><br/>
这里，\(\alpha_i\geq0,i=1,2,...N,当\eta=1时\)，表示第i个实例点由于误分而进行更新的次数。实例点更新次数越多，意味着它距离分离超平面越近，也就越难正确分类。换句话说，这样的实例对学习结果影响最大。</p>

<p>下面对照原始形式来叙述感知机学习算法的对偶形式。<br/>
<img src="media/14891071598954/14891134427824.jpg" alt=""/><br/>
<img src="media/14891071598954/14891134670827.jpg" alt=""/><br/>
对偶形式中训练实例仅以内积的形式出现。为了方便，可以预先将训练集中实例间的内积计算出来并以矩阵的形式存储，这个矩阵就是所谓的Gram矩阵。<br/>
\(G = [x_i * x_j]_{N*N}\)</p>

<p>同样根据该算法有例题如下：<br/>
<img src="media/14891071598954/14891137936409.jpg" alt=""/><br/>
<img src="media/14891071598954/14891170220533.jpg" alt=""/><br/>
对照例2.1，结果一致，迭代步骤也是互相对应的。<br/>
与原始形式一样，感知机学习算法的对偶形式迭代是收敛的。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[感知机]]></title>
    <link href="https://lockxmonk.github.io/14890437581129.html"/>
    <updated>2017-03-09T15:15:58+08:00</updated>
    <id>https://lockxmonk.github.io/14890437581129.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">感知机模型</a>
</li>
<li>
<a href="#toc_1">感知机的学习策略</a>
<ul>
<li>
<a href="#toc_2">数据集的线性可分性</a>
</li>
<li>
<a href="#toc_3">感知机学习策略</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">感知机学习算法</a>
<ul>
<li>
<a href="#toc_5">感知机学习算法的原始形式</a>
</li>
</ul>
</li>
</ul>


<p>感知机是二类分类的线性分类模型，其输入为实例的特征向量，输出为实例的类别（一般为+1和-1），感知机对应于输入空间（特征空间）中将实例划分为正负两类的分离超平面，属于判别模型。感知机学习旨在求出将训练数据进行线性划分的分离超平面。感知机也是神经网络与支持向量机的基础。</p>

<h2 id="toc_0">感知机模型</h2>

<p>感知机的定义为：<br/>
<img src="media/14890437581129/14890447646559.jpg" alt=""/></p>

<p>感知机有如下的几何解释：<br/>
线性方程：w*x + b = 0<br/>
对应于特征空间R中的一个超平面S，其中w是超平面的法向量，b是超平面的截距，这个超平面将特征空间划分为两个部分，位于两部分的点就被划分为正，负两类，如下图所示：<br/>
<img src="media/14890437581129/14890449623708.jpg" alt=""/></p>

<p>所以求感知机的模型，也就是去求得模型参数w，b。感知机预测，通过学习得到的感知机模型，对于新输入实例给出其对应的输出类别。</p>

<h2 id="toc_1">感知机的学习策略</h2>

<h3 id="toc_2">数据集的线性可分性</h3>

<p><img src="media/14890437581129/14890453486666.jpg" alt=""/></p>

<h3 id="toc_3">感知机学习策略</h3>

<p>如果训练数据集是线性可分的，那么我们需要确定一个学习策略，也就是定义（经验）损失函数并将损失函数极小化。</p>

<p>损失函数的一个自然选择是误分类点的总数。但是，这样的损失函数不是参数w,b的连续可导函数，不易优化。损失函数的另一个选择是误分类点到超平面S的总距离，这是感知机所采用的。为此，首先写出输入控件R中任一点x到平面S的距离：<img src="media/14890437581129/14890456220821.jpg" alt=""/><br/>
这里，||w||是w的2范数。<br/>
其次，对于五分类的数据（x，y）来说，<br/>
<code>-y(w*x+b)&gt;0</code>成立。因为当<code>w*x+b&gt;0</code>时，<code>y=-1</code>，而当<code>w*x+b&lt;0</code>时<code>y=+1</code>，因此，误分类点x到超平面S的距离是：<br/>
<img src="media/14890437581129/14890460147136.jpg" alt=""/><br/>
这样，假设超平面S的误分类点集合为M，那么所有的误分类点到超平面S的总距离为：<br/>
<img src="media/14890437581129/14890462066356.jpg" alt=""/></p>

<p>所以，感知机的损失函数定义为：<img src="media/14890437581129/14890462888502.jpg" alt=""/></p>

<p>显然，损失函数是非负的，如果没有误分类点，那么损失函数为0，而误分类点越少，误分类点离超平面越近，损失函数值越小。一个特定的样本点的损失函数：在误分类时是参数w，b的线性函数，在正确分类时是0，因此给定训练数据集T，损失函数是w，b的连续可导函数。<br/>
总的来说我们的感知机学习策略就是在假设空间中选取使损失函数式最小的模型参数w，b。</p>

<h2 id="toc_4">感知机学习算法</h2>

<p>我们的策略已经明确，就是求解损失函数式的最优化，我们这里最优化的方法是随机梯度下降法。</p>

<h3 id="toc_5">感知机学习算法的原始形式</h3>

<p>感知机学习算法是对以下最优化问题的算法，给定一个训练集：<img src="media/14890437581129/14890473616479.jpg" alt=""/><br/>
感知机学习算法是误分类驱动的，具体采用随机梯度下降法（stochastic gradient descent)。首先，任意选取一个超平面然后用梯度下降法不断地极小化目标函数<code>（2.5）</code>。极小化过程中不是一次使M中所有误分类点的梯度下降， 而是一次随机选取一个误分类点使其梯度下降。<br/>
假设误分类点集合M是固定的，那么损失函数的梯度由<img src="media/14890437581129/14890475151426.jpg" alt=""/><br/>
给出。<br/>
随机选取一个误分类点<code>(x,y)</code>，对w,b进行更新：<img src="media/14890437581129/14890475562013.jpg" alt=""/><br/>
式中η(0&lt;η≤1)是步长，在统计学习中又称为学习率，这样，通过迭代可以期待损失函数不断减小，直到为0，综上所述，得到如下算法：<img src="media/14890437581129/14890483224015.jpg" alt=""/><br/>
这种学习算法直观上有如下解释：当一个实例点被误分类，即位于分离超平面的错误一侧时，则调整w,b的值，使分离超平面向该误分类点的一侧移动，以减少该误分类点与超平面间的距离，直至超平面越过该误分类点使其被正确分类。</p>

<p>上述算法是感知机学习的基本算法，对应于后面的对偶形式，称为原始形式。感知机学习算法简单且易于实现。</p>

<p>该算法使用方法如下：<br/>
<img src="media/14890437581129/14890503525005.jpg" alt=""/><br/>
<img src="media/14890437581129/14890503748369.jpg" alt=""/><br/>
<img src="media/14890437581129/14890503942221.jpg" alt=""/><br/>
这是在计算中误分类点先后取<code>x1,x3,x3,x3,x1,x3,x3</code>得到的分离超平面和感 知机模型，如果在计算中误分类点依次取<code>x1,x3,x3,x3,x2,x3,x3,x3,x1,x3,x3</code>那么得到的分离超平面是2x<sup>1</sup>+x<sup>2</sup>-5=0</p>

<p>可见，感知机学习算法由于采用不同的初值或选取不同的误分类点，解可以不同。</p>

]]></content>
  </entry>
  
</feed>
