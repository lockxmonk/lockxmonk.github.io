<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LZH007]]></title>
  <link href="https://lockxmonk.github.io/atom.xml" rel="self"/>
  <link href="https://lockxmonk.github.io/"/>
  <updated>2017-10-21T16:10:07+08:00</updated>
  <id>https://lockxmonk.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[使用RAC的基本操作]]></title>
    <link href="https://lockxmonk.github.io/15083737124086.html"/>
    <updated>2017-10-19T08:41:52+08:00</updated>
    <id>https://lockxmonk.github.io/15083737124086.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">开始</a>
<ul>
<li>
<a href="#toc_1">类型转换</a>
</li>
<li>
<a href="#toc_2">创建有效的状态信号</a>
</li>
<li>
<a href="#toc_3">聚合信号</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">响应式的登录</a>
<ul>
<li>
<a href="#toc_5">创建信号</a>
</li>
<li>
<a href="#toc_6">添加附加操作（Adding side-effects）</a>
</li>
</ul>
</li>
</ul>


<p>作为一个iOS开发者，你写的每一行代码几乎都是在相应某个事件，例如按钮的点击，收到网络消息，属性的变化（通过KVO）或者用户位置的变化（通过CoreLocation）。但是这些事件都用不同的方式来处理，比如action、delegate、KVO、callback等。<code>ReactiveCocoa</code>为事件定义了一个标准接口，从而可以使用一些基本工具来更容易的连接、过滤和组合。</p>

<p>这里我们来创建一个简单的登录功能界面，当输入的<code>name</code>与<code>password</code>符合我们的预期就输出<code>success</code>。</p>

<h2 id="toc_0">开始</h2>

<p>首先我们创建一个工程起名为<code>FirstRAC</code>，并在里面创建<code>podfile</code>文件：</p>

<pre><code class="language-objc">source &#39;https://github.com/CocoaPods/Specs.git&#39;

platform :ios, ‘8.0’
use_frameworks!

target &#39;FirstRAC’ do

    pod &#39;Masonry&#39;
    pod &#39;ReactiveObjC&#39;, &#39;~&gt; 3.0.0&#39;

end
</code></pre>

<p>首先我们创建一个<code>button</code>，两个<code>Label</code>和<code>textField</code>如下图所示：<br/>
<img src="media/15083737124086/15083741205915.jpg" alt=""/></p>

<p>这里我们的界面布局使用<code>Masonry</code>来进行约束。</p>

<p>界面元素的属性声明为：</p>

<pre><code class="language-objc">@property(nonatomic,strong) UIView *login;
@property(nonatomic,strong) UILabel *nameLabel;
@property(nonatomic,strong) UILabel *passLabel;
@property(nonatomic,strong) UITextField *name;
@property(nonatomic,strong) UITextField *pass;
@property(nonatomic,strong) UIButton *sign;
</code></pre>

<p>元素的约束以及创建为：</p>

<pre><code class="language-objc">self.login = [[UIView alloc] initWithFrame:CGRectZero];
    
    _name = [[UITextField alloc] init];
    _name.borderStyle = UIFontWeightBold;
    _name.font = [UIFont systemFontOfSize:15];
    _name.placeholder = @&quot;Enter Name&quot;;
    [_login addSubview:_name];
    
    _pass = [[UITextField alloc] init];
    _pass.borderStyle = UIFontWeightBold;
    _pass.font = [UIFont systemFontOfSize:15];
    _pass.placeholder = @&quot;Enter Pass&quot;;
    [_login addSubview:_pass];
    
    _nameLabel = [[UILabel alloc] init];
    _nameLabel.backgroundColor = UIColor.whiteColor;
    _nameLabel.font = [UIFont systemFontOfSize:14.0];
    _nameLabel.lineBreakMode = NSLineBreakByTruncatingTail;
    _nameLabel.text = @&quot;Name&quot;;
    [_login addSubview:_nameLabel];
    
    _passLabel = [[UILabel alloc] init];
    _passLabel.backgroundColor = UIColor.whiteColor;
    _passLabel.font = [UIFont systemFontOfSize:14.0];
    _passLabel.lineBreakMode = NSLineBreakByTruncatingTail;
    _passLabel.text = @&quot;Pass&quot;;
    [_login addSubview:_passLabel];
    
    _sign = [UIButton buttonWithType:UIButtonTypeRoundedRect];
    _sign.layer.borderWidth = 3;
//    _sign.layer.borderColor = [UIColor blueColor].CGColor;
    _sign.titleLabel.textColor = [UIColor redColor];
//    _sign.backgroundColor = [UIColor greenColor];
    [_sign setTitle:@&quot;Sign&quot; forState:UIControlStateNormal];
    [_sign setTitle:@&quot;Push&quot; forState:UIControlStateHighlighted];
    [_sign setTitleColor:UIColor.blackColor forState:UIControlStateNormal];
    _sign.showsTouchWhenHighlighted = YES;
//    [_sign addTarget:self action:@selector(buttonClick:) forControlEvents:UIControlEventTouchUpInside];
    [_login addSubview:_sign];
    [self.view addSubview:_login];

    [_login mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.right.and.bottom.equalTo(self.view);
        make.top.equalTo(self.mas_topLayoutGuide).offset(@50);
    }];
    [_nameLabel mas_makeConstraints:^(MASConstraintMaker *make){
        make.top.equalTo(_login.top);
        make.height.equalTo(@20);
        make.left.equalTo(_login.left).with.offset(20);
    }];
    [_passLabel mas_makeConstraints:^(MASConstraintMaker *make){
        make.top.equalTo(_nameLabel.bottom).with.offset(10);
        make.centerX.equalTo(_nameLabel.centerX);
        make.height.equalTo(@20);
    }];
    [_name mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.equalTo(_nameLabel.right).with.offset(5);
        make.centerY.equalTo(_nameLabel.centerY);
        make.height.equalTo(@20);
    }];
    [_pass mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.equalTo(_passLabel.right).with.offset(5);
        make.centerY.equalTo(_passLabel.centerY);
        make.height.equalTo(@20);
    }];
    [_sign mas_makeConstraints:^(MASConstraintMaker *make){
        make.height.equalTo(@50);
        make.width.equalTo(@100);
        make.top.equalTo(_pass.bottom).offset(@50);
        make.centerX.equalTo(self.view.centerX);
    }];

</code></pre>

<p>之后我们运用<code>RAC</code>为界面的元素添加各种事件，首先我们可以简单的为<code>name</code>的<code>textField</code>来订阅事件：</p>

<pre><code class="language-objc">[[self.name.rac_textSignal
     filter:^BOOL(id value){
         NSString *text = value;
         return text.length&gt;3;
     }]
     subscribeNext:^(id x){
        NSLog(@&quot;%@&quot;,x);
    }];
</code></pre>

<p>该事件对输入的文本进行过滤，将输入文本的长度大于3的文本转化成信号，传递给下一个订阅事件；下一个订阅者输出文本内容。</p>

<p><font color=red>RACSignal有很多方法可以来订阅不同的事件类型。每个方法都需要至少一个block，当事件发生时就会执行block中的逻辑。在上面的例子中可以看到每次next事件发生时，<br/>
subscribeNext:方法提供的block都会执行。<br/><br/>
ReactiveCocoa框架使用category来为很多基本UIKit控件添加signal。这样你就能给控件添加订阅了，text field的<code>rac_textSignal</code>就是这么来的。</font></p>

<h3 id="toc_1">类型转换</h3>

<p>我们运行下面代码就会发现：</p>

<pre><code class="language-objc">[[[self.pass.rac_textSignal
       map:^id(NSString *text){
           return @(text.length);
       }]
      filter:^BOOL(NSNumber *length){
          return [length integerValue]&gt;3;
      }]
     subscribeNext:^(id x){
         NSLog(@&quot;%@&quot;,x);
     }];
</code></pre>

<p>编译运行，你会发现<code>log</code>输出变成了文本的长度而不是内容。这是因为：<font color=red>新加的map操作通过block改变了事件的数据。map从上一个next事件接收数据，通过执行block把返回值传给下一个next事件。在上面的代码中，map以NSString为输入，取字符串的长度，返回一个NSNumber。</font></p>

<p>如下图所示：<br/>
<img src="media/15083737124086/15083747539689.png" alt=""/></p>

<p>能看到<code>map</code>操作之后的步骤收到的都是<code>NSNumber</code>实例。你可以使用<code>map</code>操作来把接收的数据转换成想要的类型，只要它是个对象。</p>

<h3 id="toc_2">创建有效的状态信号</h3>

<p>首先我们创建两个信号;</p>

<pre><code class="language-objc">RACSignal *validUsernameSignal =[self.name.rac_textSignal
                                     map:^id(NSString *text){
                                         return @([self isValidUsername:text]);
                                     }];
RACSignal *validPasswordSignal = [self.pass.rac_textSignal
                                      map:^id(NSString *text){
                                          return @([self isValidPassword:text]);
                                      }];

- (BOOL)isValidUsername:(NSString *)username {
    return username.length &gt; 3;
}

- (BOOL)isValidPassword:(NSString *)password {
    return password.length &gt; 3;
}
</code></pre>

<p>可以看到，上面的代码对每个输入框的<code>rac_textSignal</code>应用了一个map转换。输出是一个用<code>NSNumber</code>封装的布尔值。</p>

<p>下一步是转换这些信号，从而能为输入框设置不同的背景颜色。基本上就是，你订阅这些信号，然后用接收到的值来更新输入框的背景颜色。下面有一种方法很方便：</p>

<pre><code class="language-objc">    RAC(self.name , backgroundColor) = [validUsernameSignal
                                        map:^id(NSNumber *nameValid){
                                            return [nameValid boolValue] ? [UIColor clearColor]:[UIColor yellowColor];
                                        }];
    RAC(self.pass , backgroundColor) = [validPasswordSignal
                                        map:^id(NSNumber *nameValid){
                                            return [nameValid boolValue] ? [UIColor clearColor]:[UIColor yellowColor];
                                        }];
</code></pre>

<p><strong><font color=red>RAC宏允许直接把信号的输出应用到对象的属性上。RAC宏有两个参数，第一个是需要设置属性值的对象，第二个是属性名。每次信号产生一个next事件，传递过来的值都会应用到该属性上。</font></strong></p>

<p><img src="media/15083737124086/15083750523260.png" alt=""/></p>

<h3 id="toc_3">聚合信号</h3>

<p>目前在应用中，登录按钮只有当用户名和密码输入框的输入都有效时才工作。现在要把这里改成响应式的。</p>

<p>现在的代码中已经有可以产生用户名和密码输入框是否有效的信号了——<code>validUsernameSignal</code>和<code>validPasswordSignal</code>了。现在需要做的就是聚合这两个信号来决定登录按钮是否可用。</p>

<p>把下面的代码添加到<code>viewDidLoad</code>的末尾：</p>

<pre><code class="language-objc">RACSignal *signUpActiveSignal = [RACSignal combineLatest:@[validUsernameSignal,validPasswordSignal] reduce:^id(NSNumber *usernameValid, NSNumber *passwordValid){
        return @([usernameValid boolValue]&amp;&amp;[passwordValid boolValue]);
    }];
</code></pre>

<p><strong><font color=red>上面的代码使用combineLatest:reduce:方法把validUsernameSignal和validPasswordSignal产生的最新的值聚合在一起，并生成一个新的信号。每次这两个源信号的任何一个产生新值时，reduce block都会执行，block的返回值会发给下一个信号。</font></strong></p>

<p><em>注意：RACsignal的这个方法可以聚合任意数量的信号，reduce block的参数和每个源信号相关。ReactiveCocoa有一个工具类RACBlockTrampoline，它在内部处理reduce block的可变参数。实际上在ReactiveCocoa的实现中有很多隐藏的技巧，值得你去看看。</em></p>

<p>现在我们的逻辑变为：<img src="media/15083737124086/15083753306027.png" alt=""/></p>

<p>上图展示了一些重要的概念，你可以使用<code>ReactiveCocoa</code>来完成一些重量级的任务。   </p>

<ul>
<li><p>分割——信号可以有很多<code>subscriber</code>，也就是作为很多后续步骤的源。注意上图中那个用来表示用户名和密码有效性的布尔信号，它被分割成多个，用于不同的地方。</p></li>
<li><p>聚合——多个信号可以聚合成一个新的信号，在上面的例子中，两个布尔信号聚合成了一个。实际上你可以聚合并产生任何类型的信号。</p></li>
</ul>

<p><strong><mark>这些改动的结果就是，代码中没有用来表示两个输入框有效状态的私有属性了。这就是用响应式编程的一个关键区别，你不需要使用实例变量来追踪瞬时状态。</mark></strong></p>

<h2 id="toc_4">响应式的登录</h2>

<p>应用目前使用上面图中展示的响应式管道来管理输入框和按钮的状态。但是按钮按下的处理用的还是<code>action</code>，所以下一步就是把剩下的逻辑都替换成响应式的。</p>

<p>你已经知道了<code>ReactiveCocoa</code>框架是如何给基本<code>UIKit</code>控件添加属性和方法的了。目前你已经使用了<code>rac_textSignal</code>，它会在文本发生变化时产生信号。为了处理按钮的事件，现在需要用到<code>ReactiveCocoa</code>为<code>UIKit</code>添加的另一个方法，<mark><code>rac_signalForControlEvents</code></mark>。</p>

<p>现在回到<code>ViewController.m</code>中，把下面的代码添加到<code>viewDidLoad</code>的末尾：</p>

<pre><code class="language-objc">[[self.signInButton
   rac_signalForControlEvents:UIControlEventTouchUpInside]
   subscribeNext:^(id x) {
     NSLog(@&quot;button clicked&quot;);
   }];
</code></pre>

<p>上面的代码从按钮的<code>UIControlEventTouchUpInside</code>事件创建了一个信号，然后添加了一个订阅，在每次事件发生时都会输出<code>log</code>。<br/>
你就会发现每次点击按钮后，就会响应输出事件，输出<code>button clicked</code>。</p>

<p>现在按钮有了点击事件的信号，下一步就是把它和登录流程连接起来。。那么问题就来了，打开<code>RWSignInService.h</code>，看一下接口：</p>

<pre><code class="language-objc">//RWSignInService.h
#import &lt;Foundation/Foundation.h&gt;

typedef void (^RWSignInResponse)(BOOL);

@interface RWSignInService : NSObject
- (void)signInWithUsername:(NSString *)username
                 password:(NSString *)password
                 complete:(RWSignInResponse)completeBlock;
@end

//RWSignInService.m
#import &quot;RWSignInService.h&quot;

@implementation RWSignInService

- (void)signInWithUsername:(NSString *)username password:(NSString *)password complete:(RWSignInResponse)completeBlock {
    
    [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:YES];
    double delayInSeconds = 2.0;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * NSEC_PER_SEC));
    dispatch_after(popTime, dispatch_get_main_queue(), ^(void){
        [[UIApplication sharedApplication] setNetworkActivityIndicatorVisible:NO];
        BOOL success = [username isEqualToString:@&quot;user&quot;] &amp;&amp; [password isEqualToString:@&quot;password&quot;];
        completeBlock(success);
    });
}

@end
</code></pre>

<p>这个<code>service</code>有3个参数，用户名、密码和一个完成回调<code>block</code>。这个<code>block</code>会在登录成功或失败时执行。你可以在按钮点击事件的<code>subscribeNext: blcok</code>里直接调用这个方法。</p>

<p><em>注意：本教程为了简便使用了一个假的service，所以它不依赖任何外部API。但你现在的确遇到了一个问题，如何使用这些不是用信号表示的API呢？</em></p>

<h3 id="toc_5">创建信号</h3>

<p><mark>幸运的是，把已有的异步API用信号的方式来表示相当简单。</mark>，还是在<code>ViewController.m</code>中，添加下面的方法：</p>

<pre><code class="language-objc">-(RACSignal *)signInSignal{
    return [RACSignal createSignal:^RACDisposable *(id subscriber){
        [self.signInService signInWithUsername:self.name.text password:self.pass.text complete:^(BOOL success){
            [subscriber sendNext:@(success)];
            [subscriber sendCompleted];
        }];
        return nil;
    }];
}
</code></pre>

<p>上面的方法创建了一个信号，使用用户名和密码登录。现在分解来看一下。</p>

<p>上面的代码使用<code>RACSignal</code>的<code>createSignal:</code>方法来创建信号。方法的入参是一个<code>block</code>，这个<code>block</code>描述了这个信号。当这个信号有<code>subscriber</code>时，<code>block</code>里的代码就会执行。</p>

<p><code>block</code>的入参是一个<code>subscriber</code>实例，它遵循<code>RACSubscriber</code>协议，协议里有一些方法来产生事件，你可以发送任意数量的<code>next</code>事件，或者用<code>error\complete</code>事件来终止。本例中，信号发送了一个<code>next</code>事件来表示登录是否成功，随后是一个<code>complete</code>事件。</p>

<p>这个<code>block</code>的返回值是一个<code>RACDisposable</code>对象，它允许你在一个订阅被取消时执行一些清理工作。当前的信号不需要执行清理操作，所以返回<code>nil</code>就可以了。</p>

<p>可以看到，把一个异步<code>API</code>用信号封装是多简单！</p>

<p>现在就来使用这个新的信号。把之前添加在<code>viewDidLoad</code>中的代码更新成下面这样的：</p>

<pre><code class="language-objc">[[[self.signInButton
   rac_signalForControlEvents:UIControlEventTouchUpInside]
   map:^id(id x){
     return[self signInSignal];
   }]
   subscribeNext:^(id x){
     NSLog(@&quot;Sign in result: %@&quot;, x);
   }];

</code></pre>

<p>上面的代码使用<code>map</code>方法，把按钮点击信号转换成了登录信号。<code>subscriber</code>输出<code>log</code>.</p>

<p>编译运行，点击登录按钮，查看<code>Xcode</code>的控制台后发现输出的是一个信号实例，没错，你已经给<code>subscribeNext:</code>的<code>block</code>传入了一个信号，但传入的不是登录结果的信号。<br/>
<img src="media/15083737124086/15083764662317.png" alt=""/></p>

<p>当点击按钮时，<code>rac_signalForControlEvents</code>发送了一个<code>next</code>事件（事件的data是UIButton）。<code>map</code>操作创建并返回了登录信号，这意味着后续步骤都会收到一个<code>RACSignal</code>。这就是你在<code>subscribeNext:</code>这步看到的。</p>

<p>上面问题的解决方法，有时候叫做信号中的信号，换句话说就是一个外部信号里面还有一个内部信号。你可以在外部信号的<code>subscribeNext:block</code>里订阅内部信号。不过这样嵌套太混乱啦，还好<code>ReactiveCocoa</code>已经解决了这个问题。</p>

<p>解决的方法很简单，只需要把<code>map</code>操作改成<code>flattenMap</code>就可以了：</p>

<pre><code class="language-objc">[[[self.signInButton
   rac_signalForControlEvents:UIControlEventTouchUpInside]
   flattenMap:^id(id x){
     return[self signInSignal];
   }]
   subscribeNext:^(id x){
     NSLog(@&quot;Sign in result: %@&quot;, x);
   }];
</code></pre>

<p>这个操作把按钮点击事件转换为登录信号，同时还从内部信号发送事件到外部信号。</p>

<p>到这里我们的大部分内容就结束了。最后就是在<code>subscribeNext</code>步骤里添加登录成功后的逻辑。把代码更新成下面的：</p>

<pre><code class="language-objc">[[[self.sign rac_signalForControlEvents:UIControlEventTouchUpInside]
     flattenMap:^id(id x){
         return [self signInSignal];
     }]
     subscribeNext:^(NSNumber*signedIn){
         BOOL success =[signedIn boolValue];
         if(success){
             NSLog(@&quot;Success!!!&quot;);
         }
     }];
</code></pre>

<p>但是，你注意到这个应用现在有一些用户体验上的小问题了吗？当登录service正在校验用户名和密码时，登录按钮应该是不可点击的。这会防止用户多次执行登录操作。</p>

<p>这个逻辑应该怎么添加呢？改变按钮的可用状态并不是转换（map）、过滤（filter）或者其他已经学过的概念。其实这个就叫做“副作用”，换句话说就是在一个<code>next</code>事件发生时执行的逻辑，而该逻辑并不改变事件本身。</p>

<h3 id="toc_6">添加附加操作（Adding side-effects）</h3>

<p>把代码更新成下面的：</p>

<pre><code class="language-objc">[[[[self.sign rac_signalForControlEvents:UIControlEventTouchUpInside]
       doNext:^(id x){
           self.sign.enabled = NO;
       }]
     flattenMap:^id(id x){
         return [self signInSignal];
     }]
     subscribeNext:^(NSNumber*signedIn){
         BOOL success =[signedIn boolValue];
         if(success){
             NSLog(@&quot;Success!!!&quot;);
         }
     }];
</code></pre>

<p>你可以看到<code>doNext:</code>是直接跟在按钮点击事件的后面。而且<code>doNext: block</code>并没有返回值。因为它是附加操作，并不改变事件本身。</p>

<p>上面的<code>doNext: block</code>把按钮置为不可点击，隐藏登录失败提示。然后在<code>subscribeNext: block</code>里重新把按钮置为可点击，并根据登录结果来决定是否显示失败提示。</p>

<p>之前的管道图就更新成下面这样的：<br/>
<img src="media/15083737124086/15083777066162.png" alt=""/></p>

<p>现在所有的工作都已经完成了，这个应用已经是响应式的啦!!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Masonry框架来构造iOS布局]]></title>
    <link href="https://lockxmonk.github.io/15082871830637.html"/>
    <updated>2017-10-18T08:39:43+08:00</updated>
    <id>https://lockxmonk.github.io/15082871830637.html</id>
    <content type="html"><![CDATA[
<p>之前一直都是在使用<code>storyboards</code>来创建iOS布局，突然某一天看到使用代码布局后，界面元素的清晰易懂，就迷上了。。。</p>

<p>所以这次简单学习一下使用<code>Masonry</code>帮助构建<code>iOS</code>界面元素。</p>

<p>在阅读了<code>Masonry</code>的<a href="https://github.com/SnapKit/Masonry">github</a>主页之后，学习并安装了框架。</p>

<h2 id="toc_0">框架的安装</h2>

<p>安装框架非常简单，我们只需要在<code>podfile</code>中加上下面一句：</p>

<pre><code class="language-objc">pod &#39;Masonry&#39;
</code></pre>

<p>之后为了语法的缩写以及代码自动补全我们来创建<code>Code Snippets</code></p>

<pre><code class="language-objc">mas_make -&gt; [&lt;#view#&gt; mas_makeConstraints:^(MASConstraintMaker *make) { &lt;#code#&gt; }];

mas_update -&gt; [&lt;#view#&gt; mas_updateConstraints:^(MASConstraintMaker *make) { &lt;#code#&gt; }];

mas_remake -&gt; [&lt;#view#&gt; mas_remakeConstraints:^(MASConstraintMaker *make) { &lt;#code#&gt; }];
</code></pre>

<p>将上述语句放到<code>~/Library/Developer/Xcode/UserData/CodeSnippets</code>中，之后我们在写相关代码的时候就会有代码提示了。</p>

<p>我们在要使用<code>Masonry</code>的文件要频繁的导入<code>&quot;Masonry.h&quot;</code>头文件，所以为了方便，我们创建一个<code>Supporting Files</code>文件夹，并在其中创建一个<code>prefix.pch</code>文件。文件内容为：</p>

<pre><code class="language-objc">//
//  MBMasonry-Prefix.pch

#import &lt;Availability.h&gt;

// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.

#ifndef __IPHONE_3_0
#warning &quot;This project uses features only available in iOS SDK 3.0 and later.&quot;
#endif

#ifdef __OBJC__
#import &lt;UIKit/UIKit.h&gt;
#import &lt;Foundation/Foundation.h&gt;
#import &lt;QuartzCore/QuartzCore.h&gt;

//define this constant if you want to use Masonry without the &#39;mas_&#39; prefix
// 只要添加了这个宏，就不用带mas_前缀
#define MAS_SHORTHAND

//define this constant if you want to enable auto-boxing for default syntax
// 只要添加了这个宏，equalTo就等价于mas_equalTo
#define MAS_SHORTHAND_GLOBALS
//在这里导入头文件。
#import &quot;Masonry.h&quot;

#endif /* MBMasonry_Prefix_pch */

</code></pre>

<p>之后我们在使用的时候，就不用每个文件都导入一遍头文件了。</p>

<h2 id="toc_1">使用方法</h2>

<p>原声的iOS代码，对界面布局使用的是<code>NSLayoutAttribute</code>，用了<code>Masonry</code>后，我们使用封装好的<code>MASViewAttribute</code>。具体的属性等价关系如下图所示：<br/>
<img src="media/15082871830637/15082883366505.jpg" alt=""/></p>

<p>我们来举例说明一下，假入我们想要创建一个登陆界面。界面中要有<code>Name</code>和<code>Pass</code>两个<code>TextField</code>，并对应两个<code>Label</code>。</p>

<p>那么我们可以按照如下方式来写：</p>

<pre><code class="language-objc">//
//  ViewController.m
//  FirstRAC
//
//  Created by 梁中豪 on 2017/10/17.
//  Copyright © 2017年 梁中豪. All rights reserved.
//

#import &quot;ViewController.h&quot;

@interface ViewController ()
@property(nonatomic,strong) UIView *login;
@property(nonatomic,strong) UILabel *nameLabel;
@property(nonatomic,strong) UILabel *passLabel;
@property(nonatomic,strong) UITextField *name;
@property(nonatomic,strong) UITextField *pass;


@end

@implementation ViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    self.login = [[UIView alloc] initWithFrame:CGRectZero];
    
    _name = [[UITextField alloc] init];
    _name.borderStyle = UIFontWeightBold;
    _name.font = [UIFont systemFontOfSize:15];
    _name.placeholder = @&quot;Enter Name&quot;;
    [_login addSubview:_name];
    
    _pass = [[UITextField alloc] init];
    _pass.borderStyle = UIFontWeightBold;
    _pass.font = [UIFont systemFontOfSize:15];
    _pass.placeholder = @&quot;Enter Pass&quot;;
    [_login addSubview:_pass];
    
    _nameLabel = [[UILabel alloc] init];
    _nameLabel.backgroundColor = UIColor.whiteColor;
    _nameLabel.font = [UIFont systemFontOfSize:14.0];
    _nameLabel.lineBreakMode = NSLineBreakByTruncatingTail;
    _nameLabel.text = @&quot;Name&quot;;
    [_login addSubview:_nameLabel];
    
    _passLabel = [[UILabel alloc] init];
    _passLabel.backgroundColor = UIColor.whiteColor;
    _passLabel.font = [UIFont systemFontOfSize:14.0];
    _passLabel.lineBreakMode = NSLineBreakByTruncatingTail;
    _passLabel.text = @&quot;Pass&quot;;
    [_login addSubview:_passLabel];
    [self.view addSubview:_login];
    [self buildElem];
}

//为所创建的控件，创建约束
- (void)buildElem{
    [_login mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.right.and.bottom.equalTo(self.view);
        make.top.equalTo(self.mas_topLayoutGuide);
    }];
    [_nameLabel mas_makeConstraints:^(MASConstraintMaker *make){
        make.top.equalTo(_login.top);
        make.height.equalTo(@20);
        make.left.equalTo(_login.left).with.offset(20);
    }];
    [_passLabel mas_makeConstraints:^(MASConstraintMaker *make){
        make.top.equalTo(_nameLabel.bottom).with.offset(10);
        make.centerX.equalTo(_nameLabel.centerX);
        make.height.equalTo(@20);
    }];
    [_name mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.equalTo(_nameLabel.right).with.offset(5);
        make.centerY.equalTo(_nameLabel.centerY);
        make.height.equalTo(@20);
    }];
    [_pass mas_makeConstraints:^(MASConstraintMaker *make){
        make.left.equalTo(_passLabel.right).with.offset(5);
        make.centerY.equalTo(_passLabel.centerY);
        make.height.equalTo(@20);
    }];

}


- (void)didReceiveMemoryWarning {
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

@end

</code></pre>

<p>从上面可以看到，我们为元素创建了约束。当然这只是基本的方法。还有更多的<code>API</code>接口可以使用。我们这里就不在过多说明了。</p>

<p>大概知道上面的用法，我们就可以开心的撸代码写界面去了。<br/>
:smile:smile:smile:smile:smile:smile:smile:</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReactiveCocoa初步了解]]></title>
    <link href="https://lockxmonk.github.io/15082052235459.html"/>
    <updated>2017-10-17T09:53:43+08:00</updated>
    <id>https://lockxmonk.github.io/15082052235459.html</id>
    <content type="html"><![CDATA[
<p><code>ReactiveObjC</code>是一个受到函数响应式编程启发而开发的OC框架，对应的<code>Swift</code>框架叫做<code>ReactiveCocoa or ReactiveSwift</code>。简称为<code>RAC</code>。</p>

<p>不同于使用那些被替代和修改的可编辑变量，RAC提供了一个<code>signals (represented by RACSignal)</code>用于捕获当前或者未来的值。这种做法工作起来类似于<code>KVO</code>，但是却没有那么繁琐。</p>

<p><font color=red><strong>RAC的一大优势就是提供了一个统一的方法去解决异步表现，这些表现包括：委托方法，回调函数块，target-action机制，通知和KVO。</strong></font></p>

<p>有如下例子：</p>

<pre><code class="language-objc">//当self.name改变后，输出新的名字到控制台
//
//无论何时改变了值，RACObserve(self, username)都会创造了一个新的RACSignal用于发送当前self.name
// 不管在什么时候signal发送了一个新的值，-subscribeNext: 都将执行块方法.
[RACObserve(self, username) subscribeNext:^(NSString *newName) {
    NSLog(@&quot;%@&quot;, newName);
}];
</code></pre>

<p>但是不想KVO通知，signals是可以被链接和操作的：</p>

<pre><code class="language-objc">// 只输出以&quot;j&quot;开头的名字.
//
// -filter returns a new RACSignal that only sends a new value when its block
// returns YES.
[[RACObserve(self, username)
    filter:^(NSString *newName) {
        return [newName hasPrefix:@&quot;j&quot;];
    }]
    subscribeNext:^(NSString *newName) {
        NSLog(@&quot;%@&quot;, newName);
    }];
</code></pre>

<p>其实上面代码也可以复杂的写成：</p>

<pre><code class="language-objc">RACSignal *usernameSourceSignal = self.username;
  
RACSignal *filteredUsername =[usernameSourceSignal
  filter:^(NSString *newName) {
        return [newName hasPrefix:@&quot;j&quot;];
    }];
  
[filteredUsername subscribeNext:^(NSString *newName) {
        NSLog(@&quot;%@&quot;, newName);
    }];
</code></pre>

<p>这是因为<code>RACSignal</code>的每个操作都会返回一个<code>RACsignal</code>，这在术语上叫做<code>连贯接口（fluent interface）</code>。这个功能可以让你直接构建管道，而不用每一步都使用本地变量。</p>

<p><code>Signals</code>也可以被使用去获取状态。区别于观察属性和设置其他属性来反应新的值，<code>RAC</code>可以按照信号和操作来表达属性：</p>

<pre><code class="language-objc">// Creates a one-way binding so that self.createEnabled will be
// true whenever self.password and self.passwordConfirmation
// are equal.
//
// RAC() is a macro that makes the binding look nicer.
//
// +combineLatest:reduce: takes an array of signals, executes the block with the
// latest value from each signal whenever any of them changes, and returns a new
// RACSignal that sends the return value of that block as values.
RAC(self, createEnabled) = [RACSignal
    combineLatest:@[ RACObserve(self, password), RACObserve(self, passwordConfirmation) ]
    reduce:^(NSString *password, NSString *passwordConfirm) {
        return @([passwordConfirm isEqualToString:password]);
    }];
</code></pre>

<p>还有许多用法这就不举例了，详细用例可以查看<a href="https://github.com/ReactiveCocoa/ReactiveObjC#introduction">官方文档</a></p>

<h2 id="toc_0">使用时机</h2>

<p>刚开始，可能很难理解<code>RAC</code>,因为这个<code>ReactiveObjC</code>很抽象，很难了解什么时机应该使用它，怎样去解决问题。这里有几个推荐的使用时机：</p>

<ul>
<li>解决异步或者时间驱动的数据源</li>
<li>链接依赖操作（尤其在网络处理方面）</li>
<li>并行独立的工作</li>
<li>简化集合的转变</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多用块枚举，与快速遍历少用for循环]]></title>
    <link href="https://lockxmonk.github.io/15077122789332.html"/>
    <updated>2017-10-11T16:57:58+08:00</updated>
    <id>https://lockxmonk.github.io/15077122789332.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">快速遍历</a>
</li>
<li>
<a href="#toc_1">基于块的遍历</a>
</li>
<li>
<a href="#toc_2">要点</a>
</li>
</ul>


<p>我们在编程时，经常会需要遍历某个<code>collection</code>，例如<code>NSArrary，NSDictionary，NSSet</code>等。</p>

<p>我们经常使用<code>for</code>循坏来遍历，这样对于数组来说还好，但是根据定义，字典与<code>set</code>都是<code>“无序的&quot;（imoniered)</code>，<em><mark>所以无法根据特定的整数下标来直接访问其中的值</mark></em>。于是，就需要先获取字典里的所有键或是<code>set</code>里的所有对象，这两种情况下，都可以在获取到的有序数组上遍历，以便借此访问原字典及原<code>set</code>中的值。</p>

<p>但是创建这个附加数组会有额外开销，而且还会多创建一个数组对象，它会保留<code>collection</code>中的所有元素对象。 当然了，释放数组时这些附加对象也要释放，可是要调用本来不需执行的方法。其他各种遍 历方式都无须创建这种中介数组。</p>

<p>例如：</p>

<pre><code class="language-objc">// Dictionary
NSDictionary *aDictionary = /* .... */;
NSArray *keys = [aDictionary allKeys]; 
for (int i = 0; i &lt; keys.count; i++) { 
    id key = keys[i]; 
    id value = aDictionary[key];
    //Do something with &#39;key&#39; and &#39;value&#39;
}

//Set
NSSet *aSet = /* ... */;
NSArray *objects = [aSet allObjects]; 
for (int i = 0; i &lt; objects.count; i++)
{ 
    id object = objects [i];
    //Do something with &#39;object&#39;
} 
</code></pre>

<p>上述代码实现遍历比较麻烦，所以我们推荐使用快速遍历与块循环。</p>

<h2 id="toc_0">快速遍历</h2>

<p>快速遍历是<code>OC 2.0</code>所引入的一个新功能。它语法更简洁，它为<code>for</code>循环开设了<code>in</code>关键字。这个关键字大幅简化了遍历<code>collection</code>所需的语法，比方说要遍历数组，就可以这么写：</p>

<pre><code class="language-objc">NSArray *anArray = /* ••• */; 
for (id object in anArray) {
    //Do something with &#39;object&#39;
}
</code></pre>

<p>这样写简单多了。如果某个类的对象支持快速遍历，那么就可以宣称自己遵从名为 <code>NSFastEmimeraticm</code>的协议，从而令开发者可以采用此语法来迭代该对象。</p>

<p>遍历字典与set为：</p>

<pre><code class="language-objc">// Dictionary
NSDictionary *aDictionary = /* ... */; 
for (id key in aDictionary) {
    id value = aDictionary[key];
    //Do something with &#39;key&#39; and &#39;value&#39;
}

//Set
NSSet *aSet = /* ... */; 
for (id object in aSet) {
    //Do something with &#39;object&#39;
}
</code></pre>

<p>由于<code>NSEnumerator</code>对象也实现了 <code>NSFastEnumeration</code>协议，所以能用来执行反向遍历。 若要反向遍历数组，可采用下面这种写法：</p>

<pre><code class="language-objc">NSArray *anArray = /* ... */;
for (id object in [anArray reverseObjectEnumerator]){
    //Do something with &#39;object&#39;
}
</code></pre>

<p><strong><font color=red>在目前所介绍的遍历方式中，这种办法是语法最简单且效率最髙的，然而如果在遍历字典时需要同时获取键与值，那么会多出来一步。而且，与传统的<code>for</code>循环不同，这种遍历方式无法轻松获取当前遍历操作所针对的下标。遍历时通常会用到这个下标，比如很多算法都需要它。</font></strong></p>

<h2 id="toc_1">基于块的遍历</h2>

<p>在当前的<code>Objective-C</code>语言中，最新引人的一种做法就是基于块来遍历。<code>NSArray</code>中定义了下面这个方法，它可以实现最基本的遍历功能：</p>

<pre><code class="language-objc">-(void)enumerateObjectsUsingBlock:
        (void(^)(id object, NSUInteger idx, BOOL *stop))block
</code></pre>

<p>此之外，还有一系列类似的遍历方法，它们可以接受各种选项，以控制遍历操作，稍后将会讨论那些方法。</p>

<p>在遍历数组及<code>set</code>时，每次迭代都要执行由<code>block</code>参数所传人的块，<strong><font color=red>在遍历数组及set时，每次迭代都要执行由block参数所传人的块，这个块有三个参数， 分别是当前迭代所针对的对象、所针对的下标，以及指向布尔值的指针。前两个参数的含义不言而喻。而通过第三个参数所提供的机制，开发者可以终止遍历操作。</font></strong> </p>

<p>例如，下面这段代码用此方法来遍历数组：</p>

<pre><code class="language-objc">NSArray *anArray = /* ... */;
[anArray enumerateObjectsUsingBlock:
        ^(id object, NSUInteger id, BOOL *stop){
    //Do something with &#39;object&#39; 
    if (shouldStop) {
        *stop = YES;
}
</code></pre>

<p>这种写法稍微多了几行代码，不过依然明晰，而且遍历时既能获取对象，也能知道其下标。此方法还提供了一种优雅的机制，用于终止遍历操作，开发者可以通过设定<code>stop</code>变最值来实现，当然，使用<code>for</code>等遍历方式时，也可以通过<code>break</code>来终止循环，那样做也很好。</p>

<p>此方式不仅可用来遍历数组。<code>NSSet</code>里面也有同样的块枚举方法，<code>NSDictionary</code>也是这样, 只是略有不同：</p>

<pre><code class="language-objc">-(void)enumerateKeysAndObjectsUsingBlock:
        (void(^)(id key, id object, BOOL *stop))block
</code></pre>

<p>因此，遍历字典与<code>set</code>也同样简单：</p>

<pre><code class="language-objc">// Dictionary
NSDictionary *aDictionary = /* ... */;
[aDietionary enumerateKeysAndObjectsUsingBlock: 
        ^(id key, id object, BOOL *stop)){
            //Do something with &#39;key&#39; and &#39;object&#39; 
            if (shouldStop) {
            *stop = YES;
}；

//Set
NSSet *aSet = /* ... */;
[aSet enumerateObjectsUsingBlock:
            ^(id object, BOOL *stop){
    //Do something with &#39;object&#39; 
        if (shouldStop) {
            *stop = YES;
        }
  }];
</code></pre>

<p>此方式大大胜过其他方式的地方在于：<mark>遍历时可以直接从块里获取更多信息。在遍历数组时，可以知道当前所针对的下标。遍历<code>有序set(NSOrderedSet)</code>时也一样。而在遍历字典时，无须额外编码，即可同时获取键与值，因而省去了根据给定键来获取对应值这一步。用这种方式遍历字典，可以同时得知键与值，这很可能比其他方式快很多，因为在字典内部的数据结构中，键与值本来就是存储在一起的。</mark></p>

<p><strong><font color=red>另一个好处就是：能够修改块的方法签名，以免进行类型转换操作，从效果上讲，相当于把本来需要执行的类型转换操作交给块方法签名来做。</font></strong></p>

<p>比方说，要用“快速遍历法”来遍 历字典。若已知字典中的对象必为字符串，则可以这样编码：</p>

<pre><code class="language-objc">for (NSString *key in aDictionary) {
    NSString *object = (NSString*)aDictionary[key];
    //Do something with 1 key1 and 1 object1
)
</code></pre>

<p>如果改用基于块的方式来遍历，那么就可以在块方法签名中直接转换：</p>

<pre><code class="language-objc">NSDictionary ^aDictionary = /* ••• */;
[aDictionary enumerateKeysAndObjectsUsingBlock:
        ^(NSString *key, NSString *obj, BOOL *stop){
         //Do something with &#39;key&#39; and &#39;obj&#39;
}];
</code></pre>

<p>之所以能如此，是因为<code>id</code>类型相当特殊，它可以像本例这样，为其他类型所覆写。要是原来的块签名把键与值都定义成<code>NSObject*</code>，那这么写就不行了。此技巧初看不甚显眼，实 则相当有用。指定对象的精确类型之后，编译器就可以检测出开发者是否调用了该对象所不 具备的方法，并在发现这种问题时报错。如果能够确知某<code>collection</code>里的对象是什么类型, 那就应该使用这种方法指明其类型。</p>

<p>用此方式也可以执行反向遍历。数组、字典、set都实现了前述方法的另一个版本，使开发者可向其传入<code>“选项掩码”(option mask)</code>:</p>

<pre><code class="language-objc">-(void)enumerateObjectsWithOptions:
            (NSEnumerationOptions)options 
            usingBlock: 
            (void(^)(id obj, NSUInteger id, BOOL *stop))block

-(void)enumerateKeysAndObjectsWithOptions:
            (NSEnumerationOptions)options
            usingBlock:
            (void(^)(id key, id obj, BOOL *stop))block
</code></pre>

<p><code>NSEnumerationOptions</code>类型是个<code>enum</code>,其各种取值可用<code>“按位或”（bitwiseOR)</code>连接，用以表明遍历方式。具体选项不再过多介绍。</p>

<p>总体来看，块枚举法拥有其他遍历方式都具备的优势，而且还能带来更多好处。与快速遍历法相比，它要多用一些代码，可是却能提供遍历时所针对的下标，在遍历字典时也能同时提供键与值，而且还有选项可以开启并发迭代功能，所以多写这点代码还是值得的。</p>

<h2 id="toc_2">要点</h2>

<ul>
<li>遍历<code>collection</code>有多方式。最基本的办法是<code>for</code>循环，其次是<code>NSEnumerator</code>遍历法及快速遍历法，最新、最先进的方式则是“块枚举法”。</li>
<li> “块枚举法”本身就能通过<code>GCD</code>来并发执行遍历操作，无须另行编写代码。而采用其他遍历方式则无法轻易实现这一点。</li>
<li> 若提前知道待遍历的<code>collection</code>含有何种对象，则应修改块签名，指出对象的具体类型。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十四条 ： 以“自动释放池降低内存峰值”]]></title>
    <link href="https://lockxmonk.github.io/15075183660097.html"/>
    <updated>2017-10-09T11:06:06+08:00</updated>
    <id>https://lockxmonk.github.io/15075183660097.html</id>
    <content type="html"><![CDATA[
<p>在<code>Objective-C</code>的引用计数架构中，有一项特性叫做<code>“自动释放池”(autoreleasepool)</code>。释放对象有两种方式：一种是 调用<code>release</code>方法，使其保留计数立即递减；<strong><font color=red>另一种是调用<code>autorelease</code>方法，将其加人“自动 释放池”中。自动释放池用于存放那些需要在稍后某个时刻释放的对象。<code>清空（drain)</code>自动释放池时，系统会向其中的对象发送<code>release</code>消息。</font></strong></p>

<p>创建自动释放池的语句为：</p>

<pre><code class="language-objc">@autoreleasepool{
    // ....
}
</code></pre>

<p>我们来看下面这个例子：</p>

<pre><code class="language-objc">@autoreleasepool {
    NSString *string = [NSString stringWithFormat: @&quot;1 = %i&quot;, 1]; 
    @autoreleasepool {
        NSNumber *number = [NSNumber numberWithlnt:1];
        }
}
</code></pre>

<p>上面这个例子展示了基本的用法，自动释放池于左花括号处创建, 并于对应的右花括号处自动清空。位于自动释放池范围内的对象，将在此范围末尾处收到<code>release</code>消息。自动释放池可以嵌套。系统在自动释放对象时，会把它放到最内层的池里。</p>

<p><code>autoreleasepool</code>的常见用法为降低程序的内存峰值，比如下面这个代码：</p>

<pre><code class="language-objc">NSArray *databaseRecords = /* ... */;
NSMutableArray *people = [NSMutableArray new];
for (NSDictionary *record in databaseRecords) {
    EOCPerson *person = [[EOCPerson alloc] initWithRecord:record];
    [people addObject:person];
}
</code></pre>

<p>上述代码，因为<code>for</code>语句会不断的创建<code>person</code>对象，造成应用程序内存不断上涨，在执行完<code>for</code>语句后又会将所有临时对象都释放，造成内存的突然上涨与下降。这些临时对象本可以提前回收的，所以我们应该这么写：</p>

<pre><code class="language-objc">NSArray *databaseRecords = /* ... */;
NSMutableArray *people = [NSMutableArray new];
for (NSDictionary *record in databaseRecords) {
    @autoreleasepool{
        EOCPerson *person = [[EOCPerson alloc] initWithRecord:record];
        [people addObject:person];
    }
}
</code></pre>

<p>加上这个自动释放池之后，应用程序在执行循环时的内存峰值就会降低，不再像原来那么高了。<code>内存峰值(high-memory waterline)</code>是指应用程序在某个特定时段内的<code>最大内存用量 (highest memory footprint)</code>。新增的自动释放池块可以减少这个峰值，因为系统会在块的末尾把某些对象回收掉。而刚才提到的那种临时对象，就在回收之列。</p>

<p>自动释放池机制就像<code>“栈”（stack)</code> 一样。系统创建好自动释放池之后，就将其推入栈中, 而清空自动释放池，则相当于将其从栈中弹出。在对象上执行自动释放操作，就等于将其放入栈顶的那个池里。</p>

<p>现在我们创建一个iOS程序之后，系统会默认有一个<code>main.m文件</code>其中有代码：</p>

<pre><code class="language-objc">#import &lt;UIKit/UIKit.h&gt;
#import &quot;AppDelegate.h&quot;

int main(int argc, char * argv[]) {
    @autoreleasepool {
        return UIApplicationMain(argc, argv, nil, NSStringFromClass([AppDelegate class]));
    }
}
</code></pre>

<p>我们用自动释放池来包裹应用程序的<code>主入口点（main application entry point)</code>，除了上述主动添加了一个释放池，我们一般不需要主动添加，系统创建的线程一般默认都有自动释放池。</p>

<p><code>@autordeaSepool</code>语法还有个好处：每个自动释放池均有其范围，可以避免无意间误用了那些在清空池后已为系统所回收的对象。例如：</p>

<pre><code class="language-objc">@autoreleasepool {
    id object = [self createObject];
}
[self useObject:object];

</code></pre>

<p>上述代码无法编译，因为<code>object</code>变量出了自动释放池块的外围后就不可用了（已经被释放），所以在调用<code>“useObject:”</code>方法时不能用它做参数。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>自动释放池排布在栈中，对象收到<code>autorelease</code>消息后，系统将其放入最顶端的池里。 </li>
<li>合理运用自动释放池，可降低应用程序的内存峰值。</li>
<li><code>@autoreleasepool</code>这种新式写法能创建出更为轻便的自动释放池。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十五条：使用dispatch_once来执行只需运行一次的代码]]></title>
    <link href="https://lockxmonk.github.io/15065800553035.html"/>
    <updated>2017-09-28T14:27:35+08:00</updated>
    <id>https://lockxmonk.github.io/15065800553035.html</id>
    <content type="html"><![CDATA[
<p>单例模式顾名思义，就是一个类一般只会同时存在一个实例，常见的实现方式为在类中编写名为<code>sharedInstance</code>的类方法。例如：</p>

<pre><code class="language-objc">+(id)sharedImstance{
    static EOCClass *sharedlnstance = nil;
        @synchronized(self){
            if (!sharedlnstance) {
                sharedlnstance = [[self alloc] init];
            }
    }
    return sharedlnstance;
}
</code></pre>

<p>该方法只会返回全类共用的单例实例，而不会在每次调用时都创建新的实例。</p>

<p>为保证线程安全，上述代码将创建单例实例的代码包裹在同步块里。</p>

<p>GCD中的一个函数可以更简单的执行这种只需执行一次的代码。为：</p>

<pre><code class="language-objc">void dispatch_once (dispatch_once_t *token,
                    dispatch_block_t block);
</code></pre>

<p>此函数接受类型为的<code>dispatch_once_t</code>的特殊参数<code>token</code>，此外还接受块参数，在块里面执行我们所需要运行一次的代码。对于给定的<code>token</code>来说，该函数保证相关的块必定会执行，且仅执行一次。首次调用该函数时，必然会执行块中的代码，最重要的一点在于，此操作完全是线程安全的。<strong><font color=red>请注意，对于只需执行一次的块来说，每次凋用函数时传入的标记都必须完全相同。因此，开发 者通常将标记变量声明在<code>static</code>或<code>global</code>作用域里。</font></strong></p>

<p>将上面的代码改为<code>dispatch_once</code>来执行，就可以换为：</p>

<pre><code class="language-objc">+ (id)sharedInstance {
    static EOCClass ^sharedInstance = nil； 
    static dispatch_once_t onceToken;
    dispatch_once(&amp;onceToken, ^{
        sharedlnstance = [[self alloc] initJ;
    })；
    return sharedInstance;
}
</code></pre>

<p>使用<code>dispatch_once</code>可以简化代码并且彻底保证线程安全，开发者根本无须担心加锁或同步。所有问题都由<code>GCD</code>在底层处理。</p>

<p>相比于同步机制的繁琐，<code>dispatch_once</code>更高效，此函数采用“原子访问”（atomic access)来査询<code>token</code>，以判断其所对应的代码原来是否已经执行过。速度一般是同步机制的两倍。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>经常需要编写“只需执行一次的线程安全代码”（thread-safe single-code execution)。通过GCD所提供的<code>dispatch_once</code>函数，很容易就能实现此功能。</li>
<li>标记应该声明在<code>static</code>或<code>global</code>作用域中，这样的话，在把只需执行一次的块传给<code>dispatch once</code>函数时，传进去的标记也是相同的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十三条 掌握GCD和操作队列（NSOperation）的使用时机]]></title>
    <link href="https://lockxmonk.github.io/15055441842255.html"/>
    <updated>2017-09-16T14:43:04+08:00</updated>
    <id>https://lockxmonk.github.io/15055441842255.html</id>
    <content type="html"><![CDATA[
<p>虽然<code>GCD</code>很棒，但是我们有时候也应该选用正确的工具来使用。所以我们这里来介绍下<code>NSOperation</code>。</p>

<p>很少有其他技术能与<code>GCD</code>的同步机制相媲美。对于那些只需执行一次的代码来说，使用<code>GCD</code>的<code>dispatch_once</code>最为方便。</p>

<p>但是如果执行后台任务，<code>NSOperation</code>也许更适合。<code>NSOperation</code>是在<code>GCD</code>出现之前就有的一种技术。甚至现在操作队列在底层是用<code>GCD</code>来实现的。</p>

<p>在两者的诸多差别中，<strong><font color=red>首先要注意：GCD是纯C的API,而操作队列则是Objective-C的对象。</font></strong>在<code>GCD</code>中，任务用块来表示，而块是个轻量级数据结构（参见第37条）。与之相 反，“操作&quot;（operation)则是个更为重量级的<code>Objective-C</code>对象。虽说如此，但<code>GCD</code>并不总是最佳方案。有时候采用对象所带来的开销微乎其微，使用完整对象所带来的好处反而大大超过其缺点。</p>

<p>所以我们来介绍下它的好处：</p>

<ul>
<li><p>取消某个操作。如果使用操作队列，那么想要取消操作是很容易的。运行任务之前, 可以在<code>NSOperation</code>对象上调用<code>cancel</code>方法，该方法会设置对象内的标志位，用以表明此任务不需执行，不过，已经启动的任务无法取消。若是不使用操作队列，而是把块安排到<code>GCD</code>队列，那就无法取消了。那套架构是“安排好任务之后就不管了&quot;（fire and forget)。</p></li>
<li><p>指定操作间的依赖关系。一个操作可以依赖其他多个操作。开发者能够指定操作之间的依赖体系，使特定的操作必须在另外一个操作顺利执行完毕后方可执行。比方说，从服务器端下载并处理文件的动作，可以用操作来表示，而在处理其他文件之前，必须先下载<code>“清单文件”（manifest file)</code>。后续的下载操作，都要依赖于先下载清单文件这一操作。如果操作队列允许并发的话，那么后续的多个下载操作就可以同时执行，但前提是它们所依赖的那个清单文件下载操作已经执行完毕。</p></li>
<li><p>通过键值观测机制监控<code>NSOperation</code>对象的属性。<code>NSOperation</code>对象有许多属性都适合通过键值观测机制（简称KVO)来监听，比如可以通过<code>isCancelled</code>属性来判断任务是否已取消，又比如可以通过<code>isFinished</code>属性来判断任务是否已完成。如果想在某个任务变更其状态时得到通知，或是想用比<code>GCD</code>更为精细的方式来控制所要执行的 任务，那么键值观测机制会很有用。</p></li>
<li><p>指定操作的优先级。操作的优先级表示此操作与队列中其他操作之间的优先关系。优先级高的操作先执行，优先级低的后执行。操作队列的<code>调度算法（scheduling algorithm)</code>虽<code>“不透明&quot;（opaque)</code>,但必然是经过一番深思熟虑才写成的。反之，<code>GCD</code>则没有直接实现此功能的办法。<code>GCD</code>的队列确实有优先级，不过那是针对整个队列来说的，而不是针对每个块来说的。而令开发者在<code>GCD</code>之上自己来编写调度算法，又不太合适。<strong><font color=red>因此，在优先级这一点上，操作队列所提供的功能要比GCD更为便利。</font></strong></p></li>
</ul>

<blockquote>
<p><code>NSOperation</code>对象也有<code>“线程优先级”（thread priority)</code>,这决定了运行此操作的线程处在 何种优先级上。用<code>GCD</code>也可以实现此功能，然而采用操作队列更简单，只需设置一个属性。</p>
</blockquote>

<ul>
<li>重用 <code>NSOperation</code>对象。系统内置了一些<code>NSOperation</code>的子类（比如<code>NSBlockOperation</code>)供开发者调用，要是不想用这些固有子类的话，那就得自己来创建了。这些类就是普通的<code>Objective-C</code>对象，能够存放任何信息。对象在执行时可以充分利用存于其中的信息，而且还可以随意调用定义在类中的方法。这就比派发队列中那些简单的块要强大许多。这些<code>NSOperation</code>类可以在代码中多次使用，它们符合软件开发中的“不重复”原则。</li>
</ul>

<p>正如大家所见，操作队列有很多地方胜过派发队列。操作队列提供了多种执行任务的方式，而且都是写好了的，直接就能使用。</p>

<p>所以我们说，某些功能确实可以用高层的<code>Objective-C</code>方法来做，但这并不等于说它就一定比底层实现方案好。要想确定哪种方案更佳，最好还是测试一下性能。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>在解决多线程与任务管理问题时，派发队列并非唯一方案。</li>
<li>操作队列提供了一套高层的<code>Objective-C API</code>，能实现纯<code>GCD</code>所具备的绝大部分功能，而且还能完成一些更为复杂的操作，那些操作若改用<code>GCD</code>来实现，则需另外编写代码。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十二条 多用GCD，少用performSelector系列方法]]></title>
    <link href="https://lockxmonk.github.io/15050942669581.html"/>
    <updated>2017-09-11T09:44:26+08:00</updated>
    <id>https://lockxmonk.github.io/15050942669581.html</id>
    <content type="html"><![CDATA[
<p><code>Objective-C</code>本质上是一门非常动态的语言（参见第11条)，<code>NSObject</code>定义了几个方法, <mark>令开发者可以随意调用任何方法。这几个方法可以推迟执行方法调用，也可以指定运行方法所用的线程。</mark>这些功能原来很有用，但是在出现了<code>GCD</code>之后，这些功能就尽量不要使用了，尽量用<code>GCD</code>来取代他们。</p>

<p>其中他们又如下几个方法：</p>

<pre><code class="language-objc">-(id)performSelector : (SEL) selector
//可以传两个参数
-(id)performSelector : (SEL) selector
           withObject:（id）objectA
           withObject:（id）objectB
//传一个参数
-(id)performSelector : (SEL) selector
           withObject:（id）object
</code></pre>

<p>具体用法如：</p>

<pre><code class="language-objc">[object performSelector: @selector(selectorName)];

[object performSelector: @selector(setValue:)
             withObject: newValue];
</code></pre>

<p>上面的用法，会有很多局限，比如在<code>ARC</code>下，会发出警告表示：<code>也许会内存泄露</code>，这是因为编译器并不知道将要的选择子是什么，因此，也就不了解其方法签名及返回值，甚至连是否有返回值都不清楚，而且由于编译器不知道方法名，所以就没办法运用<code>ARC</code>的内存管麵则来判定返回值是不是该释放。鉴于此，<code>ARC</code>采用了比较谨慎的做法，就是不添加释放操作。然而这么<br/>
做可能导致内存泄漏，因为方法在返回对象时可能已经将其保留了。</p>

<p>另一个局限性是：返回值只能是<code>void</code>或对象类型。尽管所要执行的 选择子也可以返回<code>void</code>，但是<code>performSelector</code>方法的返回值类型毕竟是<code>id</code>。如果想返回整数或浮点数等类型的值，那么就需要执行一些复杂的转换操作了，而这种转换很容易出错。</p>

<p>第三个局限是：这个方法最多只能传递两个参数，当选择子得到参数超过两个时，只能运用字典来传送数据（但是容易增加开销和造成bug）。</p>

<p>所以我们的解决方法是：我们使用<code>块</code>来代替，并且<code>performSelector</code>系列方法都可以使用<code>GCD</code>机制使用块来实现。我们来举几个例子说明：</p>

<p>如果我们想要延后执行某个任务：</p>

<pre><code class="language-objc">//Using performSelector:withObjectrafterDelay: 
[self performSelector:@selector(doSomething)
           withObject:nil 
           afterDelay:5.0];

//Using dispatch_after
dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64 t)(5.0 * NSEC PER SEC));

dispatch_after(time, dispatch_get_main—queue(), ^(void){
     [self doSomething];
})；
</code></pre>

<p>后者想要在主线程执行某个任务：</p>

<pre><code class="language-objc">// Using performSelectorOnMainThread: withObject .-waitUntilDone :
[self performSelectorOnMainThread:@selector(doSomething)
                      withObject:nil 
                      waitUntilDone:NO];
//Using dispatch_async
// (or if waitUntilDone is YES, then dispatchasync) 
dispatch_async(dispatch_get_main_queue(), ^{
        [self doSomething];
});
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li><code>performSelector</code>系列方法在内存管理方面容易有疏失。它无法确定将要执行的选择子具体是什么，因而<code>ARC</code>编译器也就无法插入适当的内存管理方法。</li>
<li><code>performSelector</code>系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都受到限制。</li>
<li>如果想把任务放在另一个线程上执行，那么最好不要用<code>performSelector</code>系列方法，而是应该把任务封装到块里，然后调用大中枢派发机制的相关方法来实现。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十一条 多用派发队列，少用同步锁]]></title>
    <link href="https://lockxmonk.github.io/15049238737460.html"/>
    <updated>2017-09-09T10:24:33+08:00</updated>
    <id>https://lockxmonk.github.io/15049238737460.html</id>
    <content type="html"><![CDATA[
<p>在<code>OC</code>中，如果有多个线程要执行同一份代码，那么有时可能会出问题。这种情况下，通常要使用锁来实现某种同步机制。在<code>GCD</code>出现之前，有两种办法，第一种是采用内置的<code>“同步块”（synchronization block)</code>:</p>

<pre><code class="language-objc">-(void)synchronizedMethod {
    @synchronized(self) {
    //Safe
    }
}
</code></pre>

<p>这种写法会根据给定的对象，自动创建一个锁，并等待块中的代码执行完毕。执行到这段代码结尾处，锁就释放了。在本例中，同步行为所针对的对象是<code>self</code>。这么写通常没错，因为它可以保证每个对象实例都能不受干扰地运行其<code>synchronizedMethod</code>方法。然而，滥用 <code>@SynChronized(self)</code>则会降低代码效率，因为共用同一个锁的那些同步块，都必须按顺序执行。若是在<code>self</code>对象上频繁加锁，那么程序可能要等另一段与此无关的代码执行完毕，才能继续执行当前代码，这样做其实并没有必要。</p>

<p>另一种加锁的办法是<code>NSLock</code>对象：</p>

<pre><code class="language-objc">_lock = [[NSLockalloc] init];

-(void)synchronizedMethod {
    [_lock lock];
    //Safe
    [_lock unlock];
}
</code></pre>

<p>也可以使用<code>NSRecursiveLock</code>这种<code>“递归锁’（recursive lock)</code>，线程能够多次持有该锁，而不会出现<code>死锁(deadlock)</code>现象。</p>

<p>虽然上面两种方法可以用，但是也有一些缺陷，比如：在某些情况下，同步快会导致死锁，另外，效率不是很高。而如果直接使用锁对象的话，一旦遇到死锁，就会非常麻烦。</p>

<p><strong>所以我们一般使用GCD来替代，它的优点就是可以简单，高效的为代码加锁</strong>。属性因为需要经常性的同步，所以当要线程安全的时候，加上<code>“atomic”</code>特质来修饰属性。</p>

<p>但是如果我们想要自己实现属性访问方法时，可以：</p>

<pre><code class="language-objc">-(NSString*)someString {
    @synchronized(self) {
        return _someString;
    }
}
-(void)setSomeString:(NSString*)someString { 
    @synchronized(self) {
        _someString = someString;
    }
}
</code></pre>

<p>但是滥用<code>@synchronized(self)</code>会很危险，因为所有同步块都会彼此抢夺同一个锁。要是有很多个属性都这么写的话，那么每个属性的同步块都要等其他所有同步块执行完毕才能执行，这也许并不是开发者想要的效果。我们只是想令每个属性各自独立地同步。</p>

<p><strong><em>而且上述做法并不是绝对的线程安全。因为在两次访问操作之间，其他线程可能会写入新的属性值。</em></strong></p>

<p>这里我们使用<code>“串行同步队列”（serial synchronization queue)</code>。将读取操作及写入操作都安排在同一个队列里，即可保证数据同步。：</p>

<pre><code class="language-objc">_syncQueue = dispatch_queue_create(&quot;com.effectiveobjectivec.syncQueue&quot;, NULL);

-(NSString*)someString {
    _block NSString *localSomeString;
    dispatch_sync(_syncQueue, ^{
        localSomeString = _someString;
    })；
    return localSomeString;
}

-(void)setSomeString:(NSString*)someString { 
    dispatch_sync(_syncQueue,^{
        _someString = someString;
    });
}
</code></pre>

<p>此模式的思路是：把设置操作与获取操作都安排在序列化的队列里执行（串行同步队列并不会拓展新的线程），这样的话，所有针对属性的访问操作就都同步了。（关于GCD的串行队列/并发队列与iOS多线程这里不详细讲解了，后续深入探讨）。</p>

<p>多个获取方法可以并发执行，而获取方法与设置方法之间不能并发执行，利用这个特点，还能写出更快一些的代码来。此时正可以体现出<code>GCD</code>写法的好处。用同步块或锁对象，是无法轻易实现出下面这种方案的。这次不用串行队列，而改用<code>并发队列（concurrentquene)</code>:</p>

<pre><code class="language-objc">_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

-(NSString*}someString {
    __block NSString *localSomeString; 
    dispatch_sync( _syncQueue, ^{
        localSomeString = _someString;
    })； 
    return localSomeString;
}

-(void)setSomeString:(NSString*)someString { 
        dispatch_async(syncQueue, ^{
        _someString = someScring;
    });
}
</code></pre>

<p>光是上面这些代码还不够，所有读取操作与写入操作都会在同一个队列上执行，不过由于是并发队列，所以读取与写人操作可以随时执行。而我们恰恰不想让这些操作随意执行。这就要用到<code>栅栏（barrier)</code>，是<code>GCD</code>中的一个功能：</p>

<pre><code class="language-objc">void dispatch_barrier_async(dispatch_queue_t queue,
                            dispatch_block_t block);
void dispatch_barrier_sync(dispatch_queue_t queue,
                            dispatch_block_t block);
</code></pre>

<p><strong><font color=red>在队列中，栅栏块必须单独执行，不能与其他块并行。这只对并发队列有意义，因为串行队列中的块总是按顺序逐个来执行的。并发队列如果发现接下来要处理的块是个栅栏块 (barrier block)，那么就一直要等当前所有并发块都执行完毕，才会单独执行这个栅栏块。待栅栏块执行过后，再按正常方式继续向下处理。</font></strong></p>

<p>在本例中，可以用栅栏块来实现属性的设置方法。在设置方法中使用了栅栏块之后，对属性的读取操作依然可以并发执行，但是写人操作却必须单独执行了。例如：</p>

<pre><code class="language-objc">_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

-(NSString*}someString {
    __block NSString *localSomeString; 
    dispatch_sync( _syncQueue, ^{
        localSomeString = _someString;
    })； 
    return localSomeString;
}

-(void)setSomeString:(NSString*)someString { 
        dispatch_barrier_async(syncQueue, ^{
        _someString = someScring;
    });
}
</code></pre>

<p><strong>执行的顺序如图所示：</strong><br/>
<img src="media/15049238737460/15049413869385.jpg" alt=""/></p>

<p>测试一下性能，你就会发现，这种做法肯定比使用串行队列要快。注意，设置函数也可以改用同步的<code>栅栏块(synchronous barrier)</code>来实现，那样做可能会更髙效，其原因刚才已经 解释过了。<strong><font color=red>最好还是测一测每种做法的性能，然后从中选出最适合当前场景的方案</font></strong>。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>派发队列可用来表述<code>同步语义（synchronization semantic)</code>,这种做法要比使用<code>@synchronized块</code>或<code>NSLock</code>对象更简单。</li>
<li>将同步与异步派发结合起来，可以实现与普通加锁机制一样的同步行为，而这么做却不会阻塞执行异步派发的线程。</li>
<li>使用同步队列及栅栏块，可以令同步行为更加髙效。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十条 用块引用其所属对象时不要出现保留环]]></title>
    <link href="https://lockxmonk.github.io/15045739362959.html"/>
    <updated>2017-09-05T09:12:16+08:00</updated>
    <id>https://lockxmonk.github.io/15045739362959.html</id>
    <content type="html"><![CDATA[
<p>我们使用块的时候，如果不仔细思索，很容易出现“保留环”，我们来举个例子，下面这个类就提供了一套接口，调用者可由此从某个URL中下载数据。在启动获取器时，可设置 <code>completion handler</code>,这个块会在下载结束之后以回调方式执行。为了能在下载完成后通过<code>p_requestCompleted</code>方法执行调用者所指定的块，这段代码需要把<code>completion handler</code>保存到实例变量里面。</p>

<pre><code class="language-objc">// EOCNetwor kFetcher. h
#import &lt;Foundation/Foundation.h&gt;
typedef void(^EOCNetworkFetcherCompletionHandler) (NSData *data);

@interface EOCNetworkFetcher : NSObject 
@property (nonatomic, strong, readonly) NSURL *url;
-(id)initWithURL:(NSURL^)url;
-(void)startWithCompletionHandler:(EOCNetworkFetcherCompletionHandler)completion;



// EOCNetworkFetcher.m
#import &quot;EOCNetworkFetcher.h&quot;
@interface EOCNetworkFetcher ()
@property(nonatomic, strong, readwrite) NSURL *url;
@property(nonatomic, copy) EOCNetworkFetcherCompletionHandler completionHandler; (nonatomic, strong) NSData *downloadedData;
@implementation EOCNetworkFetcher

-(id)initWithURL:(NSURL*)url {
    if ((self = [super init])) {
        _url = url;
    }
    return sel£;
}

-(void)startWithCompletionHandler:
        (EOCNetworkFetcherCompletionHandlei) completion
{
    self.completionHandler = completion;
    //Start the request
    // Request sets downloadedData property
    //When request is finished, p_requestCompleted is called
}

-(void)p_requestCompleted { 
    if (_completionHandler){ 
    _completionHandler(_downloadedData);
    }
}
@end
</code></pre>

<p>某个类可能会创建这种网络数据获取器对象，并用其从<code>URL</code>中下载数据：</p>

<pre><code class="language-objc">@implemantation EOCClass {
    EOCNetworkFetcher *_networkFetcher;
    NSData *_fetchedData;
}
-(void)downloadData {
    NSURL *url = [[NSURL alloc] initWithString:
                    @&quot;http://www.example.com/something.dat&quot;];
    _networkFetcher = [[EOCNetworkFetcher alloc] initWithURL:url];
    [_networkFetcher startWithCompletionHandler:^(NSData *data){
        NSLog (@&quot;Request URL %@ finished&quot;, _networkFetcher.url);
        _fetchedData = data;
    }]；
}
@end
</code></pre>

<p>这段代码没有什么问题，但是<strong><font color=red>里面有一个隐蔽的保留环</font></strong>，因为<code>completion handler</code>块要设置<code>_fetchedData</code>实例变量,所以它必须捕获<code>self</code>变量（变量捕获问题详见第37条。这就是说，<code>handler</code>块保留了创建网络数据获取器的那个<code>EOCClass</code>实例。而<code>EOCClass</code>实例则通过<code>strong</code>实例变量保留了获取器，最后，获取器对象又保留了<code>handler</code>块。</p>

<p>如下图所示：<br/>
<img src="media/15045739362959/15045760282053.jpg" alt=""/></p>

<p>要打破保留环也很容易：要么令<code>_networkFetcher</code>实例变量不再引用获取器，要么令获取器的<code>completionHaiidler</code>属性不再持有<code>handler</code>块。在网络数据获取器这个例子中，应该等 <code>completion handler</code>块执行完毕后，再去打破保留环，以便使获取器对象在<code>handler</code>块执行期间保持存活状态。比方说，<code>completion handler</code>块的代码可以这么修改：</p>

<pre><code class="language-objc">[_networkFetcher startWithCompletionHandler:^(NSData *data){
        NSLog (@&quot;Request URL %@ finished&quot;, _networkFetcher.url);
        _fetchedData = data;
        _networkFetcher = nil;
    }]；
</code></pre>

<p>如果设计<code>API</code>时用到了<code>completion handler</code>这样的同调块，那么很容易形成保留环，所以必须意识到这个重要问题。一般只要适时的清理环中的某个引用即可。</p>

<p>但是上例如果不执行<code>completion handler</code>，那么保留环就无法打破，于是内存就会泄漏。</p>

<p>所以我们使调用<code>API</code>的那段代码无须在执行期间保留指向网络数据获取器的引用，而是设定一套机制，令获取器对象自己设法保持存活。要想保持存活，获取器对象可以 在启动任务时把自己加到全局的<code>collection</code>中（比如用<code>set</code>来实现这个<code>collection</code>),待任务完成后，再移除。</p>

<p>所以我们改写一下：</p>

<pre><code class="language-objc">-(void)downloadData {
    NSURL *url = [[NSURL alloc] initWithString:
                    @&quot;http://www.example.com/something.dat&quot;];
    EOCNetworkFetcher *networkFetcher = [[EOCNetworkFetcher alloc] initWithURL:url];
    [networkFetcher startWithCompletionHandler:^(NSData *data){
        NSLog (@&quot;Request URL %@ finished&quot;, networkFetcher.url);
        _fetchedData = data;
    }]；
}
</code></pre>

<p>大部分网络通信库都采用这种办法，因为假如令调用者自己来将获取器对象保持存活的话，他们会觉得麻烦。<code>Twitter</code>框架的<code>TWRequest</code>对象也用这个办法。</p>

<p>但是上面这个例子仍然有保留环，<code>completion handler</code>块会通过获取器对象来引用其中的<code>URL</code>,之后获取器会反过来经由<code>CompletionHandler</code>属性保留这个块。我们把块保留在属性里的目的是想稍后来使用这个块。所以一旦我们运行过<code>completion handler</code>之后就可以将它释放了。我们消除保留环可以按照下面修改：</p>

<pre><code class="language-objc">-(void)p_requestCompleted { 
    if (_completionHandler){ 
        _completionHandler(_downloadedData);
    }
    self.completionHandler = nil;
}
</code></pre>

<p>这样只要下载请求执行完毕，保留环就解除了。</p>

<p>请注意，之所以要在<code>start</code>方法中把<code>completion handler</code>作为参数传进去，这也是一条重要原因。假如把<code>completion handler</code>暴露为获取器对象的公共属性，那么就不便在执行完下载请求之后直接将其淸理掉了，因为既然已经把<code>handler</code>作为属性公布了，那就意味着调用者可以自由使用它，若是此时又在内部将其清理掉的话，则会破坏<code>“封装语义” (encapsulation semantic)</code>。</p>

<p><font color=red>这两种保留环都很容易发生。使用块来编程时，一不小心就会出现这种<code>bug</code>,反过来说，只要小心谨慎，这种问题也很容易解决。关键在于，要想清楚块可能会捕获并保留哪些对象。如果这些对象又直接或间接保留了块，那么就要考虑怎样在适当的时机解除保留环。</font></p>

<h2 id="toc_0">要点</h2>

<ul>
<li>如果块所捕获的对象直接或间接地保留了块本身，那么就得当心保留环问题。</li>
<li>一定要找个适当的时机解除保留环，而不能把责任推给API的调用者。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十九条 用handler块降低代码分散程度]]></title>
    <link href="https://lockxmonk.github.io/15045090813380.html"/>
    <updated>2017-09-04T15:11:21+08:00</updated>
    <id>https://lockxmonk.github.io/15045090813380.html</id>
    <content type="html"><![CDATA[
<p>iOS中我们经常采用异步执行任务的方式，来避免主线程的阻塞。因为<code>“系统监控器”（system watchdog)</code>在发现某个应用程序的主线程已经阻塞了一段时间之后，就会令其终止。导致程序崩溃。</p>

<p>但是异步方法执行任务后，需要以某种手段来通知相关代码。实现这一功能有很多方法，常用的技巧是设计一个委托协议，令关注此事件的对象遵从该协议。对象成为<code>delegate</code>之后，就可以在相关事件发生时（例如某个异步任务执行完毕时）得到通知了。例如：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@class EOCNetworkFetcher;
@protocol EOCNetworkFetcherDelegate &lt;NSObject&gt;
-(void)networkFetcher:(EOCNetworkFetcher*)networkFetcher 
    didFinishWithData:(NSData*)data;
@end

@interface EOCNetworkFetcher : NSObject 
@property (nonatomic, weak) id &lt;EOCNetworkFetcherDelegate&gt; delegate; 
-(id)initWithURL:(NSURL*)url;
-(void)start;
@end
</code></pre>

<p>其它类可以像下面这样来使用：</p>

<pre><code class="language-objc">-(void)fetchFooData {
    NSURL *url = [[NSURL alloc] initWithString:
                    @&quot;http: //www.example.com/foo.dat&quot;]; 
    EOCNetworkFetcher *fetcher = [[EOCNetworkFetcher alloc] initWithURL:url]; 
    fetcher.delegate = self;
    [fetcher start];
}

-(void)networkFetcher:(EOCNetworkFetcher*)networkFetcher didFinishWithData:(NSData*)data
{
    _fetchedFooData = data;
}
</code></pre>

<p>上面在<code>EOCNetworkFetcher</code>类中声明了一个协议，协议中有一个方法用于通知对象已获取完数据。</p>

<p>之后想要获取到通知的对象遵守该协议，成为它的委托对象。这样在执行完<code>start</code>方法之后，<code>EOCNetworkFetcher</code>会调用委托对象所遵守的协议方法，让委托对象获取收到的数据（也就是通知它）。</p>

<p>上面这种做法没有错误，确实可行。但是如果我们改用块来写的话，代码会更清晰。就是把<code>completion handler</code>定义为块类型，将其当作参数直接传给<code>start</code>方法:</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

typedef void(^EOCNetworkFetcherCompletionHandler)(NSData *data);
@interface EOCNetworkFetcher : NSObject 
-(id)initWithURL:(NSURL*)url;
-(void)startWithCompletionHandler:
            (EOCNetworkFetcherCompletionHandler)handler;
@end
</code></pre>

<p>这和使用委托协议很想，不过多了个好处，就是可以在调用<code>start</code>方法时直接以内联形式 定义<code>completion handler</code>,以此方式来使用<code>“网络数据获取器”（network fetcher)</code>,可以令代码比原先易懂很多。例如，下面这个类就以块的形式来定义<code>completion handler</code>,并以此为参数调用<code>API</code>:</p>

<pre><code class="language-objc">-(void)fetchFooData {
NSURL *url = [[NSURL alloc] initWithString:
@&quot;http://www.example.com/foo.dat&quot;]; 
EOCNetworkFetcher *fetcher = [[EOCNetworkFetcher alloc] initWithURL:url];
[fetcher startWithCompletionHandler:^(NSData *data){ 
    _fetchedFooData = data;
})；
</code></pre>

<p>与使用委托模式的代码相比，用块写出来的代码显然更为整洁。异步任务执行完毕后所需运行的业务逻辑，和启动异步任务所用的代码放在了一起。而且，由于块声明在创建获取器的范围里，所以它可以访问此范围内的全部变量。</p>

<p>这种写法其实最重要的用途是处理错误。现在很多基于块的<code>API</code>都使用块来处理错误，可以分别用两个处理程序来处理操作失败的情况和操作成功的情况。也可以把处理失败情况所需的代码，与处理正常情况所用的代码，都封装到同一个<code>completion handler</code>块里,我们建议使用后者，因为苹果公司也是这样设计<code>API</code>的。我们举例来说：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@class EOCNetworkFetcher;
typedef void(^EOCNetworkFetcherCompletionHandler) 
                                (NSData *data, NSError *error);

@interface EOCNetworkFetcher : NSObject
-(id)initWithURL:(NSURL*)url;
-(void)startWithCompletionHandler:
                (EOCNetworkFetcherCompletionHandler)completion;
@end
</code></pre>

<p>此种API的调用方式如下:</p>

<pre><code class="language-objc">EOCNetworkFetcher *fetcher =
        [[EOCNetworkFetcher alloc] initWithURL:url]; 
[fetcher startWithCompletionHander:
    ^(NSData *data, NSError *error){ 
    if (error) {
        //Handle failure 
    }else {
        // Handle success
    }
}];
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li>在创建对象时，可以使用内联的<code>handler</code>块将相关业务逻辑一并声明。</li>
<li>在有多个实例需要监控时，如果采用委托模式，那么经常需要根据传入的对象来切 换，而若改用<code>handler</code>块来实现，则可直接将块与相关对象放在一起。</li>
<li>设计API时如果用到了<code>handler</code>块，那么可以增加一个参数，使调用者可通过此参数来决定应该把块安排在哪个队列上执行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十八条 为常用的块类型创建typedef]]></title>
    <link href="https://lockxmonk.github.io/15044922241087.html"/>
    <updated>2017-09-04T10:30:24+08:00</updated>
    <id>https://lockxmonk.github.io/15044922241087.html</id>
    <content type="html"><![CDATA[
<p>我们在定义一个块时，语法是这样的：</p>

<pre><code class="language-objc">int^(variableName)(BOOL flag,int value) = ^(BOOL flag, int value){
    //Implemention
    return someInt;
}
</code></pre>

<p>此块接受两个类型分别为<code>BOOL</code>及<code>int</code>的参数，并返回类型为<code>int</code>的值。并且把它赋给了一个变量。</p>

<p>与其他类型的变量不同，在定义块变量时，要把变量名放在类型之中，而不要放在右侧。这种语法非常难记，也非常难读。<strong><font color=red>鉴于此，我们应该为常用的块类型起个别名，</font></strong>尤其是打算把代码发布成API供他人使用时，更应这样做。开发者可以起个更为易读的名字来表示块的用途，而把块的类型隐藏在其后面。例如：</p>

<pre><code class="language-objc">//定义
typedef int(^EOCSomeBlock)(BOOL flag, int value);
</code></pre>

<p>声明变量时，要把名称放在类型中间，并在前面加上<code>“^”</code>符号，而定义新类型时也得这么做。上面这条语句向系统中新增了一个名为<code>EOCSomeBlock</code>的类型。此后，不用再以复杂的块类型来创建变量了，直接使用新类型即可：</p>

<pre><code class="language-objc">EOCSomeBlock block = ^(BOOL flag, int value){
    // Implementation
};
</code></pre>

<p><strong><mark>这次代码读起来就顺畅多了：与定义其他变量时一样，变量类型在左边，变量名在右边。</mark></strong></p>

<p>我们可以利用这个将使用块的API做的简单易用些，例如：</p>

<pre><code class="language-objc">-(void)startWithCompletionHandler:
            (void(^)(NSData *data, NSError *error))completion;
</code></pre>

<p>上面代码接受了一个块作为参数，所以我们可以用上面定义块的方法来改写它：</p>

<pre><code class="language-objc">typedef void(^EOCCompletionHandler)(NSData *data, NSError *error);

-(void)startWithCompletionHandler: (EOCCompletionHandler)completion;
</code></pre>

<p>现在参数看上去就简单多了，而且易于理解。</p>

<p>我们在定义块的时候要注意，最好在使用块类型的类中定义这些<code>typedef</code>，而且还应该把这个类的名字加在由<code>typedef</code>所定义的新类型名前面，这样可以阐明块的用途。还可以用<code>typedef</code>给同一个块签名类型创建数个别名。在这件事上，多多益善。因为，开发者看到类型的别名以及签名中的参数之后，可以很容易的理解类型的用途。</p>

<p>与此相似，如果有好几个类都要执行相似但各有区别的异步任务，而这几个类又不 能放人同一个继承体系，那么，每个类就应该有自己的<code>completion handler</code>类型。这几个<code>completion handler</code>的签名也许完全相同，但最好还是在每个类里都各自定义一个别名，而不 要共用同一个名称。反之，若这些类能纳人同一个继承中，则应该将类型定义语句放在超类中，以供各子类使用。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>以<code>typedef</code>重新定义块类型，可令块变量用起来更加简单。</li>
<li>定义新类型时应遵从现有的命名习惯，勿使其名称与别的类型相冲突。</li>
<li>不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名，那么只需修改相应<code>typedef</code>中的块签名即可，无须改动其他<code>typedef</code>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十七条 理解“块”这一概念]]></title>
    <link href="https://lockxmonk.github.io/15043212815193.html"/>
    <updated>2017-09-02T11:01:21+08:00</updated>
    <id>https://lockxmonk.github.io/15043212815193.html</id>
    <content type="html"><![CDATA[
<p>首先，块与函数类似，只不过是直接定义在另一个函数里的，和定义它的那个函数共享同一 个范围内的东西。块用<code>“^”</code>符号来表示，后面跟着一对花括号，括号里面是块的实现代码。 例如，下面就是个简单的块：</p>

<pre><code class="language-objc">^{
    //Block implementation here
}
</code></pre>

<p>块其实就是个值，而且自有其相关类型。与<code>int</code>、<code>float</code>或<code>Objective-C</code>对象一样，也可以把块赋给变量,然后像使用其他变量那样使用它。块类型的语法与函数指针近似。下面列出的这个块很简单，没有参数，也不返回值：</p>

<pre><code class="language-objc">void (^someBlock) () = A {
    //Block implementation here
}；
</code></pre>

<p>这段代码定义了一个名为<code>someBlock</code>的变量。由于变量名写在正中间，所以看上去也许 =有点怪，不过一旦理解了语法，很容易就能读懂。块类型的语法结构如下：</p>

<pre><code class="language-objc">return_type (^block_name)(parameters)
</code></pre>

<p>我们来举个例子，下面这种写法所定义的块，返回<code>int</code>值，并且接受两个<code>int</code>做参数：</p>

<pre><code class="language-objc">int (^addBlock) (int a, int b) = ^(int a, int b){
     return a + b;
};
</code></pre>

<p>定义好之后，就可以像函数那样使用了。比方说，<code>addBlock</code>块可以这样用:</p>

<pre><code class="language-objc">int add = addBlock (2, 5) ;  //&lt; add = 12
</code></pre>

<p>块的强大之处是：在声明它的范围里，所有变量都可以为其所捕获。这也就是说，那个范围里的全部变量，在块里依然可用。比如，下面这段代码所定义的块，就使用了块以外的变量：</p>

<pre><code class="language-objc">int additional = 5;
int (^addBlock) (int a, int b) = ^(int a, int b){ 
    return a + b + additional;
};

int add = addBlock (2, 5);  //&lt; add = 12
</code></pre>

<p>默认情况下，为块所捕获的变量，是不可以在块里修改的。在本例中，假如块内的代码改动了<code>additional</code>变量的值，那么编译器就会报错。不过，声明变量的时候可以加上<code>__block</code> 修饰符，这样就可以在块内修改了。</p>

<p>例如：</p>

<pre><code class="language-objc">__block int additional = 5;
int (^addBlock) (int a, int b) = ^(int a, int b){   
    additional++;
    return a + b + additional;
};

int add = addBlock (2, 5);  //&lt; add = 13
</code></pre>

<p>块的另一个用法是<code>“内联块”（inline block）</code>，例如：</p>

<pre><code class="language-objc">NSArray *array = @[@0, @1, @2, @3, @4, @5];
_block NSInteger count = 0;
[array enumerateObjectsUsingBlock:
    ^(NSNumber *number, NSUInteger idx, BOOL *stop){
        if([number compare:@2] == NSOrderedAscending) { 
        count++;
    }
}];
//count = 2
</code></pre>

<p>这段范例代码也演示了<code>“内联块”（inline block)</code>的用法。传给<code>“numerateObjectsUsingBlock:”</code>方法的块并未先賦给局部变量,而是直接内联在函数调用里了。</p>

<p>然后我们在声明和使用块的时候，要注意它的作用范围。定义块的时候，其所占的内存区域是分配在栈中的。这就是说，块只在定义它的那个范围内有效。比如下面这个：</p>

<pre><code class="language-objc">void(^block)();
if ( /* some condition */ ){
    block = ^{
        NSLog(@&quot;Block A&quot;);
    };
} else {
    block = ^{
        NSLog(@&quot;Block B&quot;);
    };
}
block();
</code></pre>

<p>定义在<code>if</code>及<code>else</code>语句中的两个块都分配在栈内存中。编译器会给每个块分配好栈内存, 然而等离开了相应的范围之后，编译器有可能把分配给块的内存覆写掉。于是，这两个块只 能保证在对应的<code>if</code>或<code>else</code>语句范围内有效。这样写出来的代码可以编译，但是运行起来时而正确，时而错误。若编译器未覆写待执行的块，则程序照常运行，若覆写，则程序崩溃。</p>

<p>我们为了解决这个问题可以给块对象发送<code>copy</code>消息以拷贝之。这样的话，就可以把块从栈复制到堆了。</p>

<p>拷贝后的块，可以在定义它的那个范围之外使用。而且，一旦复制到堆上，块就成了带引用计数的对象了。后续的复制操作都不会真的执行复制，只是递增块对象的引用计数。如果不再使用这个块，那就应将其释放，在ARC环境下会自动释放。</p>

<p>改动后跟下面一样：</p>

<pre><code class="language-objc">void (^block)();
if (/* some condition */ ){ 
    block = [^{
        NSLog(@,fBlock Aw);
    } copy];
} else {
    block = [^{
        NSLog(@&quot;Block B&quot;);
    } copy];
}
block();
</code></pre>

<p>除了“桟块”和“堆块”之外，还有一类块叫做<strong><mark>“全局块”（global block)</mark></strong>。这种块不会捕捉任何状态（比如外围的变量等)，运行时也无须有状态来参与。块所使用的整个内存区域，在编译期已经完全确定了，因此，全局块可以声明在全局内存里，而不需要在每次用到 的时候于栈中创建。另外，全局块的拷贝操作是个空操作，因为全局块决不可能为系统所回收。这种块实际上相当于单例。下面就是个全局块：</p>

<pre><code class="language-objc">void (^block)() = ^{
    NSLog(@&quot;This is a block&quot;);
};
</code></pre>

<p><mark>由于运行该块所需的全部信息都能在编译期确定，所以可把它做成全局块。</mark>这完全是种优化技术：若把如此简单的块当成复杂的块来处理，那就会在复制及丢弃该块时执行一些无谓的操作。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>块是<code>C、C++、Objective-C</code>中的词法闭包。</li>
<li>块可接受参数，也可返回值。</li>
<li>块可以分配在栈或堆上，也可以是全局的。分配在栈上的块可拷贝到堆里，这样的话，就和标准的<code>Objective-C</code>对象一样，具备引用计数了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过协议提供匿名方法]]></title>
    <link href="https://lockxmonk.github.io/15043134527493.html"/>
    <updated>2017-09-02T08:50:52+08:00</updated>
    <id>https://lockxmonk.github.io/15043134527493.html</id>
    <content type="html"><![CDATA[
<p>协议定义了一系列方法，遵从此协议的对象应该实现它们（如果这些方法不是可选的, 那么就必须实现)。于是，我们可以用协议把自己所写的<code>API</code>之中的实现细节隐藏起来，将返回的对象设计为遵从此协议的纯<code>id</code>类型。</p>

<p>这样的话，想要隐藏的类名就不会出现在<code>API</code>之中了。若是接口背后有多个不同的实现类，而你又不想指明具体使用哪个类，那么可以考虑用这个办法——因为有时候这些类可能会变，有时候它们又无法容纳于标准的类继承体系中，因而不能以某个公共基类来统一表示。</p>

<p>此概念经常称为<code>“匿名对象&quot;(anonymous object)</code>，这与其他语言中的“匿名对象”不同，在那些语言中，该词是指以内联形式所创建出来的无名类，而此词在<code>Objective-C</code>中则不是这个意思。</p>

<p>我们之前说的委托与数据源对象，就用到了这个方法。例如在定义“受委托者（delegate）”属性时：</p>

<pre><code class="language-objc">@property {nonatomic, weak) id &lt;EOCDelegate&gt; delegate;

</code></pre>

<p>由于该属性的类型是<code>id&lt;EOCDelegate&gt;</code>,所以实际上任何类的对象都能充当这一属性, 即便该类不继承自<code>NSObject</code>也可以，只要遵循<code>EOCDelegate</code>协议就行。对于具备此属性的类来说，<code>delegate</code>就是“匿名的”（ammymous)。如有需要，可在运行期査出此对象所属的类型（参见第14条）。然而这样做不太好，因为指定属性类型时所写的那个<code>EOCDelegate</code>契约已经表明此对象的具体类型无关紧要了。</p>

<p>当然还有其它的用法，这里我们就不举例了。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>协议可在某种程度上提供匿名类型。具体的对象类型可以淡化成遵从某协议的<code>id</code>类型，协议里规定了对象所应实现的方法。</li>
<li>使用匿名对象来隐藏类型名称（或类名）。</li>
<li>如果具体类型不重要，重要的是对象能够响应（定义在协议里的）特定方法，那么可使用匿名对象来表示。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVO的简单实现]]></title>
    <link href="https://lockxmonk.github.io/15042539845357.html"/>
    <updated>2017-09-01T16:19:44+08:00</updated>
    <id>https://lockxmonk.github.io/15042539845357.html</id>
    <content type="html"><![CDATA[
<p>之间看有关<code>OC</code>和<code>iOS</code>的书都会看到<code>KVO</code>这个名词。所以今天来学习和实现一下。简单的说<code>KVO</code>即<code>Key-Value Observing</code>,它提供一种机制,当指定的对象的属性被修改后,则对象就会接受到通知。 </p>

<p>它来源于设计模式中的观察者模式，其基本思想就是：</p>

<blockquote>
<p>一个目标对象管理所有依赖于它的观察者对象，并在它自身的状态改变时主动通知观察者对象。这个主动通知通常是通过调用各观察者对象所提供的接口方法来实现的。观察者模式较完美地将目标对象与观察者对象解耦。</p>
</blockquote>

<p>我们一般用到的都是自动实现<code>KVO</code>，所以我这里就不实现手动的<code>KVO</code>了。实现<code>KVO</code>需要两个主要的方法：</p>

<pre><code class="language-objc">//注册观察者
- (void)addObserver:(NSObject *)observer 
        forKeyPath:(NSString *)keyPath 
        options:(NSKeyValueObservingOptions)options 
        context:(void *)context;
        
//当观察的对象属性有所改变就会通知观察者，该方法用来处理变更通知
- (void)observeValueForKeyPath:(NSString *)keyPath 
                     ofObject:(id)object 
                        change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change 
                        context:(void *)context;
</code></pre>

<p>这两个方法在<code>Foundation/NSKeyValueObserving.h</code>中，<code>NSObject，NSArray，NSSet</code>均实现了以上方法，因此我们不仅可以观察普通对象，还可以观察数组或结合类对象。</p>

<p>我们来举例说明：</p>

<p>创建一个观察者类：</p>

<pre><code class="language-objc">//
//  Observer.h
//  KVO机制
//

#import &lt;Foundation/Foundation.h&gt;

@interface Observer : NSObject

@end



//  Observer.m
//  KVO机制
#import &quot;Observer.h&quot;

@implementation Observer

-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context{
    //判断发送过来的通知中更改的属性是否是name
    if ([keyPath isEqualToString:@&quot;name&quot;]) {
        //获取更改属性的类的信息
        Class classInfo = (__bridge Class)context;
        NSString *className = [NSString stringWithFormat:@&quot;%s&quot;, object_getClassName(classInfo)];
        NSLog(@&quot; &gt;&gt; class : [%@] , Name changed&quot;, className);
        NSLog(@&quot; &gt;&gt; old name is %@&quot;, [change objectForKey:@&quot;old&quot;]);
        NSLog(@&quot; &gt;&gt; new name is %@&quot;, [change objectForKey:@&quot;new&quot;]);
    
    }else{
        /*
         *注意：在实现处理变更通知方法 observeValueForKeyPath 时，
         *要将不能处理的 key 转发给 super 的 observeValueForKeyPath 来处理。
         */
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}

@end

</code></pre>

<p>然后创建一个用于观察的<code>Target</code>类</p>

<pre><code class="language-objc">//  Target.h
//  KVO机制


#import &lt;Foundation/Foundation.h&gt;

@interface Target : NSObject

@property(nonatomic,assign) NSString *name;

@end


//  Target.m
//  KVO机制


#import &quot;Target.h&quot;

@implementation Target
//给name属性一个初始值，用于检测变化
-(instancetype)init{
    if (self = [super init]) {
        _name = @&quot;yue&quot;;
    }
    return self;
}
@end
</code></pre>

<p>然后我们在<code>main.m</code>中添加观察者来执行：</p>

<pre><code class="language-objc">//  main.m
//  KVO机制


#import &lt;Foundation/Foundation.h&gt;
#import &quot;Observer.h&quot;
#import &quot;Target.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        //分别创建实例
        Observer *observer = [[Observer alloc]init];
        Target *target = [[Target alloc]init];
        
        //target 增加一个观察者，用于观察name属性
        [target addObserver:observer forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:(__bridge void * _Nullable)([Target class])];
        //更改name属性的值，响应观察者的动作
        [target setName:@&quot;hao&quot;];
        //移除name的观察者，防止内存泄露
        [target removeObserver:observer forKeyPath:@&quot;name&quot;];
    }
    return 0;
}

</code></pre>

<p>我们运行后结果如下：</p>

<p><img src="media/15042539845357/15042556319090.jpg" alt=""/></p>

<p>可以发现是<code>Target</code>类发送过来的通知，说明属性已经变更。</p>

<p>下面我们来讨论一下传过来了的参数。其中<code>addObserver</code>方法中的<code>option：</code>参数用于指定应该包含哪种通知。其中主要有以下几种：</p>

<ul>
<li><strong>NSKeyValueObservingOptionNew</strong>：指出<code>change</code>字典应该包含有新的属性（如果适用）。</li>
<li><strong>NSKeyValueObservingOptionOld</strong>：指出<code>change</code>字典应该包含有旧的属性（如果适用）。</li>
<li><strong>NSKeyValueObservingOptionInitial</strong>：把初始化的值提供给处理方法，一旦注册，立马就会调用一次。通常它会带有新值，而不会带有旧值。</li>
<li><strong>NSKeyValueObservingOptionPrior</strong>： 分2次调用。在值改变之前和值改变之后。</li>
</ul>

<p>其中<code>observeValueForKeyPath</code>方法中的<code>change</code>参数是一个字典型数据。会根据<code>option</code>参数的变化来生成不同的数据。一般会包含<code>new</code>和<code>old</code>两个<code>key</code>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第27条 使用“class-continuation分类”隐藏实现细节]]></title>
    <link href="https://lockxmonk.github.io/15042325338088.html"/>
    <updated>2017-09-01T10:22:13+08:00</updated>
    <id>https://lockxmonk.github.io/15042325338088.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第一种用途</h2>

<p>类中经常会包含一些无须对外公布的方法及实例变最。其实这些内容也可以对外公布, 并且写明其为私有，开发者不应依赖它们。但是<code>OC</code>的动态性，使得不可能实现真正的私有方法或私有实例变量。</p>

<p>但是我们最好还是只把确实需要对外公布的那部分内容公开。那么，这种不需对外公布但却应该具有的方法及实例变量应该怎么写呢？此时，这个特殊的<code>“class-continuation分类”</code>就派上用场了。</p>

<p><font color=red><strong>“class-continuation分类”和普通的分类不同，它必须定义在其所接续的那个类的实现文件里。</strong></font></p>

<p>例如：</p>

<pre><code class="language-objc">//EOCPerson.m
@interface EOCPerson () {
    NSString * _anInstanceVariable;
}
// Method declarations here 
@end
@implementation EOCPerson {
    int _anotherInstanceVariable;
}
// Method implementations here 
@end
</code></pre>

<p>我们这样定义的目的是将这些方法或者实例变量隐藏起来，只供本类使用。即便在公共接口里将其标注为private,也还是会泄漏实现细节。</p>

<p>例如有个绝密的类，不想给其他人知道。 假设你所写的某个类拥有那个绝密类的实例，而这个实例变量又声明在公共接口里面：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

@class EOCSuperSecretClass;

@interface EOCClass : NSObject {
@private
    EOCSuperSecretClass *_secretInstance;
@end
</code></pre>

<p>这样别人就会知道有一个叫<code>EOCSuperSecretClass</code>的类了。</p>

<p>所以我们通常应该这样：</p>

<pre><code class="language-objc">// EOCClass.h
#import &lt;Foundation/Foundation.h&gt;
@interface EOCClass : NSObject 
@end

// EOCClass .m 
#import &quot;EOCClass.h&quot;
#import &quot;EOCSuperSecretClass.h&quot;
@interface EOCClass ()  {
    EOCSuperSecretClass *_secretInstance;
@end

@implementation EOCClass
// Methods here
@end
</code></pre>

<h2 id="toc_1">第二种用途</h2>

<p>编写<code>Objective-C++</code>代码时 <code>“class-continuation分类”</code>也很有用。<code>Objective-C++</code>是 <code>OC</code>与<code>C++</code>的混合体，其代码可以用这两种语言来编写。由于兼容性原因，游戏后 端一般用<code>C++</code>来写。另外，有时候要使用的第三方库可能只有<code>C++</code>绑定，此时也必须使用 <code>C++</code>来编码。在这些情况下，使用<code>&quot;class-continuation分类&quot;</code>会很方便。假设某个类打算这样写：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt; 
#include &quot;SomeCppClass.h&quot; 
@interface EOCClass : NSObject { 
@private
    SomeCppClass _cppClass;
@end
</code></pre>

<p>该类的实现文件可能叫做<code>EOCClass.mm</code>,其中<code>.mm</code>扩展名表示编译器应该将此文件按<code>Objective-C++</code>来编译，否则，就无法正确引人<code>SomeCppClass.h</code>了。然而请注意，名为<code>SomeCppClass</code>的这个<code>C++</code>类必须完全引入，因为编译器要完整地解析其定义方能得知<code>_cppClass</code>实例变量的大小。于是，只要是包含<code>EOCClass.h</code>的类，都必须编译为 <code>Objective-C++</code>才行，因为它们都引入了<code>SomeCppClass</code>类的头文件。这很快就会失控，最终 导致整个应用程序全部都要编译为ObjeCtive-C++。这样显然会增加编码的负担。</p>

<p>也许我们会想用前向声明来避免导入<code>SomeCppClass.h</code>,比如：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt; 

class SomeCppClass;

@interface EOCClass : NSObject { 
@private
    SomeCppClass *_cppClass;
@end
</code></pre>

<p>现在实例变量必须是指针，若不是，则编译器无法得知其大小，从而会报错。但所有指针的大小确实都是固定的，于是编译器只需知道其所指的类型即可。</p>

<p>虽然我们这样做没有<code>#include &quot;SomeCppClass.h&quot;</code>但是我们前向声明该类时所用的<code>class</code>关键字还是<code>C++</code>下的关键字，所以仍然需要按照<code>OC</code>来编译才行。</p>

<p>我们这里的解决方法还是一样，既然变量是<code>private</code>的，我们还是可以将它在<code>“class-continuation分类”</code>声明，改写成：</p>

<pre><code class="language-objc">// EOCClass. h

#import &lt;Foundation/Foundation.h&gt;

@interface EOCClass : NSObject


// EOCClass.mm 
#import &quot;EOCClass.h&quot;
#include &quot;SomeCppClass.h&quot;

@interface EOCClass ()  {
    SomeCppClass _cppClass;
}
@end

@implementation EOCClass 
@end
</code></pre>

<p>改写后的<code>EOCClass</code>类，其头文件里就没有<code>C++</code>代码了，使用头文件的人甚至意识不到其底层实现代码中混有<code>C++</code>成分。某些系统库用到了这种模式，比如网页浏览器框架<code>WebKit</code>,其大部分代码都以<code>C++</code>编写，然而对外展示出来的却是一套整洁的<code>Objective-C</code>接口。<code>CoreAnimation</code>里面也用到了此模式，它的许多后端代码都用<code>C++</code>写成，但对外公布的却是一套纯<code>Objective-C</code>接口。</p>

<h2 id="toc_2">第三种用法</h2>

<p>就是将<code>public</code>接口中声明为“只读”的 属性扩展为“可读写”，以便在类的内部设置其值。</p>

<p>例如：</p>

<pre><code class="language-objc">// .h文件
#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject

@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName;

-(id) initWithFirstName : (NSString*) firstName
                lastName: (NSString*) lastName;

@end

</code></pre>

<p>我们一般会在<code>“class-continuaticm分类”</code>中把这两个属性扩展为“可读写”：</p>

<pre><code class="language-objc">@interface EOCPerson ()
@property (nonatomic, copy, readwrite) NSString *firstName;
@property (nonatomic, copy, readwrite) NSString *lastName;

-(void)p_privateMethod;
@end
</code></pre>

<p>只需要用上面几行代码就行了。现在<code>EOCPerson</code>的实现代码可以随意调用<code>“setFirstName:”</code>或<code>“setLastName:”</code>这两个设置方法，也可以用“点语法”来设置属性。这样做很有用，既能令外界无法修改对象，又能在其内部按照需要管理其数据。</p>

<p>只会在类的实现代码中用到的私有方法也可以声明在<code>“class-continuation分类”</code>中。这么做比较合适，因为它描述了那些只在类实现代码中才会使用的方法。上述的私有方法加上了<code>p_</code>前缀。</p>

<h2 id="toc_3">第四种用法</h2>

<p>当我们想要把对象所遵守的协议视为私有，就可以在<code>“class-continuation分类”</code>中声明。例如：</p>

<pre><code class="language-objc">#import &quot;EOCPerson•h&quot;
#import &quot;EOCSecretDelegate.h&quot;
@interface EOCPerson () &lt;EOCSecretDelegate&gt; 
@end
@implementation EOCPerson
    /*.....*/
@end
</code></pre>

<h2 id="toc_4">要点</h2>

<ul>
<li><p>通过<code>“class-continuation分类”</code>向类中新增实例变量。</p></li>
<li><p>如果某属性在主接口中声明为“只读”，而类的内部又要用设置方法修改此属性，那么就在<code>“class-continuation分类”</code>中将其扩展为“可读写”</p></li>
<li><p>把私有方法的原型声明在<code>“class-continuation分类”</code>里面。</p></li>
<li><p>若想使类所遵循的协议不为人所知，则可于<code>“class-continuation分类”</code>中声明。 </p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第26条 不要在分类中声明属性]]></title>
    <link href="https://lockxmonk.github.io/15042285213204.html"/>
    <updated>2017-09-01T09:15:21+08:00</updated>
    <id>https://lockxmonk.github.io/15042285213204.html</id>
    <content type="html"><![CDATA[
<p>属性是封装数据的方式（参见第6条)。尽管从技术上说，分类里也可以声明属性，但这种做法还是要尽量避免。</p>

<p>原因在于，除了<code>“class-continuation分类”</code>（参见第27条）之外，其他分类都无法向类中新增实例变量，因此，它们无法把实现属性所需的实例变量合成出来。如果我们在分类中声明了一个<code>friends</code>属性。会提示我们</p>

<blockquote>
<p>warning: property  &#39;friends&#39; requires method &#39;friends&#39; to be defined - use @dynamic or provide a method implementation in this category [-Wobjc-property-implementation]</p>

<p>warning: property &#39;friends&#39; requires method &#39;setFriends:&#39; to be defined - use @dynamic or provide a method implementation in this category [-Wobjc-property-implementation]</p>
</blockquote>

<p>说明系统没有为我们自动合成属性的<code>set</code>和<code>get</code>方法。我们要自己在分类中去实现，可以把存取方法声明为<code>@dynamic</code>, 也就是说，这些方法等到运行期再提供，编译器目前是看不见的。如果决定使用消息转发机制（参见第12条）在运行期拦截方法调用，并提供其实现，那么或许可以采用这种做法。</p>

<p>当然我们也可以使用关联对象的方法。<strong><mark>但是还是不建议我们在分类中定义封装数据的属性。</mark></strong></p>

<p>正确做法是把所有属性都定义在主接口里。类所封装的全部数据都应该定义在主接口中，这里是唯一能够定义实例变量(也就是数据）的地方。而属性只是定义实例变量及相关存取方法所用的“语法糖”，所以也应遵循同实例变量一样的规则。<mark>至于分类机制,则应将其理解为一种手段，目标在于扩展类的功能，而非封装数据。</mark></p>

<p>但是有时候，只读属性（readonly）可以在分类中使用，但是我们要手动实现它的<code>get</code>方法。当然我们不建议搞特殊。最好还是在主接口中声明。然后在分类中声明一个获取方法，来获取数据。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>把封装数据所用的全部属性都定义在主接口里。</li>
<li>在<code>“class-contimiation分类”</code>之外的其他分类中，可以定义存取方法，但尽量不要定义属性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第25条 总是为第三方类的分类名称加前缀]]></title>
    <link href="https://lockxmonk.github.io/15042274785369.html"/>
    <updated>2017-09-01T08:57:58+08:00</updated>
    <id>https://lockxmonk.github.io/15042274785369.html</id>
    <content type="html"><![CDATA[
<p>分类机制通常用于向无源码的既有类中新增功能。这个特性极为强大，但在使用时也很容易忽视其中可能产生的问题。</p>

<p>我们在分类中添加方法，系统在运行期时会将分类中的方法加入类中。运行期系统会把分类中所实现的每个方法都加入类的方法列表中。<strong><font color=red>如果类中本来就有此方法，而分类又实现了一次，那么分类中的方法会覆盖原来那一份实现代码。实际上可能会发生很多次榭盖，比如某个分类中的方法覆盖了“主实现”中的相关方法，而另外一个分类 中的方法又覆盖了这个分类中的方法。多次覆盖的结果以最后一个分类为准。</font></strong></p>

<p>所以我们为了解决此问题，一般做法是：<strong><font color=red>以命名空间来区别各个分类的名称与其中所定义的方法。</font></strong>我们这里的命名空间只是在相关名称前都加上公用的前缀。</p>

<p>所以我们举例来说就是这样的：</p>

<pre><code class="language-objc">@interface NSString (ABC_HTTP)
//Encode a string with URL encoding 
-(NSString*) abc_urlEncodedStiring;

// Decode a URL ©ncodeci string
-(NSString*) abc_urlDecodedString;
@end
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li>向第三方类中添加分类时，总应给其名称加上你专用的前缀。</li>
<li>向第三方类中添加分类时，总应给其中的方法名加上你专用的前缀。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指针问题]]></title>
    <link href="https://lockxmonk.github.io/15041689865677.html"/>
    <updated>2017-08-31T16:43:06+08:00</updated>
    <id>https://lockxmonk.github.io/15041689865677.html</id>
    <content type="html"><![CDATA[
<pre><code>#include &lt;stdio.h&gt;  
   
int main() {  
      
    int num = 10;  
    int *p1 = &amp;num//p1存储num的地址  
    int **p2 = &amp;p1;//p2存储p1的地址  
    int ***p3 = &amp;p2;//p3存储p2的地址  
      
    *p1 = 100;//*p1取出num变量  
    **p2 = 200;//**p2取出num变量  
    ***p3 = 300;//***p3也是取出num变量  
    printf(&quot;num = %d\n&quot;,num);  
    printf(&quot;num = %d\n&quot;,***p3);  
      
    return 0;  
}  
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[消息转发机制的简单实现]]></title>
    <link href="https://lockxmonk.github.io/15041475233104.html"/>
    <updated>2017-08-31T10:45:23+08:00</updated>
    <id>https://lockxmonk.github.io/15041475233104.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第一种</h2>

<p>首先我们来实现这两个方法：<br/><br/>
+(BOOL)resolveInstanceMethod:    (SEL)sel</p>

<p>+(BOOL)resolveClassMethod:(SEL)sel</p>

<p>这两个方法用于方法的动态解析，当一个对象执行一个方法时，发现没有找到所对应的实现。这是就要靠上面的方法来动态添加实现了</p>

<p>举例来说：</p>

<pre><code class="language-objc">//
//  Person.h
//  消息转发

#import &lt;Foundation/Foundation.h&gt;

@interface Person : NSObject
//接口中声明一个方法
-(void)run;

@end

//
//  Person.m
//  消息转发


#import &quot;Person.h&quot;
#import &lt;objc/runtime.h&gt;
@implementation Person //在部署的时候我们没有实现接口中声明的run方法


//编写C函数实现代码
void addrun (id self, SEL _cmd){
    NSLog(@&quot;%@　%s&quot;,self,sel_getName(_cmd));
}

+(BOOL)resolveInstanceMethod:(SEL)sel{
    if (sel ==@selector(run)) {
    //如果响应run方法，我们动态将上面实现的addrun方法添加到当前类中。
        class_addMethod(self, sel, (IMP)addrun, &quot;v@:&quot;);
    }
    
    return [super resolveInstanceMethod:sel];
}

@end

//  main.m
//  消息转发


#import &lt;Foundation/Foundation.h&gt;
#import &quot;Person.h&quot;
int main(int argc, const char * argv[]) {
    @autoreleasepool {
    //执行代码
        Person *man = [Person new];
        [man run];
    }
    return 0;
}
</code></pre>

<p>结果为：<img src="media/15041475233104/15041480973843.jpg" alt=""/><br/>
说明执行了我们添加的那个方法，而并没有报错。</p>

<h2 id="toc_1">第二种</h2>

<p>我们可以动态的向类中添加方法来解决无选择子的问题，我们也可以选择转换接受者来选择可以处理该选择子的对象。</p>

<p>首先当我们，没有处理第一种方法的时候，运行期系统会给我们第二个机会，询问是否有备用的接受者。我们就要实现<code>orwardingTargetForSelector</code>了</p>

<p>我们举例来看：</p>

<p>首先我们先创建一个新类Car，并且创建一个<code>run</code>方法：</p>

<p><img src="media/15041475233104/15041487720558.jpg" alt=""/></p>

<p>然后在Person.m中，不对<code>resolveInstanceMethod</code>进行任何处理，在<code>forwardingTargetForSelector</code>中返回一个<code>Car</code>实例：<br/>
<img src="media/15041475233104/15041488721835.jpg" alt=""/></p>

<p>然后继续执行<code>main.m</code>文件，运行为：<br/>
<img src="media/15041475233104/15041489461207.jpg" alt=""/></p>

<p>说明系统已经将所要实现方法的对象转换为<code>Car</code>的实例对象。</p>

<h2 id="toc_2">第三种</h2>

<p>如果前两种我们都没有实现的话，就会进入第三种，执行完整的消息转发机制。</p>

<p>就会调用两个方法<code>methodSignatureForSelector</code>和<code>forwardInvocation</code></p>

<p><code>methodSignatureForSelector</code>方法用来指定方法签名，返回<code>nil</code>表示不处理，否则会进入下一步调用<code>forwardInvocation</code>方法。其中这个签名就是给<code>forwardInvocation</code>中的参数<code>NSInvocation</code>调用的。</p>

<p><img src="media/15041475233104/15041604848181.jpg" alt=""/></p>

<p>开头我们要找的错误<code>unrecognized selector sent to instance</code>原因，原来就是因为<code>methodSignatureForSelector</code>这个方法中，由于没有找到<code>run</code>对应的实现方法，所以返回了一个空的方法签名，最终导致程序报错崩溃。</p>

<p>所以我们需要做的是自己新建方法签名，再在<code>forwardInvocation</code>中用你要转发的那个对象调用这个对应的签名，这样也实现了消息转发。</p>

<p>关于生成签名的类型<code>&quot;v@:&quot;</code>解释一下。每一个方法会默认隐藏两个参数，<code>self</code>、<code>_cmd</code>，<code>self</code>代表方法调用者，<code>_cmd</code>代表这个方法的<code>SEL</code>，签名类型就是用来描述这个方法的返回值、参数的，<code>v</code>代表返回值为<code>void</code>，<code>@</code>表示<code>self</code>，<code>:</code>表示<code>_cmd</code>。</p>

<p><strong>所以第二个和第三个字符必须是<code>“@:”</code> ，第一个字符是返回类型.</strong></p>

<p><strong>具体的可以看一下了解</strong>：<a href="https://developer.apple.com/library/etc/redirect/xcode/content/1189/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Type Encodeing</a></p>

]]></content>
  </entry>
  
</feed>
