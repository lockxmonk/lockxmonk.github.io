<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LZH007]]></title>
  <link href="https://lockxmonk.github.io/atom.xml" rel="self"/>
  <link href="https://lockxmonk.github.io/"/>
  <updated>2017-09-09T15:38:22+08:00</updated>
  <id>https://lockxmonk.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[第四十二条 多用GCD，少用performSelector系列方法]]></title>
    <link href="https://lockxmonk.github.io/15050942669581.html"/>
    <updated>2017-09-11T09:44:26+08:00</updated>
    <id>https://lockxmonk.github.io/15050942669581.html</id>
    <content type="html"><![CDATA[
<p><code>Objective-C</code>本质上是一门非常动态的语言（参见第11条)，<code>NSObject</code>定义了几个方法, <mark>令开发者可以随意调用任何方法。这几个方法可以推迟执行方法调用，也可以指定运行方法所用的线程。</mark>这些功能原来很有用，但是在出现了<code>GCD</code>之后，这些功能就尽量不要使用了，尽量用<code>GCD</code>来取代他们。</p>

<p>其中他们又如下几个方法：</p>

<pre><code class="language-objc">-(id)performSelector : (SEL) selector
//可以传两个参数
-(id)performSelector : (SEL) selector
           withObject:（id）objectA
           withObject:（id）objectB
//传一个参数
-(id)performSelector : (SEL) selector
           withObject:（id）object
</code></pre>

<p>具体用法如：</p>

<pre><code class="language-objc">[object performSelector: @selector(selectorName)];

[object performSelector: @selector(setValue:)
             withObject: newValue];
</code></pre>

<p>上面的用法，会有很多局限，比如在<code>ARC</code>下，会发出警告表示：<code>也许会内存泄露</code>，这是因为编译器并不知道将要的选择子是什么，因此，也就不了解其方法签名及返回值，甚至连是否有返回值都不清楚，而且由于编译器不知道方法名，所以就没办法运用<code>ARC</code>的内存管麵则来判定返回值是不是该释放。鉴于此，<code>ARC</code>采用了比较谨慎的做法，就是不添加释放操作。然而这么<br/>
做可能导致内存泄漏，因为方法在返回对象时可能已经将其保留了。</p>

<p>另一个局限性是：返回值只能是<code>void</code>或对象类型。尽管所要执行的 选择子也可以返回<code>void</code>，但是<code>performSelector</code>方法的返回值类型毕竟是<code>id</code>。如果想返回整数或浮点数等类型的值，那么就需要执行一些复杂的转换操作了，而这种转换很容易出错。</p>

<p>第三个局限是：这个方法最多只能传递两个参数，当选择子得到参数超过两个时，只能运用字典来传送数据（但是容易增加开销和造成bug）。</p>

<p>所以我们的解决方法是：我们使用<code>块</code>来代替，并且<code>performSelector</code>系列方法都可以使用<code>GCD</code>机制使用块来实现。我们来举几个例子说明：</p>

<p>如果我们想要延后执行某个任务：</p>

<pre><code class="language-objc">//Using performSelector:withObjectrafterDelay: 
[self performSelector:@selector(doSomething)
           withObject:nil 
           afterDelay:5.0];

//Using dispatch_after
dispatch_time_t time = dispatch_time(DISPATCH_TIME_NOW, (int64 t)(5.0 * NSEC PER SEC));

dispatch_after(time, dispatch_get_main—queue(), ^(void){
     [self doSomething];
})；
</code></pre>

<p>后者想要在主线程执行某个任务：</p>

<pre><code class="language-objc">// Using performSelectorOnMainThread: withObject .-waitUntilDone :
[self performSelectorOnMainThread:@selector(doSomething)
                      withObject:nil 
                      waitUntilDone:NO];
//Using dispatch_async
// (or if waitUntilDone is YES, then dispatchasync) 
dispatch_async(dispatch_get_main_queue(), ^{
        [self doSomething];
});
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li><code>performSelector</code>系列方法在内存管理方面容易有疏失。它无法确定将要执行的选择子具体是什么，因而<code>ARC</code>编译器也就无法插入适当的内存管理方法。</li>
<li><code>performSelector</code>系列方法所能处理的选择子太过局限了，选择子的返回值类型及发送给方法的参数个数都受到限制。</li>
<li>如果想把任务放在另一个线程上执行，那么最好不要用<code>performSelector</code>系列方法，而是应该把任务封装到块里，然后调用大中枢派发机制的相关方法来实现。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十一条 多用派发队列，少用同步锁]]></title>
    <link href="https://lockxmonk.github.io/15049238737460.html"/>
    <updated>2017-09-09T10:24:33+08:00</updated>
    <id>https://lockxmonk.github.io/15049238737460.html</id>
    <content type="html"><![CDATA[
<p>在<code>OC</code>中，如果有多个线程要执行同一份代码，那么有时可能会出问题。这种情况下，通常要使用锁来实现某种同步机制。在<code>GCD</code>出现之前，有两种办法，第一种是采用内置的<code>“同步块”（synchronization block)</code>:</p>

<pre><code class="language-objc">-(void)synchronizedMethod {
    @synchronized(self) {
    //Safe
    }
}
</code></pre>

<p>这种写法会根据给定的对象，自动创建一个锁，并等待块中的代码执行完毕。执行到这段代码结尾处，锁就释放了。在本例中，同步行为所针对的对象是<code>self</code>。这么写通常没错，因为它可以保证每个对象实例都能不受干扰地运行其<code>synchronizedMethod</code>方法。然而，滥用 <code>@SynChronized(self)</code>则会降低代码效率，因为共用同一个锁的那些同步块，都必须按顺序执行。若是在<code>self</code>对象上频繁加锁，那么程序可能要等另一段与此无关的代码执行完毕，才能继续执行当前代码，这样做其实并没有必要。</p>

<p>另一种加锁的办法是<code>NSLock</code>对象：</p>

<pre><code class="language-objc">_lock = [[NSLockalloc] init];

-(void)synchronizedMethod {
    [_lock lock];
    //Safe
    [_lock unlock];
}
</code></pre>

<p>也可以使用<code>NSRecursiveLock</code>这种<code>“递归锁’（recursive lock)</code>，线程能够多次持有该锁，而不会出现<code>死锁(deadlock)</code>现象。</p>

<p>虽然上面两种方法可以用，但是也有一些缺陷，比如：在某些情况下，同步快会导致死锁，另外，效率不是很高。而如果直接使用锁对象的话，一旦遇到死锁，就会非常麻烦。</p>

<p><strong>所以我们一般使用GCD来替代，它的优点就是可以简单，高效的为代码加锁</strong>。属性因为需要经常性的同步，所以当要线程安全的时候，加上<code>“atomic”</code>特质来修饰属性。</p>

<p>但是如果我们想要自己实现属性访问方法时，可以：</p>

<pre><code class="language-objc">-(NSString*)someString {
    @synchronized(self) {
        return _someString;
    }
}
-(void)setSomeString:(NSString*)someString { 
    @synchronized(self) {
        _someString = someString;
    }
}
</code></pre>

<p>但是滥用<code>@synchronized(self)</code>会很危险，因为所有同步块都会彼此抢夺同一个锁。要是有很多个属性都这么写的话，那么每个属性的同步块都要等其他所有同步块执行完毕才能执行，这也许并不是开发者想要的效果。我们只是想令每个属性各自独立地同步。</p>

<p><strong><em>而且上述做法并不是绝对的线程安全。因为在两次访问操作之间，其他线程可能会写入新的属性值。</em></strong></p>

<p>这里我们使用<code>“串行同步队列”（serial synchronization queue)</code>。将读取操作及写入操作都安排在同一个队列里，即可保证数据同步。：</p>

<pre><code class="language-objc">_syncQueue = dispatch_queue_create(&quot;com.effectiveobjectivec.syncQueue&quot;, NULL);

-(NSString*)someString {
    _block NSString *localSomeString;
    dispatch_sync(_syncQueue, ^{
        localSomeString = _someString;
    })；
    return localSomeString;
}

-(void)setSomeString:(NSString*)someString { 
    dispatch_sync(_syncQueue,^{
        _someString = someString;
    });
}
</code></pre>

<p>此模式的思路是：把设置操作与获取操作都安排在序列化的队列里执行（串行同步队列并不会拓展新的线程），这样的话，所有针对属性的访问操作就都同步了。（关于GCD的串行队列/并发队列与iOS多线程这里不详细讲解了，后续深入探讨）。</p>

<p>多个获取方法可以并发执行，而获取方法与设置方法之间不能并发执行，利用这个特点，还能写出更快一些的代码来。此时正可以体现出<code>GCD</code>写法的好处。用同步块或锁对象，是无法轻易实现出下面这种方案的。这次不用串行队列，而改用<code>并发队列（concurrentquene)</code>:</p>

<pre><code class="language-objc">_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

-(NSString*}someString {
    __block NSString *localSomeString; 
    dispatch_sync( _syncQueue, ^{
        localSomeString = _someString;
    })； 
    return localSomeString;
}

-(void)setSomeString:(NSString*)someString { 
        dispatch_async(syncQueue, ^{
        _someString = someScring;
    });
}
</code></pre>

<p>光是上面这些代码还不够，所有读取操作与写入操作都会在同一个队列上执行，不过由于是并发队列，所以读取与写人操作可以随时执行。而我们恰恰不想让这些操作随意执行。这就要用到<code>栅栏（barrier)</code>，是<code>GCD</code>中的一个功能：</p>

<pre><code class="language-objc">void dispatch_barrier_async(dispatch_queue_t queue,
                            dispatch_block_t block);
void dispatch_barrier_sync(dispatch_queue_t queue,
                            dispatch_block_t block);
</code></pre>

<p><strong><font color=red>在队列中，栅栏块必须单独执行，不能与其他块并行。这只对并发队列有意义，因为串行队列中的块总是按顺序逐个来执行的。并发队列如果发现接下来要处理的块是个栅栏块 (barrier block)，那么就一直要等当前所有并发块都执行完毕，才会单独执行这个栅栏块。待栅栏块执行过后，再按正常方式继续向下处理。</font></strong></p>

<p>在本例中，可以用栅栏块来实现属性的设置方法。在设置方法中使用了栅栏块之后，对属性的读取操作依然可以并发执行，但是写人操作却必须单独执行了。例如：</p>

<pre><code class="language-objc">_syncQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);

-(NSString*}someString {
    __block NSString *localSomeString; 
    dispatch_sync( _syncQueue, ^{
        localSomeString = _someString;
    })； 
    return localSomeString;
}

-(void)setSomeString:(NSString*)someString { 
        dispatch_barrier_async(syncQueue, ^{
        _someString = someScring;
    });
}
</code></pre>

<p><strong>执行的顺序如图所示：</strong><br/>
<img src="media/15049238737460/15049413869385.jpg" alt=""/></p>

<p>测试一下性能，你就会发现，这种做法肯定比使用串行队列要快。注意，设置函数也可以改用同步的<code>栅栏块(synchronous barrier)</code>来实现，那样做可能会更髙效，其原因刚才已经 解释过了。<strong><font color=red>最好还是测一测每种做法的性能，然后从中选出最适合当前场景的方案</font></strong>。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>派发队列可用来表述<code>同步语义（synchronization semantic)</code>,这种做法要比使用<code>@synchronized块</code>或<code>NSLock</code>对象更简单。</li>
<li>将同步与异步派发结合起来，可以实现与普通加锁机制一样的同步行为，而这么做却不会阻塞执行异步派发的线程。</li>
<li>使用同步队列及栅栏块，可以令同步行为更加髙效。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第四十条 用块引用其所属对象时不要出现保留环]]></title>
    <link href="https://lockxmonk.github.io/15045739362959.html"/>
    <updated>2017-09-05T09:12:16+08:00</updated>
    <id>https://lockxmonk.github.io/15045739362959.html</id>
    <content type="html"><![CDATA[
<p>我们使用块的时候，如果不仔细思索，很容易出现“保留环”，我们来举个例子，下面这个类就提供了一套接口，调用者可由此从某个URL中下载数据。在启动获取器时，可设置 <code>completion handler</code>,这个块会在下载结束之后以回调方式执行。为了能在下载完成后通过<code>p_requestCompleted</code>方法执行调用者所指定的块，这段代码需要把<code>completion handler</code>保存到实例变量里面。</p>

<pre><code class="language-objc">// EOCNetwor kFetcher. h
#import &lt;Foundation/Foundation.h&gt;
typedef void(^EOCNetworkFetcherCompletionHandler) (NSData *data);

@interface EOCNetworkFetcher : NSObject 
@property (nonatomic, strong, readonly) NSURL *url;
-(id)initWithURL:(NSURL^)url;
-(void)startWithCompletionHandler:(EOCNetworkFetcherCompletionHandler)completion;



// EOCNetworkFetcher.m
#import &quot;EOCNetworkFetcher.h&quot;
@interface EOCNetworkFetcher ()
@property(nonatomic, strong, readwrite) NSURL *url;
@property(nonatomic, copy) EOCNetworkFetcherCompletionHandler completionHandler; (nonatomic, strong) NSData *downloadedData;
@implementation EOCNetworkFetcher

-(id)initWithURL:(NSURL*)url {
    if ((self = [super init])) {
        _url = url;
    }
    return sel£;
}

-(void)startWithCompletionHandler:
        (EOCNetworkFetcherCompletionHandlei) completion
{
    self.completionHandler = completion;
    //Start the request
    // Request sets downloadedData property
    //When request is finished, p_requestCompleted is called
}

-(void)p_requestCompleted { 
    if (_completionHandler){ 
    _completionHandler(_downloadedData);
    }
}
@end
</code></pre>

<p>某个类可能会创建这种网络数据获取器对象，并用其从<code>URL</code>中下载数据：</p>

<pre><code class="language-objc">@implemantation EOCClass {
    EOCNetworkFetcher *_networkFetcher;
    NSData *_fetchedData;
}
-(void)downloadData {
    NSURL *url = [[NSURL alloc] initWithString:
                    @&quot;http://www.example.com/something.dat&quot;];
    _networkFetcher = [[EOCNetworkFetcher alloc] initWithURL:url];
    [_networkFetcher startWithCompletionHandler:^(NSData *data){
        NSLog (@&quot;Request URL %@ finished&quot;, _networkFetcher.url);
        _fetchedData = data;
    }]；
}
@end
</code></pre>

<p>这段代码没有什么问题，但是<strong><font color=red>里面有一个隐蔽的保留环</font></strong>，因为<code>completion handler</code>块要设置<code>_fetchedData</code>实例变量,所以它必须捕获<code>self</code>变量（变量捕获问题详见第37条。这就是说，<code>handler</code>块保留了创建网络数据获取器的那个<code>EOCClass</code>实例。而<code>EOCClass</code>实例则通过<code>strong</code>实例变量保留了获取器，最后，获取器对象又保留了<code>handler</code>块。</p>

<p>如下图所示：<br/>
<img src="media/15045739362959/15045760282053.jpg" alt=""/></p>

<p>要打破保留环也很容易：要么令<code>_networkFetcher</code>实例变量不再引用获取器，要么令获取器的<code>completionHaiidler</code>属性不再持有<code>handler</code>块。在网络数据获取器这个例子中，应该等 <code>completion handler</code>块执行完毕后，再去打破保留环，以便使获取器对象在<code>handler</code>块执行期间保持存活状态。比方说，<code>completion handler</code>块的代码可以这么修改：</p>

<pre><code class="language-objc">[_networkFetcher startWithCompletionHandler:^(NSData *data){
        NSLog (@&quot;Request URL %@ finished&quot;, _networkFetcher.url);
        _fetchedData = data;
        _networkFetcher = nil;
    }]；
</code></pre>

<p>如果设计<code>API</code>时用到了<code>completion handler</code>这样的同调块，那么很容易形成保留环，所以必须意识到这个重要问题。一般只要适时的清理环中的某个引用即可。</p>

<p>但是上例如果不执行<code>completion handler</code>，那么保留环就无法打破，于是内存就会泄漏。</p>

<p>所以我们使调用<code>API</code>的那段代码无须在执行期间保留指向网络数据获取器的引用，而是设定一套机制，令获取器对象自己设法保持存活。要想保持存活，获取器对象可以 在启动任务时把自己加到全局的<code>collection</code>中（比如用<code>set</code>来实现这个<code>collection</code>),待任务完成后，再移除。</p>

<p>所以我们改写一下：</p>

<pre><code class="language-objc">-(void)downloadData {
    NSURL *url = [[NSURL alloc] initWithString:
                    @&quot;http://www.example.com/something.dat&quot;];
    EOCNetworkFetcher *networkFetcher = [[EOCNetworkFetcher alloc] initWithURL:url];
    [networkFetcher startWithCompletionHandler:^(NSData *data){
        NSLog (@&quot;Request URL %@ finished&quot;, networkFetcher.url);
        _fetchedData = data;
    }]；
}
</code></pre>

<p>大部分网络通信库都采用这种办法，因为假如令调用者自己来将获取器对象保持存活的话，他们会觉得麻烦。<code>Twitter</code>框架的<code>TWRequest</code>对象也用这个办法。</p>

<p>但是上面这个例子仍然有保留环，<code>completion handler</code>块会通过获取器对象来引用其中的<code>URL</code>,之后获取器会反过来经由<code>CompletionHandler</code>属性保留这个块。我们把块保留在属性里的目的是想稍后来使用这个块。所以一旦我们运行过<code>completion handler</code>之后就可以将它释放了。我们消除保留环可以按照下面修改：</p>

<pre><code class="language-objc">-(void)p_requestCompleted { 
    if (_completionHandler){ 
        _completionHandler(_downloadedData);
    }
    self.completionHandler = nil;
}
</code></pre>

<p>这样只要下载请求执行完毕，保留环就解除了。</p>

<p>请注意，之所以要在<code>start</code>方法中把<code>completion handler</code>作为参数传进去，这也是一条重要原因。假如把<code>completion handler</code>暴露为获取器对象的公共属性，那么就不便在执行完下载请求之后直接将其淸理掉了，因为既然已经把<code>handler</code>作为属性公布了，那就意味着调用者可以自由使用它，若是此时又在内部将其清理掉的话，则会破坏<code>“封装语义” (encapsulation semantic)</code>。</p>

<p><font color=red>这两种保留环都很容易发生。使用块来编程时，一不小心就会出现这种<code>bug</code>,反过来说，只要小心谨慎，这种问题也很容易解决。关键在于，要想清楚块可能会捕获并保留哪些对象。如果这些对象又直接或间接保留了块，那么就要考虑怎样在适当的时机解除保留环。</font></p>

<h2 id="toc_0">要点</h2>

<ul>
<li>如果块所捕获的对象直接或间接地保留了块本身，那么就得当心保留环问题。</li>
<li>一定要找个适当的时机解除保留环，而不能把责任推给API的调用者。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十九条 用handler块降低代码分散程度]]></title>
    <link href="https://lockxmonk.github.io/15045090813380.html"/>
    <updated>2017-09-04T15:11:21+08:00</updated>
    <id>https://lockxmonk.github.io/15045090813380.html</id>
    <content type="html"><![CDATA[
<p>iOS中我们经常采用异步执行任务的方式，来避免主线程的阻塞。因为<code>“系统监控器”（system watchdog)</code>在发现某个应用程序的主线程已经阻塞了一段时间之后，就会令其终止。导致程序崩溃。</p>

<p>但是异步方法执行任务后，需要以某种手段来通知相关代码。实现这一功能有很多方法，常用的技巧是设计一个委托协议，令关注此事件的对象遵从该协议。对象成为<code>delegate</code>之后，就可以在相关事件发生时（例如某个异步任务执行完毕时）得到通知了。例如：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@class EOCNetworkFetcher;
@protocol EOCNetworkFetcherDelegate &lt;NSObject&gt;
-(void)networkFetcher:(EOCNetworkFetcher*)networkFetcher 
    didFinishWithData:(NSData*)data;
@end

@interface EOCNetworkFetcher : NSObject 
@property (nonatomic, weak) id &lt;EOCNetworkFetcherDelegate&gt; delegate; 
-(id)initWithURL:(NSURL*)url;
-(void)start;
@end
</code></pre>

<p>其它类可以像下面这样来使用：</p>

<pre><code class="language-objc">-(void)fetchFooData {
    NSURL *url = [[NSURL alloc] initWithString:
                    @&quot;http: //www.example.com/foo.dat&quot;]; 
    EOCNetworkFetcher *fetcher = [[EOCNetworkFetcher alloc] initWithURL:url]; 
    fetcher.delegate = self;
    [fetcher start];
}

-(void)networkFetcher:(EOCNetworkFetcher*)networkFetcher didFinishWithData:(NSData*)data
{
    _fetchedFooData = data;
}
</code></pre>

<p>上面在<code>EOCNetworkFetcher</code>类中声明了一个协议，协议中有一个方法用于通知对象已获取完数据。</p>

<p>之后想要获取到通知的对象遵守该协议，成为它的委托对象。这样在执行完<code>start</code>方法之后，<code>EOCNetworkFetcher</code>会调用委托对象所遵守的协议方法，让委托对象获取收到的数据（也就是通知它）。</p>

<p>上面这种做法没有错误，确实可行。但是如果我们改用块来写的话，代码会更清晰。就是把<code>completion handler</code>定义为块类型，将其当作参数直接传给<code>start</code>方法:</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

typedef void(^EOCNetworkFetcherCompletionHandler)(NSData *data);
@interface EOCNetworkFetcher : NSObject 
-(id)initWithURL:(NSURL*)url;
-(void)startWithCompletionHandler:
            (EOCNetworkFetcherCompletionHandler)handler;
@end
</code></pre>

<p>这和使用委托协议很想，不过多了个好处，就是可以在调用<code>start</code>方法时直接以内联形式 定义<code>completion handler</code>,以此方式来使用<code>“网络数据获取器”（network fetcher)</code>,可以令代码比原先易懂很多。例如，下面这个类就以块的形式来定义<code>completion handler</code>,并以此为参数调用<code>API</code>:</p>

<pre><code class="language-objc">-(void)fetchFooData {
NSURL *url = [[NSURL alloc] initWithString:
@&quot;http://www.example.com/foo.dat&quot;]; 
EOCNetworkFetcher *fetcher = [[EOCNetworkFetcher alloc] initWithURL:url];
[fetcher startWithCompletionHandler:^(NSData *data){ 
    _fetchedFooData = data;
})；
</code></pre>

<p>与使用委托模式的代码相比，用块写出来的代码显然更为整洁。异步任务执行完毕后所需运行的业务逻辑，和启动异步任务所用的代码放在了一起。而且，由于块声明在创建获取器的范围里，所以它可以访问此范围内的全部变量。</p>

<p>这种写法其实最重要的用途是处理错误。现在很多基于块的<code>API</code>都使用块来处理错误，可以分别用两个处理程序来处理操作失败的情况和操作成功的情况。也可以把处理失败情况所需的代码，与处理正常情况所用的代码，都封装到同一个<code>completion handler</code>块里,我们建议使用后者，因为苹果公司也是这样设计<code>API</code>的。我们举例来说：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@class EOCNetworkFetcher;
typedef void(^EOCNetworkFetcherCompletionHandler) 
                                (NSData *data, NSError *error);

@interface EOCNetworkFetcher : NSObject
-(id)initWithURL:(NSURL*)url;
-(void)startWithCompletionHandler:
                (EOCNetworkFetcherCompletionHandler)completion;
@end
</code></pre>

<p>此种API的调用方式如下:</p>

<pre><code class="language-objc">EOCNetworkFetcher *fetcher =
        [[EOCNetworkFetcher alloc] initWithURL:url]; 
[fetcher startWithCompletionHander:
    ^(NSData *data, NSError *error){ 
    if (error) {
        //Handle failure 
    }else {
        // Handle success
    }
}];
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li>在创建对象时，可以使用内联的<code>handler</code>块将相关业务逻辑一并声明。</li>
<li>在有多个实例需要监控时，如果采用委托模式，那么经常需要根据传入的对象来切 换，而若改用<code>handler</code>块来实现，则可直接将块与相关对象放在一起。</li>
<li>设计API时如果用到了<code>handler</code>块，那么可以增加一个参数，使调用者可通过此参数来决定应该把块安排在哪个队列上执行。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十八条 为常用的块类型创建typedef]]></title>
    <link href="https://lockxmonk.github.io/15044922241087.html"/>
    <updated>2017-09-04T10:30:24+08:00</updated>
    <id>https://lockxmonk.github.io/15044922241087.html</id>
    <content type="html"><![CDATA[
<p>我们在定义一个块时，语法是这样的：</p>

<pre><code class="language-objc">int^(variableName)(BOOL flag,int value) = ^(BOOL flag, int value){
    //Implemention
    return someInt;
}
</code></pre>

<p>此块接受两个类型分别为<code>BOOL</code>及<code>int</code>的参数，并返回类型为<code>int</code>的值。并且把它赋给了一个变量。</p>

<p>与其他类型的变量不同，在定义块变量时，要把变量名放在类型之中，而不要放在右侧。这种语法非常难记，也非常难读。<strong><font color=red>鉴于此，我们应该为常用的块类型起个别名，</font></strong>尤其是打算把代码发布成API供他人使用时，更应这样做。开发者可以起个更为易读的名字来表示块的用途，而把块的类型隐藏在其后面。例如：</p>

<pre><code class="language-objc">//定义
typedef int(^EOCSomeBlock)(BOOL flag, int value);
</code></pre>

<p>声明变量时，要把名称放在类型中间，并在前面加上<code>“^”</code>符号，而定义新类型时也得这么做。上面这条语句向系统中新增了一个名为<code>EOCSomeBlock</code>的类型。此后，不用再以复杂的块类型来创建变量了，直接使用新类型即可：</p>

<pre><code class="language-objc">EOCSomeBlock block = ^(BOOL flag, int value){
    // Implementation
};
</code></pre>

<p><strong><mark>这次代码读起来就顺畅多了：与定义其他变量时一样，变量类型在左边，变量名在右边。</mark></strong></p>

<p>我们可以利用这个将使用块的API做的简单易用些，例如：</p>

<pre><code class="language-objc">-(void)startWithCompletionHandler:
            (void(^)(NSData *data, NSError *error))completion;
</code></pre>

<p>上面代码接受了一个块作为参数，所以我们可以用上面定义块的方法来改写它：</p>

<pre><code class="language-objc">typedef void(^EOCCompletionHandler)(NSData *data, NSError *error);

-(void)startWithCompletionHandler: (EOCCompletionHandler)completion;
</code></pre>

<p>现在参数看上去就简单多了，而且易于理解。</p>

<p>我们在定义块的时候要注意，最好在使用块类型的类中定义这些<code>typedef</code>，而且还应该把这个类的名字加在由<code>typedef</code>所定义的新类型名前面，这样可以阐明块的用途。还可以用<code>typedef</code>给同一个块签名类型创建数个别名。在这件事上，多多益善。因为，开发者看到类型的别名以及签名中的参数之后，可以很容易的理解类型的用途。</p>

<p>与此相似，如果有好几个类都要执行相似但各有区别的异步任务，而这几个类又不 能放人同一个继承体系，那么，每个类就应该有自己的<code>completion handler</code>类型。这几个<code>completion handler</code>的签名也许完全相同，但最好还是在每个类里都各自定义一个别名，而不 要共用同一个名称。反之，若这些类能纳人同一个继承中，则应该将类型定义语句放在超类中，以供各子类使用。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>以<code>typedef</code>重新定义块类型，可令块变量用起来更加简单。</li>
<li>定义新类型时应遵从现有的命名习惯，勿使其名称与别的类型相冲突。</li>
<li>不妨为同一个块签名定义多个类型别名。如果要重构的代码使用了块类型的某个别名，那么只需修改相应<code>typedef</code>中的块签名即可，无须改动其他<code>typedef</code>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第三十七条 理解“块”这一概念]]></title>
    <link href="https://lockxmonk.github.io/15043212815193.html"/>
    <updated>2017-09-02T11:01:21+08:00</updated>
    <id>https://lockxmonk.github.io/15043212815193.html</id>
    <content type="html"><![CDATA[
<p>首先，块与函数类似，只不过是直接定义在另一个函数里的，和定义它的那个函数共享同一 个范围内的东西。块用<code>“^”</code>符号来表示，后面跟着一对花括号，括号里面是块的实现代码。 例如，下面就是个简单的块：</p>

<pre><code class="language-objc">^{
    //Block implementation here
}
</code></pre>

<p>块其实就是个值，而且自有其相关类型。与<code>int</code>、<code>float</code>或<code>Objective-C</code>对象一样，也可以把块赋给变量,然后像使用其他变量那样使用它。块类型的语法与函数指针近似。下面列出的这个块很简单，没有参数，也不返回值：</p>

<pre><code class="language-objc">void (^someBlock) () = A {
    //Block implementation here
}；
</code></pre>

<p>这段代码定义了一个名为<code>someBlock</code>的变量。由于变量名写在正中间，所以看上去也许 =有点怪，不过一旦理解了语法，很容易就能读懂。块类型的语法结构如下：</p>

<pre><code class="language-objc">return_type (^block_name)(parameters)
</code></pre>

<p>我们来举个例子，下面这种写法所定义的块，返回<code>int</code>值，并且接受两个<code>int</code>做参数：</p>

<pre><code class="language-objc">int (^addBlock) (int a, int b) = ^(int a, int b){
     return a + b;
};
</code></pre>

<p>定义好之后，就可以像函数那样使用了。比方说，<code>addBlock</code>块可以这样用:</p>

<pre><code class="language-objc">int add = addBlock (2, 5) ;  //&lt; add = 12
</code></pre>

<p>块的强大之处是：在声明它的范围里，所有变量都可以为其所捕获。这也就是说，那个范围里的全部变量，在块里依然可用。比如，下面这段代码所定义的块，就使用了块以外的变量：</p>

<pre><code class="language-objc">int additional = 5;
int (^addBlock) (int a, int b) = ^(int a, int b){ 
    return a + b + additional;
};

int add = addBlock (2, 5);  //&lt; add = 12
</code></pre>

<p>默认情况下，为块所捕获的变量，是不可以在块里修改的。在本例中，假如块内的代码改动了<code>additional</code>变量的值，那么编译器就会报错。不过，声明变量的时候可以加上<code>__block</code> 修饰符，这样就可以在块内修改了。</p>

<p>例如：</p>

<pre><code class="language-objc">__block int additional = 5;
int (^addBlock) (int a, int b) = ^(int a, int b){   
    additional++;
    return a + b + additional;
};

int add = addBlock (2, 5);  //&lt; add = 13
</code></pre>

<p>块的另一个用法是<code>“内联块”（inline block）</code>，例如：</p>

<pre><code class="language-objc">NSArray *array = @[@0, @1, @2, @3, @4, @5];
_block NSInteger count = 0;
[array enumerateObjectsUsingBlock:
    ^(NSNumber *number, NSUInteger idx, BOOL *stop){
        if([number compare:@2] == NSOrderedAscending) { 
        count++;
    }
}];
//count = 2
</code></pre>

<p>这段范例代码也演示了<code>“内联块”（inline block)</code>的用法。传给<code>“numerateObjectsUsingBlock:”</code>方法的块并未先賦给局部变量,而是直接内联在函数调用里了。</p>

<p>然后我们在声明和使用块的时候，要注意它的作用范围。定义块的时候，其所占的内存区域是分配在栈中的。这就是说，块只在定义它的那个范围内有效。比如下面这个：</p>

<pre><code class="language-objc">void(^block)();
if ( /* some condition */ ){
    block = ^{
        NSLog(@&quot;Block A&quot;);
    };
} else {
    block = ^{
        NSLog(@&quot;Block B&quot;);
    };
}
block();
</code></pre>

<p>定义在<code>if</code>及<code>else</code>语句中的两个块都分配在栈内存中。编译器会给每个块分配好栈内存, 然而等离开了相应的范围之后，编译器有可能把分配给块的内存覆写掉。于是，这两个块只 能保证在对应的<code>if</code>或<code>else</code>语句范围内有效。这样写出来的代码可以编译，但是运行起来时而正确，时而错误。若编译器未覆写待执行的块，则程序照常运行，若覆写，则程序崩溃。</p>

<p>我们为了解决这个问题可以给块对象发送<code>copy</code>消息以拷贝之。这样的话，就可以把块从栈复制到堆了。</p>

<p>拷贝后的块，可以在定义它的那个范围之外使用。而且，一旦复制到堆上，块就成了带引用计数的对象了。后续的复制操作都不会真的执行复制，只是递增块对象的引用计数。如果不再使用这个块，那就应将其释放，在ARC环境下会自动释放。</p>

<p>改动后跟下面一样：</p>

<pre><code class="language-objc">void (^block)();
if (/* some condition */ ){ 
    block = [^{
        NSLog(@,fBlock Aw);
    } copy];
} else {
    block = [^{
        NSLog(@&quot;Block B&quot;);
    } copy];
}
block();
</code></pre>

<p>除了“桟块”和“堆块”之外，还有一类块叫做<strong><mark>“全局块”（global block)</mark></strong>。这种块不会捕捉任何状态（比如外围的变量等)，运行时也无须有状态来参与。块所使用的整个内存区域，在编译期已经完全确定了，因此，全局块可以声明在全局内存里，而不需要在每次用到 的时候于栈中创建。另外，全局块的拷贝操作是个空操作，因为全局块决不可能为系统所回收。这种块实际上相当于单例。下面就是个全局块：</p>

<pre><code class="language-objc">void (^block)() = ^{
    NSLog(@&quot;This is a block&quot;);
};
</code></pre>

<p><mark>由于运行该块所需的全部信息都能在编译期确定，所以可把它做成全局块。</mark>这完全是种优化技术：若把如此简单的块当成复杂的块来处理，那就会在复制及丢弃该块时执行一些无谓的操作。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>块是<code>C、C++、Objective-C</code>中的词法闭包。</li>
<li>块可接受参数，也可返回值。</li>
<li>块可以分配在栈或堆上，也可以是全局的。分配在栈上的块可拷贝到堆里，这样的话，就和标准的<code>Objective-C</code>对象一样，具备引用计数了。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过协议提供匿名方法]]></title>
    <link href="https://lockxmonk.github.io/15043134527493.html"/>
    <updated>2017-09-02T08:50:52+08:00</updated>
    <id>https://lockxmonk.github.io/15043134527493.html</id>
    <content type="html"><![CDATA[
<p>协议定义了一系列方法，遵从此协议的对象应该实现它们（如果这些方法不是可选的, 那么就必须实现)。于是，我们可以用协议把自己所写的<code>API</code>之中的实现细节隐藏起来，将返回的对象设计为遵从此协议的纯<code>id</code>类型。</p>

<p>这样的话，想要隐藏的类名就不会出现在<code>API</code>之中了。若是接口背后有多个不同的实现类，而你又不想指明具体使用哪个类，那么可以考虑用这个办法——因为有时候这些类可能会变，有时候它们又无法容纳于标准的类继承体系中，因而不能以某个公共基类来统一表示。</p>

<p>此概念经常称为<code>“匿名对象&quot;(anonymous object)</code>，这与其他语言中的“匿名对象”不同，在那些语言中，该词是指以内联形式所创建出来的无名类，而此词在<code>Objective-C</code>中则不是这个意思。</p>

<p>我们之前说的委托与数据源对象，就用到了这个方法。例如在定义“受委托者（delegate）”属性时：</p>

<pre><code class="language-objc">@property {nonatomic, weak) id &lt;EOCDelegate&gt; delegate;

</code></pre>

<p>由于该属性的类型是<code>id&lt;EOCDelegate&gt;</code>,所以实际上任何类的对象都能充当这一属性, 即便该类不继承自<code>NSObject</code>也可以，只要遵循<code>EOCDelegate</code>协议就行。对于具备此属性的类来说，<code>delegate</code>就是“匿名的”（ammymous)。如有需要，可在运行期査出此对象所属的类型（参见第14条）。然而这样做不太好，因为指定属性类型时所写的那个<code>EOCDelegate</code>契约已经表明此对象的具体类型无关紧要了。</p>

<p>当然还有其它的用法，这里我们就不举例了。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>协议可在某种程度上提供匿名类型。具体的对象类型可以淡化成遵从某协议的<code>id</code>类型，协议里规定了对象所应实现的方法。</li>
<li>使用匿名对象来隐藏类型名称（或类名）。</li>
<li>如果具体类型不重要，重要的是对象能够响应（定义在协议里的）特定方法，那么可使用匿名对象来表示。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[KVO的简单实现]]></title>
    <link href="https://lockxmonk.github.io/15042539845357.html"/>
    <updated>2017-09-01T16:19:44+08:00</updated>
    <id>https://lockxmonk.github.io/15042539845357.html</id>
    <content type="html"><![CDATA[
<p>之间看有关<code>OC</code>和<code>iOS</code>的书都会看到<code>KVO</code>这个名词。所以今天来学习和实现一下。简单的说<code>KVO</code>即<code>Key-Value Observing</code>,它提供一种机制,当指定的对象的属性被修改后,则对象就会接受到通知。 </p>

<p>它来源于设计模式中的观察者模式，其基本思想就是：</p>

<blockquote>
<p>一个目标对象管理所有依赖于它的观察者对象，并在它自身的状态改变时主动通知观察者对象。这个主动通知通常是通过调用各观察者对象所提供的接口方法来实现的。观察者模式较完美地将目标对象与观察者对象解耦。</p>
</blockquote>

<p>我们一般用到的都是自动实现<code>KVO</code>，所以我这里就不实现手动的<code>KVO</code>了。实现<code>KVO</code>需要两个主要的方法：</p>

<pre><code class="language-objc">//注册观察者
- (void)addObserver:(NSObject *)observer 
        forKeyPath:(NSString *)keyPath 
        options:(NSKeyValueObservingOptions)options 
        context:(void *)context;
        
//当观察的对象属性有所改变就会通知观察者，该方法用来处理变更通知
- (void)observeValueForKeyPath:(NSString *)keyPath 
                     ofObject:(id)object 
                        change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change 
                        context:(void *)context;
</code></pre>

<p>这两个方法在<code>Foundation/NSKeyValueObserving.h</code>中，<code>NSObject，NSArray，NSSet</code>均实现了以上方法，因此我们不仅可以观察普通对象，还可以观察数组或结合类对象。</p>

<p>我们来举例说明：</p>

<p>创建一个观察者类：</p>

<pre><code class="language-objc">//
//  Observer.h
//  KVO机制
//

#import &lt;Foundation/Foundation.h&gt;

@interface Observer : NSObject

@end



//  Observer.m
//  KVO机制
#import &quot;Observer.h&quot;

@implementation Observer

-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context{
    //判断发送过来的通知中更改的属性是否是name
    if ([keyPath isEqualToString:@&quot;name&quot;]) {
        //获取更改属性的类的信息
        Class classInfo = (__bridge Class)context;
        NSString *className = [NSString stringWithFormat:@&quot;%s&quot;, object_getClassName(classInfo)];
        NSLog(@&quot; &gt;&gt; class : [%@] , Name changed&quot;, className);
        NSLog(@&quot; &gt;&gt; old name is %@&quot;, [change objectForKey:@&quot;old&quot;]);
        NSLog(@&quot; &gt;&gt; new name is %@&quot;, [change objectForKey:@&quot;new&quot;]);
    
    }else{
        /*
         *注意：在实现处理变更通知方法 observeValueForKeyPath 时，
         *要将不能处理的 key 转发给 super 的 observeValueForKeyPath 来处理。
         */
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}

@end

</code></pre>

<p>然后创建一个用于观察的<code>Target</code>类</p>

<pre><code class="language-objc">//  Target.h
//  KVO机制


#import &lt;Foundation/Foundation.h&gt;

@interface Target : NSObject

@property(nonatomic,assign) NSString *name;

@end


//  Target.m
//  KVO机制


#import &quot;Target.h&quot;

@implementation Target
//给name属性一个初始值，用于检测变化
-(instancetype)init{
    if (self = [super init]) {
        _name = @&quot;yue&quot;;
    }
    return self;
}
@end
</code></pre>

<p>然后我们在<code>main.m</code>中添加观察者来执行：</p>

<pre><code class="language-objc">//  main.m
//  KVO机制


#import &lt;Foundation/Foundation.h&gt;
#import &quot;Observer.h&quot;
#import &quot;Target.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        //分别创建实例
        Observer *observer = [[Observer alloc]init];
        Target *target = [[Target alloc]init];
        
        //target 增加一个观察者，用于观察name属性
        [target addObserver:observer forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:(__bridge void * _Nullable)([Target class])];
        //更改name属性的值，响应观察者的动作
        [target setName:@&quot;hao&quot;];
        //移除name的观察者，防止内存泄露
        [target removeObserver:observer forKeyPath:@&quot;name&quot;];
    }
    return 0;
}

</code></pre>

<p>我们运行后结果如下：</p>

<p><img src="media/15042539845357/15042556319090.jpg" alt=""/></p>

<p>可以发现是<code>Target</code>类发送过来的通知，说明属性已经变更。</p>

<p>下面我们来讨论一下传过来了的参数。其中<code>addObserver</code>方法中的<code>option：</code>参数用于指定应该包含哪种通知。其中主要有以下几种：</p>

<ul>
<li><strong>NSKeyValueObservingOptionNew</strong>：指出<code>change</code>字典应该包含有新的属性（如果适用）。</li>
<li><strong>NSKeyValueObservingOptionOld</strong>：指出<code>change</code>字典应该包含有旧的属性（如果适用）。</li>
<li><strong>NSKeyValueObservingOptionInitial</strong>：把初始化的值提供给处理方法，一旦注册，立马就会调用一次。通常它会带有新值，而不会带有旧值。</li>
<li><strong>NSKeyValueObservingOptionPrior</strong>： 分2次调用。在值改变之前和值改变之后。</li>
</ul>

<p>其中<code>observeValueForKeyPath</code>方法中的<code>change</code>参数是一个字典型数据。会根据<code>option</code>参数的变化来生成不同的数据。一般会包含<code>new</code>和<code>old</code>两个<code>key</code>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第27条 使用“class-continuation分类”隐藏实现细节]]></title>
    <link href="https://lockxmonk.github.io/15042325338088.html"/>
    <updated>2017-09-01T10:22:13+08:00</updated>
    <id>https://lockxmonk.github.io/15042325338088.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第一种用途</h2>

<p>类中经常会包含一些无须对外公布的方法及实例变最。其实这些内容也可以对外公布, 并且写明其为私有，开发者不应依赖它们。但是<code>OC</code>的动态性，使得不可能实现真正的私有方法或私有实例变量。</p>

<p>但是我们最好还是只把确实需要对外公布的那部分内容公开。那么，这种不需对外公布但却应该具有的方法及实例变量应该怎么写呢？此时，这个特殊的<code>“class-continuation分类”</code>就派上用场了。</p>

<p><font color=red><strong>“class-continuation分类”和普通的分类不同，它必须定义在其所接续的那个类的实现文件里。</strong></font></p>

<p>例如：</p>

<pre><code class="language-objc">//EOCPerson.m
@interface EOCPerson () {
    NSString * _anInstanceVariable;
}
// Method declarations here 
@end
@implementation EOCPerson {
    int _anotherInstanceVariable;
}
// Method implementations here 
@end
</code></pre>

<p>我们这样定义的目的是将这些方法或者实例变量隐藏起来，只供本类使用。即便在公共接口里将其标注为private,也还是会泄漏实现细节。</p>

<p>例如有个绝密的类，不想给其他人知道。 假设你所写的某个类拥有那个绝密类的实例，而这个实例变量又声明在公共接口里面：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

@class EOCSuperSecretClass;

@interface EOCClass : NSObject {
@private
    EOCSuperSecretClass *_secretInstance;
@end
</code></pre>

<p>这样别人就会知道有一个叫<code>EOCSuperSecretClass</code>的类了。</p>

<p>所以我们通常应该这样：</p>

<pre><code class="language-objc">// EOCClass.h
#import &lt;Foundation/Foundation.h&gt;
@interface EOCClass : NSObject 
@end

// EOCClass .m 
#import &quot;EOCClass.h&quot;
#import &quot;EOCSuperSecretClass.h&quot;
@interface EOCClass ()  {
    EOCSuperSecretClass *_secretInstance;
@end

@implementation EOCClass
// Methods here
@end
</code></pre>

<h2 id="toc_1">第二种用途</h2>

<p>编写<code>Objective-C++</code>代码时 <code>“class-continuation分类”</code>也很有用。<code>Objective-C++</code>是 <code>OC</code>与<code>C++</code>的混合体，其代码可以用这两种语言来编写。由于兼容性原因，游戏后 端一般用<code>C++</code>来写。另外，有时候要使用的第三方库可能只有<code>C++</code>绑定，此时也必须使用 <code>C++</code>来编码。在这些情况下，使用<code>&quot;class-continuation分类&quot;</code>会很方便。假设某个类打算这样写：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt; 
#include &quot;SomeCppClass.h&quot; 
@interface EOCClass : NSObject { 
@private
    SomeCppClass _cppClass;
@end
</code></pre>

<p>该类的实现文件可能叫做<code>EOCClass.mm</code>,其中<code>.mm</code>扩展名表示编译器应该将此文件按<code>Objective-C++</code>来编译，否则，就无法正确引人<code>SomeCppClass.h</code>了。然而请注意，名为<code>SomeCppClass</code>的这个<code>C++</code>类必须完全引入，因为编译器要完整地解析其定义方能得知<code>_cppClass</code>实例变量的大小。于是，只要是包含<code>EOCClass.h</code>的类，都必须编译为 <code>Objective-C++</code>才行，因为它们都引入了<code>SomeCppClass</code>类的头文件。这很快就会失控，最终 导致整个应用程序全部都要编译为ObjeCtive-C++。这样显然会增加编码的负担。</p>

<p>也许我们会想用前向声明来避免导入<code>SomeCppClass.h</code>,比如：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt; 

class SomeCppClass;

@interface EOCClass : NSObject { 
@private
    SomeCppClass *_cppClass;
@end
</code></pre>

<p>现在实例变量必须是指针，若不是，则编译器无法得知其大小，从而会报错。但所有指针的大小确实都是固定的，于是编译器只需知道其所指的类型即可。</p>

<p>虽然我们这样做没有<code>#include &quot;SomeCppClass.h&quot;</code>但是我们前向声明该类时所用的<code>class</code>关键字还是<code>C++</code>下的关键字，所以仍然需要按照<code>OC</code>来编译才行。</p>

<p>我们这里的解决方法还是一样，既然变量是<code>private</code>的，我们还是可以将它在<code>“class-continuation分类”</code>声明，改写成：</p>

<pre><code class="language-objc">// EOCClass. h

#import &lt;Foundation/Foundation.h&gt;

@interface EOCClass : NSObject


// EOCClass.mm 
#import &quot;EOCClass.h&quot;
#include &quot;SomeCppClass.h&quot;

@interface EOCClass ()  {
    SomeCppClass _cppClass;
}
@end

@implementation EOCClass 
@end
</code></pre>

<p>改写后的<code>EOCClass</code>类，其头文件里就没有<code>C++</code>代码了，使用头文件的人甚至意识不到其底层实现代码中混有<code>C++</code>成分。某些系统库用到了这种模式，比如网页浏览器框架<code>WebKit</code>,其大部分代码都以<code>C++</code>编写，然而对外展示出来的却是一套整洁的<code>Objective-C</code>接口。<code>CoreAnimation</code>里面也用到了此模式，它的许多后端代码都用<code>C++</code>写成，但对外公布的却是一套纯<code>Objective-C</code>接口。</p>

<h2 id="toc_2">第三种用法</h2>

<p>就是将<code>public</code>接口中声明为“只读”的 属性扩展为“可读写”，以便在类的内部设置其值。</p>

<p>例如：</p>

<pre><code class="language-objc">// .h文件
#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject

@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName;

-(id) initWithFirstName : (NSString*) firstName
                lastName: (NSString*) lastName;

@end

</code></pre>

<p>我们一般会在<code>“class-continuaticm分类”</code>中把这两个属性扩展为“可读写”：</p>

<pre><code class="language-objc">@interface EOCPerson ()
@property (nonatomic, copy, readwrite) NSString *firstName;
@property (nonatomic, copy, readwrite) NSString *lastName;

-(void)p_privateMethod;
@end
</code></pre>

<p>只需要用上面几行代码就行了。现在<code>EOCPerson</code>的实现代码可以随意调用<code>“setFirstName:”</code>或<code>“setLastName:”</code>这两个设置方法，也可以用“点语法”来设置属性。这样做很有用，既能令外界无法修改对象，又能在其内部按照需要管理其数据。</p>

<p>只会在类的实现代码中用到的私有方法也可以声明在<code>“class-continuation分类”</code>中。这么做比较合适，因为它描述了那些只在类实现代码中才会使用的方法。上述的私有方法加上了<code>p_</code>前缀。</p>

<h2 id="toc_3">第四种用法</h2>

<p>当我们想要把对象所遵守的协议视为私有，就可以在<code>“class-continuation分类”</code>中声明。例如：</p>

<pre><code class="language-objc">#import &quot;EOCPerson•h&quot;
#import &quot;EOCSecretDelegate.h&quot;
@interface EOCPerson () &lt;EOCSecretDelegate&gt; 
@end
@implementation EOCPerson
    /*.....*/
@end
</code></pre>

<h2 id="toc_4">要点</h2>

<ul>
<li><p>通过<code>“class-continuation分类”</code>向类中新增实例变量。</p></li>
<li><p>如果某属性在主接口中声明为“只读”，而类的内部又要用设置方法修改此属性，那么就在<code>“class-continuation分类”</code>中将其扩展为“可读写”</p></li>
<li><p>把私有方法的原型声明在<code>“class-continuation分类”</code>里面。</p></li>
<li><p>若想使类所遵循的协议不为人所知，则可于<code>“class-continuation分类”</code>中声明。 </p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第26条 不要在分类中声明属性]]></title>
    <link href="https://lockxmonk.github.io/15042285213204.html"/>
    <updated>2017-09-01T09:15:21+08:00</updated>
    <id>https://lockxmonk.github.io/15042285213204.html</id>
    <content type="html"><![CDATA[
<p>属性是封装数据的方式（参见第6条)。尽管从技术上说，分类里也可以声明属性，但这种做法还是要尽量避免。</p>

<p>原因在于，除了<code>“class-continuation分类”</code>（参见第27条）之外，其他分类都无法向类中新增实例变量，因此，它们无法把实现属性所需的实例变量合成出来。如果我们在分类中声明了一个<code>friends</code>属性。会提示我们</p>

<blockquote>
<p>warning: property  &#39;friends&#39; requires method &#39;friends&#39; to be defined - use @dynamic or provide a method implementation in this category [-Wobjc-property-implementation]</p>

<p>warning: property &#39;friends&#39; requires method &#39;setFriends:&#39; to be defined - use @dynamic or provide a method implementation in this category [-Wobjc-property-implementation]</p>
</blockquote>

<p>说明系统没有为我们自动合成属性的<code>set</code>和<code>get</code>方法。我们要自己在分类中去实现，可以把存取方法声明为<code>@dynamic</code>, 也就是说，这些方法等到运行期再提供，编译器目前是看不见的。如果决定使用消息转发机制（参见第12条）在运行期拦截方法调用，并提供其实现，那么或许可以采用这种做法。</p>

<p>当然我们也可以使用关联对象的方法。<strong><mark>但是还是不建议我们在分类中定义封装数据的属性。</mark></strong></p>

<p>正确做法是把所有属性都定义在主接口里。类所封装的全部数据都应该定义在主接口中，这里是唯一能够定义实例变量(也就是数据）的地方。而属性只是定义实例变量及相关存取方法所用的“语法糖”，所以也应遵循同实例变量一样的规则。<mark>至于分类机制,则应将其理解为一种手段，目标在于扩展类的功能，而非封装数据。</mark></p>

<p>但是有时候，只读属性（readonly）可以在分类中使用，但是我们要手动实现它的<code>get</code>方法。当然我们不建议搞特殊。最好还是在主接口中声明。然后在分类中声明一个获取方法，来获取数据。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>把封装数据所用的全部属性都定义在主接口里。</li>
<li>在<code>“class-contimiation分类”</code>之外的其他分类中，可以定义存取方法，但尽量不要定义属性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第25条 总是为第三方类的分类名称加前缀]]></title>
    <link href="https://lockxmonk.github.io/15042274785369.html"/>
    <updated>2017-09-01T08:57:58+08:00</updated>
    <id>https://lockxmonk.github.io/15042274785369.html</id>
    <content type="html"><![CDATA[
<p>分类机制通常用于向无源码的既有类中新增功能。这个特性极为强大，但在使用时也很容易忽视其中可能产生的问题。</p>

<p>我们在分类中添加方法，系统在运行期时会将分类中的方法加入类中。运行期系统会把分类中所实现的每个方法都加入类的方法列表中。<strong><font color=red>如果类中本来就有此方法，而分类又实现了一次，那么分类中的方法会覆盖原来那一份实现代码。实际上可能会发生很多次榭盖，比如某个分类中的方法覆盖了“主实现”中的相关方法，而另外一个分类 中的方法又覆盖了这个分类中的方法。多次覆盖的结果以最后一个分类为准。</font></strong></p>

<p>所以我们为了解决此问题，一般做法是：<strong><font color=red>以命名空间来区别各个分类的名称与其中所定义的方法。</font></strong>我们这里的命名空间只是在相关名称前都加上公用的前缀。</p>

<p>所以我们举例来说就是这样的：</p>

<pre><code class="language-objc">@interface NSString (ABC_HTTP)
//Encode a string with URL encoding 
-(NSString*) abc_urlEncodedStiring;

// Decode a URL ©ncodeci string
-(NSString*) abc_urlDecodedString;
@end
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li>向第三方类中添加分类时，总应给其名称加上你专用的前缀。</li>
<li>向第三方类中添加分类时，总应给其中的方法名加上你专用的前缀。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指针问题]]></title>
    <link href="https://lockxmonk.github.io/15041689865677.html"/>
    <updated>2017-08-31T16:43:06+08:00</updated>
    <id>https://lockxmonk.github.io/15041689865677.html</id>
    <content type="html"><![CDATA[
<pre><code>#include &lt;stdio.h&gt;  
   
int main() {  
      
    int num = 10;  
    int *p1 = &amp;num//p1存储num的地址  
    int **p2 = &amp;p1;//p2存储p1的地址  
    int ***p3 = &amp;p2;//p3存储p2的地址  
      
    *p1 = 100;//*p1取出num变量  
    **p2 = 200;//**p2取出num变量  
    ***p3 = 300;//***p3也是取出num变量  
    printf(&quot;num = %d\n&quot;,num);  
    printf(&quot;num = %d\n&quot;,***p3);  
      
    return 0;  
}  
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[消息转发机制的简单实现]]></title>
    <link href="https://lockxmonk.github.io/15041475233104.html"/>
    <updated>2017-08-31T10:45:23+08:00</updated>
    <id>https://lockxmonk.github.io/15041475233104.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第一种</h2>

<p>首先我们来实现这两个方法：<br/><br/>
+(BOOL)resolveInstanceMethod:    (SEL)sel</p>

<p>+(BOOL)resolveClassMethod:(SEL)sel</p>

<p>这两个方法用于方法的动态解析，当一个对象执行一个方法时，发现没有找到所对应的实现。这是就要靠上面的方法来动态添加实现了</p>

<p>举例来说：</p>

<pre><code class="language-objc">//
//  Person.h
//  消息转发

#import &lt;Foundation/Foundation.h&gt;

@interface Person : NSObject
//接口中声明一个方法
-(void)run;

@end

//
//  Person.m
//  消息转发


#import &quot;Person.h&quot;
#import &lt;objc/runtime.h&gt;
@implementation Person //在部署的时候我们没有实现接口中声明的run方法


//编写C函数实现代码
void addrun (id self, SEL _cmd){
    NSLog(@&quot;%@　%s&quot;,self,sel_getName(_cmd));
}

+(BOOL)resolveInstanceMethod:(SEL)sel{
    if (sel ==@selector(run)) {
    //如果响应run方法，我们动态将上面实现的addrun方法添加到当前类中。
        class_addMethod(self, sel, (IMP)addrun, &quot;v@:&quot;);
    }
    
    return [super resolveInstanceMethod:sel];
}

@end

//  main.m
//  消息转发


#import &lt;Foundation/Foundation.h&gt;
#import &quot;Person.h&quot;
int main(int argc, const char * argv[]) {
    @autoreleasepool {
    //执行代码
        Person *man = [Person new];
        [man run];
    }
    return 0;
}
</code></pre>

<p>结果为：<img src="media/15041475233104/15041480973843.jpg" alt=""/><br/>
说明执行了我们添加的那个方法，而并没有报错。</p>

<h2 id="toc_1">第二种</h2>

<p>我们可以动态的向类中添加方法来解决无选择子的问题，我们也可以选择转换接受者来选择可以处理该选择子的对象。</p>

<p>首先当我们，没有处理第一种方法的时候，运行期系统会给我们第二个机会，询问是否有备用的接受者。我们就要实现<code>orwardingTargetForSelector</code>了</p>

<p>我们举例来看：</p>

<p>首先我们先创建一个新类Car，并且创建一个<code>run</code>方法：</p>

<p><img src="media/15041475233104/15041487720558.jpg" alt=""/></p>

<p>然后在Person.m中，不对<code>resolveInstanceMethod</code>进行任何处理，在<code>forwardingTargetForSelector</code>中返回一个<code>Car</code>实例：<br/>
<img src="media/15041475233104/15041488721835.jpg" alt=""/></p>

<p>然后继续执行<code>main.m</code>文件，运行为：<br/>
<img src="media/15041475233104/15041489461207.jpg" alt=""/></p>

<p>说明系统已经将所要实现方法的对象转换为<code>Car</code>的实例对象。</p>

<h2 id="toc_2">第三种</h2>

<p>如果前两种我们都没有实现的话，就会进入第三种，执行完整的消息转发机制。</p>

<p>就会调用两个方法<code>methodSignatureForSelector</code>和<code>forwardInvocation</code></p>

<p><code>methodSignatureForSelector</code>方法用来指定方法签名，返回<code>nil</code>表示不处理，否则会进入下一步调用<code>forwardInvocation</code>方法。其中这个签名就是给<code>forwardInvocation</code>中的参数<code>NSInvocation</code>调用的。</p>

<p><img src="media/15041475233104/15041604848181.jpg" alt=""/></p>

<p>开头我们要找的错误<code>unrecognized selector sent to instance</code>原因，原来就是因为<code>methodSignatureForSelector</code>这个方法中，由于没有找到<code>run</code>对应的实现方法，所以返回了一个空的方法签名，最终导致程序报错崩溃。</p>

<p>所以我们需要做的是自己新建方法签名，再在<code>forwardInvocation</code>中用你要转发的那个对象调用这个对应的签名，这样也实现了消息转发。</p>

<p>关于生成签名的类型<code>&quot;v@:&quot;</code>解释一下。每一个方法会默认隐藏两个参数，<code>self</code>、<code>_cmd</code>，<code>self</code>代表方法调用者，<code>_cmd</code>代表这个方法的<code>SEL</code>，签名类型就是用来描述这个方法的返回值、参数的，<code>v</code>代表返回值为<code>void</code>，<code>@</code>表示<code>self</code>，<code>:</code>表示<code>_cmd</code>。</p>

<p><strong>所以第二个和第三个字符必须是<code>“@:”</code> ，第一个字符是返回类型.</strong></p>

<p><strong>具体的可以看一下了解</strong>：<a href="https://developer.apple.com/library/etc/redirect/xcode/content/1189/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Type Encodeing</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第24条 将类的实现代码分散到便于管理的数个分类之中]]></title>
    <link href="https://lockxmonk.github.io/15041406291157.html"/>
    <updated>2017-08-31T08:50:29+08:00</updated>
    <id>https://lockxmonk.github.io/15041406291157.html</id>
    <content type="html"><![CDATA[
<p>一个类里面经常会填满各种各样的方法，有时候将那么多方法放在一个类的实现文件里是合理的。但是我们如果通过OC的<code>分类</code>机制将类代码按逻辑划入几个分区中，这对于开发和调试都有帮助。</p>

<p>我们来举个例子，我们对个人信息建模分类：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
Sinterface EOCPerson : NSObject
@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName; 
@property (nonatomic, strong, readonly) NSArray *friends;

-(id)initWithFirstName:(NSString*) firstName
            andLastName:(NSString*)lastName;
            
/* Friendship methods */
-(void)addFriend:(EOCPerson*)person;
- (void)removeFriend:(EOCPerson*)person;
-(BOOL)isFriendsWith:(EOCPerson*)person;

/* Work methods */
-(void)performDaysWork;
-(void)takeVacationFromWork;

/* Play methods */
-(void)goToTheCinema;
-(void)goToSportsGame;
</code></pre>

<p>在实现该类时，所有方法的代码可能会写在一个大文件里。显得很臃肿。所以可以用“分类”机制把刚才的类改写成下面这样：</p>

<pre><code class="language-objc">@import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject
@property (nonatomic, strong, readonly) NSArray *friends;
@property (nonatomic, copy, readonly) NSString *lastName;
@property (nonatomic, copy, readonly) NSString *firstName; 
 
-(id) initWithFirstName: (NSString*)firstName
            andLastNames:(NSString*)lastName;

@end

@interface EOCPerson (Friendship)
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;
-(BOOL)isFriendsWith:(EOCPerson*)person; 
@end

@interface EOCPerson (Work)
-(void)performDaysWork;
-(void)takeVacationFromWork; 
@end

@interface EOCPerson (Play)
-(void)goToTheCinema;
-(void)goToSportsGame;
@end
</code></pre>

<p>现在，类的实现代码按照方法分成了好几个部分。所以说，这项语言特性当然就叫做<code>“分类”</code>啦。</p>

<p>但是这些代码还是在一个文件中声明的，所以我们还可以将其拆分为多个文件：</p>

<ul>
<li>  EOCPerson+Friendship(.h/.m)</li>
<li> EOCPerson+Work(.h/.m)</li>
<li> EOCPerson+Play(.h/.m)</li>
</ul>

<p>比方说，与交友功能相关的那个分类可以这样写：</p>

<pre><code class="language-objc">// EOCPerson+Friendship.h
#import &quot;EOCPerson.h&quot;
@interface EOCPerson (Friendship)
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;
-(BOOL)isFriendsWith:(EOCPerson*)person;
@end

// EOCPerson+Friendship.m 

#import EOCPerson+Friendship.h
@implementation EOCPerson (Friendship)
-(void)addFriend:(EOCPerson*)person {
    /*...*/
}
-(void)removeFriend:(EOCPerson*)person {
    /*...*/
}
-(BOOL)isFriendsWith:(EOCPerson*)person {
    /*...*/
}
@end
</code></pre>

<p>通过分类机制，可以把类代码分成很多个易于管理的小块，以便单独检视。<mark>使用分类机制之后，如果想用分类中的方法，那么要记得在引入<code>EOCPerson.h</code>时一并引入分类的头文件</mark>。</p>

<p>这样使用分类之后，对于某个分类中的所有 方法来说，分类名称都会出现在其符号中。例如，<code>“addFriend:”</code>方法的“符号名”（symbol name)如下：</p>

<pre><code class="language-objc">-[EOCPerson(Friendship) addFriend:]
</code></pre>

<p>也可以创建名为<code>Private</code>的分类把这种方法全都放在里面。这个分类里的方法一般只会在类或框架内部使用，而无须对外公布。这样一来，类的使用者有时可能会在査看回溯信息时发现<code>private</code>一词，就知道不应该直接调用此方法了。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>使用分类机制把类的实现代码划分成易于管理的小块。</li>
<li>将应该视为“私有”的方法归入名叫<code>Private</code>的分类中，以隐藏实现细节。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS基础概念总结（一）]]></title>
    <link href="https://lockxmonk.github.io/15040800241477.html"/>
    <updated>2017-08-30T16:00:24+08:00</updated>
    <id>https://lockxmonk.github.io/15040800241477.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">1. OC的前向声明</a>
</li>
<li>
<a href="#toc_1">2. #import和#include的区别？</a>
</li>
<li>
<a href="#toc_2">3. 用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数</a>
</li>
<li>
<a href="#toc_3">4.property属性的修饰符有什么样的作用</a>
</li>
<li>
<a href="#toc_4">5. self.name=@object和_name=@object有什么不同?</a>
</li>
</ul>


<h2 id="toc_0">1. OC的前向声明</h2>

<p>由于在编译 <code>Person</code> 类的文件时，不需要知道Dog类的全部细节（Dog类中的方法），若使用 <code>#import &quot;Dog.h&quot;</code> 则必须知道<code>Dog.h</code>的全部细节，而Person类中只需要知道类名Dog就可以了,可用通过以下方式告诉编译器<code>@class Dog;</code>这种方式叫<code>向前声明 （forward declaring）</code>,当<code>.m</code>文件中要了解实现细节的时候在引入<code>dog.h</code></p>

<pre><code class="language-objc">//Person.h
#import &lt;Foundation/Foundation.h&gt;
@class Dog;  //前向声明
@interface Person : NSObject
@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) Dog *dog;

</code></pre>

<ul>
<li><strong>向前声明解决了两个类互相引用的问题。</strong></li>
<li><strong>向前声明可用降低编译时间，除非必要，则可以使用向前申明，并在实现文件中映入头文件，这样做可用尽量降低类之间的耦合。</strong></li>
</ul>

<h2 id="toc_1">2. #import和#include的区别？</h2>

<p><code>#import</code>是<code>Objective-C</code>导入头文件的语法，可保证不会重复导入。<br/>
<code>#include</code>是C/C++导入头文件的语法，如果是objective-c与C/C++混编码，对于C/C++类型的文件，还是使用#include来引入，这种写法需要添加防重复导入的语法。</p>

<h2 id="toc_2">3. 用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数</h2>

<pre><code class="language-objc">float money = 1.011;
NSLog(@&quot;%.1f&quot;, money);
</code></pre>

<h2 id="toc_3">4.property属性的修饰符有什么样的作用</h2>

<p><code>property</code>是属性访问声明，扩号内支持以下几个属性：</p>

<ul>
<li><strong>getter=getName、setter=setName</strong>：设置setter与getter的方法名</li>
<li><p><strong>readwrite、readonly</strong>：设置可供访问级别</p></li>
<li><p><strong>assign</strong>：方法直接赋值，不进行任何retain操作，为了解决原类型与环循引用问题</p></li>
<li><p><strong>retain</strong>：其setter方法对参数进行release旧值再retain新值，所有实现都是这个顺序</p></li>
<li><p><strong>strong</strong>：此特质表明该属性定义了一种“拥有关系”（owning relationship)。为这种属性设置新值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。</p></li>
<li><p><strong>weak</strong>  此特质表明该属性定义了一种“非拥有关系”（nonowning relationship)。<strong>为这种属性设置新值时，设置方法既不保留新值，也不释放旧值</strong>。此特质同assign类似,然而在属性所指的对象遭到摧毁时，属性值也会清空（nil out)。</p></li>
<li><p><strong>unsafe_unretained</strong>  此特质的语义和assign相同，但是它适用于“对象类型”（object type),该特质表达一种“非拥有关系”（“不保留”，unretained),<strong>当目标对象遭到摧毁时，属性值不会自动清空（“不安全”，unsafe),这一点与weak有区别</strong>。</p></li>
<li><p><strong>copy</strong>：其setter方法进行copy操作，与retain处理流程一样，先对旧值release，再copy出新的对象，retainCount为1。这是为了减少对上下文的依赖而引入的机制。</p></li>
<li><p><strong>nonatomic</strong>：非原子性访问，不加同步， 多线程并发访问会提高性能。注意，如果不加此属性，则默认是两个访问方法都为原子型事务访问。</p></li>
</ul>

<h2 id="toc_4">5. self.name=@object和_name=@object有什么不同?</h2>

<p><code>self.name =”object”：</code>会调用对象的<code>setName()</code>方法；<code>name = “object”：</code>会直接把<code>&quot;object&quot;</code>字符串赋值给当前对象的<code>name</code>属性。后者的效率会很高，因为没有调用set方法而是直接方法问内存。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第23条：通过委托与数据源协议进行对象间通信]]></title>
    <link href="https://lockxmonk.github.io/15040539328891.html"/>
    <updated>2017-08-30T08:45:32+08:00</updated>
    <id>https://lockxmonk.github.io/15040539328891.html</id>
    <content type="html"><![CDATA[
<p>Objective-C语言有一项特性叫做<code>“协议”（protocol)</code>，它与<code>Java的“接口&quot;（interface)类似</code>。 <code>Objective-C</code>不支持多重继承，因而我们把某个类应该实现的一系列方法定义在协议里面。<strong><mark>协议最为常见的用途是实现委托模式，不过也有其他用法。</mark></strong>理解并善用协议可令代码变得更易维护，因为协议这种方式能很好地描述接口。</p>

<p><strong><font color=red><code>“分类”（Category)</code>也是<code>Objective-C</code>的一项重要语言特性。利用分类机制，我们无须继承子类即可直接为当前类添加方法，而在其他编程语言中，则需通过继承子类来实现。</font></strong>由于 <code>Objective-C</code>运行期系统是髙度动态的，所以才能支持这一特性，然而，其中也隐藏着一些陷阱，因此在使用分类之前，应该先理解它。</p>

<p>OC中的通信方式有很多种，我们经常使用一种叫做<code>“委托模式”（Delegate pattem)</code>的编程设计模式来实现对象间的通信，<strong><font color=red>该模式的主旨是: 定义一套接口，某对象若想接受另一个对象的委托，则需遵从此接口，以便成为其“委托对象”（delegate)。而这“另一个对象”则可以给其委托对象回传一些信息，也可以在发生相关事件时通知委托对象。</font></strong></p>

<p>此模式可将数据与业务逻辑解耦。比方说，用户界面里有个显示一系列数据所用的视图，那么，此视图只应包含显示数据所需的逻辑代码，而不应决定要显示何种数据以及数据之间如何交互等问题。<mark>视图对象的属性中，可以包含负责数据与事件处理的对象。这两种对象分别称为“数据源&quot;（data source)与“委托”（delegate)</mark>。</p>

<p>我们来举个假设要编写一个从网上获取数据的类。此类也许要从远程服务器的某个资源里获取数据。那个远程服务器可能过很长时间才会应答，而在获取数据的过程中阻塞应用程序则是一种非常糟糕的做法。于是，在这种情况下，我们通常会使用委托模式：获取网络数据的类含有一个“委托对象”，在获取完数据之后，它会回调这个委托对象。</p>

<p><code>EOCDataModel</code>对象就是<code>EOCNetworkFetcher</code>的委托对象。<code>EOCDataModel</code>请求<code>EOCNetworkFetcher</code> &quot;以异步方式执行一项任务&quot;（perform a task asynchronously),<code>EOCNetworkFetcher</code>在执行完这项任务之后，就会通知其委托对象，也就是<code>EOCDataModel</code>。<br/>
<img src="media/15040539328891/15040737659871.jpg" alt=""/></p>

<p>利用协议机制，很容易就能以<code>Objective-C</code>代码实现此模式。在图4-1所演示的这种情况 下，协议可以这样来定义：</p>

<pre><code class="language-objc">@protocol EOCNetworkFetcherDelegate 
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
        didReceiveData:(NSData*)data;
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
     didFailWithError:(NSError*)error;
@end
</code></pre>

<p><strong><font color=red>委托协议名通常是在相关类名后面加上Delegate一词，整个类名采用“驼峰法”来写。</font></strong> 以这种方式来命名委托协议的话，使用此代码的人很快就能理解其含义了。</p>

<p>然后我们要在这个<code>EOCNetworkFetcher</code>中设置一个属性来存放其委托对象。接口可以写成这样：</p>

<pre><code class="language-objc">@interface EOCNetworkFetcher : NSObject 
@property (nonatomic, weak) id&lt;EOCNetworkFetcherDelegate&gt; delegate; 
</code></pre>

<p><strong><font color=red>一定要注意：这个属性需定义成<code>weak</code>,而非<code>strong</code>,因为两者之间必须为“非拥有关系” (nonowning relationship)。通常情况下，扮演<code>delegate</code>的那个对象也要持有本对象。所以我们要用weak来声明一种非拥有关系来避免“保留环”。</font></strong></p>

<p><img src="media/15040539328891/15040757649151.jpg" alt=""/></p>

<p>实现委托对象的办法是声明某个类遵从委托协议，然后把协议中想实现的那些方法在类 里实现出来。某类若要遵从委托协议，可以在其接口中声明，也可以在<code>“class-contimiation分类”</code>中声明。如果要向外界公布此类实现了某协议，那么就在接口中声明，而如果这个协议是个委托协议的话，那么通常只会在类的内部使用。所以说，这种情况一般都是在<code>“class-continuation分类”</code>里声明的：</p>

<pre><code class="language-objc">@implementation EOCDataModel () &lt;EOCNetworkFetcherDelegate&gt; 
@end
@implementation EOCDataModel
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
        didReceiveData:(NSData*)data {
/* Handle data */
}
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
        didFailWithError:(NSError*)error {
/* Handle error */
}
@and
</code></pre>

<p>之后要用委托对象来调用方法时，必须提前使用类型信息査询方法（参见第14条）判断这个委托对象能否响应相关选择子。以<code>EOCNetworkFetcher</code>为例，应该这样写：</p>

<pre><code class="language-objc">NSData *data = /*data obtained from network */;
if ([_delegate respondsToSelector:
     @selector(networkFetcher:didReceiveData:)))
{ 
    [_delegate networkFetcher:self  didReceiveData:data];
}
</code></pre>

<p>但是当方法变多了，我们就会频繁的来检查委托对象是否能够相应选择子，其实这个操作检测一次就可以了，<strong><font color=red>所以我们可以用“位段（bitfield)”数据类型将该方法响应能力缓存起来。</font></strong></p>

<p>这是一项乏人问津的C语言特性，但在此处用起来却正合适。我们可以把结构体中某个字段所占用的二进制位个数设为特定的值。比如像这样：</p>

<pre><code class="language-objc">struct data {
    unsigned int fieldA : 8; 
    unsigned int fieldB : 4; 
    unsigned int fieldC : 2; 
    unsigned int fieldD : 1;
};
</code></pre>

<p>在结构体中，<code>fieldA</code>位段将占用8个二进制位，<code>fieldB</code>占用4个，<code>fieldC</code>占用两个，<code>fieldD</code>占用1个。于是，<code>fieldA</code>可以表示0至255之间的值，而<code>fieldD</code>则可以表示0或1这两个值。 我们举例子来说的话就是：</p>

<pre><code class="language-objc">@interface EOCNetworkFetcher ()     {
    struct {
        unsigned int didReceiveData :   1;
        unsigned int didFailWithError : 1;      
        unsigned int didUpdateProgressTo : 1;
        }_delegateFlags;
</code></pre>

<p>这个结构体用来缓存委托对象是否能响应特定的选择子。实现缓存功能所用的代码可以 写在<code>delegate</code>属性所对应的设置方法里：</p>

<pre><code class="language-objc">-(void)setDelegate:(id&lt;EOCNetworkFetcherDelegate&gt;)delegate {
    _delegate = delegate;   
    
    _delegateFlags.didReceiveData  = 
        [delegate respondsToSelector:
              @selector(networkFetcher:didReceiveData:)]; 
    
    _delegateFlags.didFailWithError =
        [delegate respondsToSelector:
              @selector(networkFetcher:didFailWithError:)]; 

    _delegateFlags.didUpdateProgressTo =
        [delegate respondsToSelector:
              @selector(networkFetcher:didUpdateProgressTo:)];

}
</code></pre>

<p>这样的话，每次调用<code>delegate</code>的相关方法之前，就不用检测委托对象是否能响应给定的选择子了，而是直接查询结构体里的标志：</p>

<pre><code class="language-objc">if (_delegateFlags.didUpdateProgressTo) {
    [_delegate networkFetcher:self
          didUpdateProgressTo:currentProgress];
}
</code></pre>

<p>在相关方法要调用很多次时，值得进行这种优化。而是否需要优化，则应依照具体代码来定。这就需要分析代码性能，并找出瓶颈，若发现执行速度需要改进，则可使用此技巧。如果要频繁通过数据源协议从数据源中获取多份相互独立的数据，那么这项优化技术极有可能会提高程序效率.</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>委托模式为对象提供了一套接口，使其可由此将相关事件告知其他对象。</li>
<li>将委托对象应该支持的接口定义成协议，在协议中把可能需要处理的事件定义成方法。</li>
<li>当某对象需要从另外一个对象中获取数据时，可以使用委托模式。这种情境下，该模式亦称“数据源协议”（data source protocal)。</li>
<li>若有必要，可实现含有位段的结构体，将委托对象是否能响应相关协议方法这一信息 缓存至其中。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二十二条 理解NSCopying协议]]></title>
    <link href="https://lockxmonk.github.io/15039678296448.html"/>
    <updated>2017-08-29T08:50:29+08:00</updated>
    <id>https://lockxmonk.github.io/15039678296448.html</id>
    <content type="html"><![CDATA[
<p>使用对象时经常需要拷贝它。在<code>Objective-C</code>中，此操作通过copy方法完成。如果想令自己的类支持拷贝操作，那就要实现<code>NSCopying</code>协议，该协议只有一个方法：</p>

<pre><code class="language-objc">-(id)copyWithZone:(NSZone*)zone
</code></pre>

<p>为何会出现<code>NSZone</code>呢？因为以前开发程序时，会据此把内存分成不同的“区”（zone), 而对象会创建在某个区里面。现在不用了，每个程序只有一个区：<code>“默认区”（default zone)</code>。 所以说，尽管必须实现这个方法，但是你不必担心其中的<code>zone</code>参数。</p>

<p><strong><font color=red>copy方法由NSObject实现，该方法只是以“默认区”为参数来调用<code>“copyWithZone:”</code>。 我们总是想覆写copy方法，其实真正需要实现的却是<code>“copyWithZone:”</code>方法。这里我们一定要注意。</font></strong></p>

<p><mark>若想使某个类支持拷贝功能，只需声明该类遵从NSCopying协议，并实现其中的那个方法即可。</mark>比方说，有个表示个人信息的类，可以在其接口定义中声明此类遵从 <code>NSCopying</code> 协议：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject &lt;NSCopying&gt;
@property (nonatomic, copy, readonly) NSString *firstName;
@property (nonatomic, copy, readonly) NSString *lastName;
-(id)initWithFirstName:(NSString*)firstName
          andLastName: (NSString*)lastName;

@end
</code></pre>

<p>然后，实现协议中规定的方法：</p>

<pre><code class="language-objc">-(id)copyWithZone:(NSZone*)zone {
    EOCPerson *copy = [[[self class] allocWithZone:zone]
                     initWithFirstName :_firstName
                            andLastName:_lastName];
    return copy;
}
</code></pre>

<p>当然我们又是也要考虑具体情况，除了要拷贝对象，还要完成其他一些操作，比如类对象中的数据结构可能并未在初始化方法中设置好，需要另行设置。</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject&lt;NSCopying&gt;
@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName;
-(id)initWithFirstName: (NSString*) firstName
            andLastName:(NSString*)lastName;
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;

@end

@implementation EOCPerson {
    NSMutableSet *_friends;
)
- (id)initWithFirstName: (NSString*) firstName
             andLastName:(NSString*)lastName { 
    if ((self = [super init])) {
    _firstName = [firstName copy];
    _lastName = [lastName copy];
    _friends = [NSMutableSet newJ;
    }
    return self;

}
-(void)addFriend:(EOCPerson*)person {
    [_friends addObject:person];
}
-(void)removeFriend:(EOCPerson*)person {
    [_friends removeObject:person];
}
-(id)copyWithZone:(NSZone*)zone {
    EOCPerson *copy =[[[self class] allocWithZone:zone]
                        initWithFirstName: _firstName
                        andLastName:_lastName]; 
    copy-&gt;_friends = [_friends mutableCopy]; 
    return copy;
}
@end
</code></pre>

<p><mark>这次所实现的方法比原来多了一些代码，它把本对象的<code>_friends</code>实例变量复制了一份, 令<code>copy</code>对象的<code>_frieiids</code>实例变量指向这个复制过的<code>set</code>。注意，这里使用了<code>-&gt;</code>语法，因为<code>_friends</code>并非属性，只是个在内部使用的实例变量。</mark>其实也可以声明一个属性来表示它，不过由于该变量不会在本类之外使用，所以那么做没必要。</p>

<p>我们在上面发现了一个<code>mutableCopy</code>方法，此方法来自另一个叫做<code>NSMutableCopying</code>的协议。该协议与<code>NSCopying</code>类似，也只定义了一个方法，然而方法名不同：</p>

<pre><code class="language-objc">- (id)mutableCopyWithZone:(NSZone*)zone
</code></pre>

<p><code>mutableCopy</code>这个“辅助方法”（helper)与<code>copy</code>相似，也是用默认的<code>zone</code>参数来调<code>“mutableCopyWithZone:”</code>。如果你的类分为可变版本（mutable variant)与不可变版本 (immutable variant),那么就应该实现<code>NSMutableCopying</code>。若采用此模式，则在可变类中覆写<code>“copyWithZone:”</code>方法时，<font color=red>不要返回可变的拷贝，而应返回一份不可变的版本。</font><mark><strong>无论当前实例是否可变，若需获取其可变版本的拷贝，均应调用<code>mutableCopy</code>方法。同理，若需要不可变的拷贝，则总应通过<code>copy</code>方法来获取。</strong></mark></p>

<p>对于不可变的<code>NSArray</code>与可变的<code>NSMutableArray</code>来说，下列关系总是成立的：</p>

<pre><code class="language-objc">-[NSMutableArray copy] =&gt;NSArray
-[NSArray mutableCopy】 =&gt;NSMutableArray
</code></pre>

<p>所谓我们会发现：<strong><font color=red>在可变对象上调用copy方法会返冋另外一个不可变类的实例。这样做是为了能在可变版本与不可变版本之间自由切换。</font></strong></p>

<h2 id="toc_0">浅拷贝与深拷贝</h2>

<p>在编写拷贝方法时，还要决定一个问题，就是应该执行<code>“深拷贝”（deep copy)</code>还是<code>“浅拷贝”（shallow copy)</code>。<font color=red>深拷贝的意思就是：在拷贝对象自身时，将其底层数据也一并复制过 去。</font><mark><code>Foundation</code>框架中的所有<code>collection</code>类在默认情况下都执行浅拷贝，也就是说，只拷贝容器对象本身，而不复制其中数据。这样做的主要原因在于，容器内的对象未必都能拷贝，而且调用者也未必想在拷贝容器时一并拷贝其中的每个对象</mark>。</p>

<p><img src="media/15039678296448/15039726127594.jpg" alt=""/></p>

<p>一般情况下，我们会遵照系统框架所使用的那种模式，在自定义的类中以浅拷贝的方式实现<code>“copyWithZone:”</code>方法。但如果有必要的话，也可以增加一个执行深拷贝的方法。以 <code>NSSet</code>为例，该类提供了下面这个初始化方法，用以执行深拷贝：</p>

<pre><code class="language-objc">-(id)initWithSet:(NSArray*)array copyltems:(BOOL)copyltems
</code></pre>

<p>若<code>copyltem</code>参数设为<code>YES</code>,则该方法会向数组中的每个元素发送<code>copy</code>消息，用拷贝好的元素创建新的set,并将其返回给调用者。<br/>
在<code>EOCPerson</code>那个例子中，存放朋友对象的<code>set</code>是用<code>“ copyWithZone:”</code>方法来拷贝的， 根据刚才讲的内容可知，这种浅拷贝方式不会逐个复制<code>set</code>中的元素。若需要深拷贝的话, 则可像下面这样，编写一个专供深拷贝所用的方法：</p>

<pre><code class="language-objc">-(id)deepCopy {
    EOCPerson *copy =[[[self class] alloc]
                initWithFirstName:_firstName
                      andLastName:_lastName];               
    copy-&gt;_friends = [[NSMutableSet alloc] initWithSetfriends copyltems:YES];
    return copy;
}
</code></pre>

<p>因为没有专门定义深拷贝的协议，所以其具体执行方式由每个类来确定，你只需决定自 己所写的类是否要提供深拷贝方法即可。另外，不要假定遵从了 <code>NSCopying</code>协议的对象都会执行深拷贝。在绝大多数情况下，执行的都是浅拷贝。如果需要在某对象上执行深拷贝，那 么除非该类的文档说它是用深拷贝来实现<code>NSCopying</code>协议的，否则，要么寻找能够执行深拷贝的相关方法，要么自己编写方法来做。</p>

<h2 id="toc_1">要点</h2>

<ul>
<li>若想令自己所写的对象具有拷贝功能，则需实现<code>NSCopying</code>协议。</li>
<li>如果自定义的对象分为可变版本与不可变版本，那么就要同时实现<code>NSCopying</code>与 <code>NSMutableCopying</code> 协议。</li>
<li>复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应该尽量执行浅拷贝。</li>
<li>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 中协议和委托传值的用法]]></title>
    <link href="https://lockxmonk.github.io/15038893459243.html"/>
    <updated>2017-08-28T11:02:25+08:00</updated>
    <id>https://lockxmonk.github.io/15038893459243.html</id>
    <content type="html"><![CDATA[
<p>虽然之前一直听过和看过委托模式，但是并没有实际的操作。这次来实现一个简单的委托样例。来加深自己的了解。</p>

<p>项目目录结构为：<br/>
<img src="media/15038893459243/15039018875452.jpg" alt=""/></p>

<p>首先我们创建一个协议：<code>ProtocolA</code></p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

@protocol ProtocolA &lt;NSObject&gt;

@required

-(void)sendValue:(NSString*)str;


@end
</code></pre>

<p>其中有一个方法<code>sendValue:</code>，由于加上了<code>@required</code>前缀，所以这个方法时必须实现的。如果想要一个方法是可选则实现与否，则要加上<code>@optional</code>。</p>

<p>之后我们创建一个类<code>ClassA</code>：</p>

<pre><code class="language-objc">//该类遵循ProtocolA，并且实现了它的方法

//ClassA.h
#import &lt;Foundation/Foundation.h&gt;
#import &quot;ProtocolA.h&quot;

@interface ClassA : NSObject&lt;ProtocolA&gt;

@end

//ClassA.m
#import &quot;ClassA.h&quot;

@implementation ClassA

-(void)sendValue:(NSString *)str{
    NSLog(@&quot;我是传过来的值：%@&quot; , str);
}

@end

</code></pre>

<p>写到这里，我们大概可以猜到，我们想让<code>ClassA</code>的实例来接受一个委托实现<code>ProtocolA</code>中的方法。</p>

<p>所以我们这里继续创建一个<code>ClassB</code>，让它来发出一个委托，让<code>ClassA</code>代替它实现。</p>

<pre><code class="language-objc">//ClassB.h

#import &lt;Foundation/Foundation.h&gt;
#import &quot;ClassA.h&quot;

@interface ClassB : NSObject
//这里我们创建了一个delegate对象，用于设置委托对象。
@property(weak,nonatomic) id&lt;ProtocolA&gt; delegate;
//创建一个方法来执行委托操作
-(void)dowork;

@end

//ClassB.m

#import &quot;ClassB.h&quot;

@implementation ClassB

//创建a的实例，将a设置为接受委托的对象。
-(void)dowork{
    ClassA *a = [ClassA new];
    self.delegate = a;
    //当响应了委托方法时，执行sendValue：
    if ([self.delegate respondsToSelector:@selector(sendValue:)]) { // 如果协议响应了sendValue:方法
        [self.delegate sendValue:@&quot;Hello&quot;]; // 通知执行协议方法
    }
}

@end
</code></pre>

<p>最后在<code>main.m</code>中，执行：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
#import &quot;ClassB.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        ClassB *b = [ClassB new];
        [b dowork];
    }
    return 0;
}
</code></pre>

<p><strong>运行结果为：</strong><br/>
<img src="media/15038893459243/15039016722409.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二十一条 理解Objective-C的错误模型]]></title>
    <link href="https://lockxmonk.github.io/15038851180831.html"/>
    <updated>2017-08-28T09:51:58+08:00</updated>
    <id>https://lockxmonk.github.io/15038851180831.html</id>
    <content type="html"><![CDATA[
<p><code>Objective-C</code>语言不例外的也有“异常”（exception)机制，但是与其它语言肯定存在差异。我们要重新学习一下。</p>

<p>首先就是，<code>“自动引用计数”（Automatic ReferenceCounting, ARC)</code>在默认情况下不是<code>“异常安全的&quot;（exception safe)</code>。具体来说，这意味着：如果抛出异常，那么本应在作用域末尾释放的对象现在却不会自动释放了。<strong><font color=red>如果想生成“异常安全”的代码，可以通过设置编译器的标志来实现，不过这将引入一些额外代码，在不抛出异常时，也照样要执行这部分代码。</font></strong>需要打开的编译器标志叫做<code>-fobjc-arc-exceptions</code>。</p>

<p>但是我们应该注意，<mark>Objective-C语言只有在极其罕见的情况下拋出异常，异常拋出之后，无须考虑恢复问题，而且应用程序此时也应该退出。</mark>这就是说，不用再编写复杂的“异常安全”代码了。</p>

<p>异常只应该用于极其严重的错误，比如说，你编写了某个抽象基类，它的正确用法是先从中继承一个子类，然后使用这个子类。在这种情况下，如果有人直接使用了这个抽象基类，那么可以考虑抛出异常。</p>

<p>与其他语言不同，Objective-C中没办法将某个类标识为“抽象 类”。要想达成类似效果，最好的办法是在那些子类必须覆写的超类方法里抛出异常。这样的话，只要有人直接创建抽象基类的实例并使用它，即会拋出异常：</p>

<pre><code class="language-objc">-(void)mustOverrideMethod {
NSString *reason = [NSStringstringWithFormat: 
                    @&quot;%@ must be overridden&quot;,
                    NSStringFromSelector(_cmd)];
@throw [NSException
    exceptionWithName:NSInternalInconsistencyException 
    reason:reason 
    userInfo：nil];
}
</code></pre>

<p>既然异常只用于处理严重错误（fatal error,致命错误)，那么对其他错误怎么办呢？在出 现“不那么严重的错误&quot;（nonfatal error,非致命错误）时，Objective-C语言所用的编程范式为: 令方法返回<code>nil/0</code>,或是使用<code>NSError</code>，以表明其中有错误发生。例如，如果初始化方法无法根据传入的参数来初始化当前实例，那么就可以令其返回nil/0:</p>

<pre><code class="language-objc">-(id)initWithValue:(id)value { 
    if ((self = [super init])){
        if ( /* Value means instance can11 be created */ ) { 
        self = nil;
     } else {
        // Initialize instance
        }
     }
    return self;
}
</code></pre>

<p>在这种情况下，如果<code>if</code>语句发现无法用传人的参数值来初始化当前实例（比如这个方法 要求传入的value参数必须是<code>non-nil</code>的)，那么就把<code>self</code>设置成<code>nil</code>,这样的话，整个方法的 返回值也就是<code>nil</code>了。调用者发现初始化方法并没有把实例创建好，于是便可确定其中发生了错误。</p>

<p><code>NSError</code>的用法更加灵活，因为经由此对象，我们可以把导致错误的原因回报给调用者。 <code>NSError</code>对象里封装了三条信息：</p>

<ul>
<li><p><strong>Error domain(错误范围，其类型为字符串）</strong><br/>
错误发生的范围。也就是产生错误的根源，通常用一个特有的全局变量来定义。比方说，<code>“处理URL的子系统”（URL-handling subsystem)</code>在从URL中解析或取得数据时如果出错了，那么就会使用<code>NSURLErrorDomain</code>来表示错误范围。</p></li>
<li><p><strong>Error code(错误码，其类型为整数）</strong><br/>
独有的错误代码，用以指明在某个范围内具体发生了何种错误。某个特定范围内可能会发生一系列相关错误，这些错误情况通常采用<code>enum</code>来定义。例如，当<code>HTTP</code>请求出错时，可能会把<code>HTTP</code>状态码设为错误码。</p></li>
<li><p><strong>Uesr info(用户信息，其类型为字典）</strong><br/>
有关此错误的额外信息，其中或许包含一段“<code>本地化的描述”（localized description)</code>, 或许还含有导致该错误发生的另外一个错误，经由此种信息，可将相关错误串成一条 <code>“错误链”（chain of errors)</code>。</p></li>
</ul>

<p>NSError的一种常见用法是，经由方法的“输出参数”返回给调用者。比如像这样：</p>

<pre><code class="language-objc">-(BOOL)doSomething: (NSError**)error
</code></pre>

<p>用例为：</p>

<pre><code class="language-objc">NSError *error = nil;
BOOL ret = [object doSomething:&amp;error];
    if (error) {
//There was an error
}
</code></pre>

<p>也可以通过委托协议来传递此错误。有错误发生时，当前对象会把错误信息经由协议中的某个方法传给其<code>委托对象（delegate)</code>。这里不做过多说明。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。</li>
<li>在错误不那么严重的情况下，可以指派“委托方法”（delegate method)来处理错误，也可以把错误信息放在<code>NSError</code>对象里，经由“输出参数”返回给调用者。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二十条 为私有方法名加上前缀]]></title>
    <link href="https://lockxmonk.github.io/15038831182450.html"/>
    <updated>2017-08-28T09:18:38+08:00</updated>
    <id>https://lockxmonk.github.io/15038831182450.html</id>
    <content type="html"><![CDATA[
<p>一个类所做的事情，通常要比外面看到的更多。编写类的实现代码时，我们经常要编写在内部使用的方法。<strong><font color=red>这里我们要注意，一定要为这种内部实现的方法加上前缀，这有助于调试，有利于区分私有方法和公共方法。区分私有和公共方法，主要是为了方便修改内部的私有方法和相关实现代码，防止随意修改公共API。</font></strong></p>

<p>我通常在私有方法前面加上<code>“_p”</code>，例如：</p>

<pre><code class="language-objc">
-(void)p_privateMethod{
    /*.....*/
}
</code></pre>

<p>我们之所以要加上前缀，是因为OC不像java和c++语言可以在前面将方法声明为私有。每个对象都可以响应任何方法(由于其强大的动态特性造成的)。</p>

<p>加前缀的时候要避免只用一个<code>“_”</code>，<strong><font color=red>因为苹果公司在自己的类中就是这么做的，所以我们要避开这种方式，防止造成继承一个类的时候，子类无意间覆写了父类的方法。</font></strong></p>

<h2 id="toc_0">要点</h2>

<ul>
<li>给私有方法的名称加上前缀，这样可以很容易地将其同公共方法区分开。</li>
<li>不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。</li>
</ul>

]]></content>
  </entry>
  
</feed>
