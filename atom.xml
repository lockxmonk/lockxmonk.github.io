<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[LZH007]]></title>
  <link href="https://lockxmonk.github.io/atom.xml" rel="self"/>
  <link href="https://lockxmonk.github.io/"/>
  <updated>2017-08-31T14:28:48+08:00</updated>
  <id>https://lockxmonk.github.io/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[KVO的简单实现]]></title>
    <link href="https://lockxmonk.github.io/15042539845357.html"/>
    <updated>2017-09-01T16:19:44+08:00</updated>
    <id>https://lockxmonk.github.io/15042539845357.html</id>
    <content type="html"><![CDATA[
<p>之间看有关<code>OC</code>和<code>iOS</code>的书都会看到<code>KVO</code>这个名词。所以今天来学习和实现一下。简单的说<code>KVO</code>即<code>Key-Value Observing</code>,它提供一种机制,当指定的对象的属性被修改后,则对象就会接受到通知。 </p>

<p>它来源于设计模式中的观察者模式，其基本思想就是：</p>

<blockquote>
<p>一个目标对象管理所有依赖于它的观察者对象，并在它自身的状态改变时主动通知观察者对象。这个主动通知通常是通过调用各观察者对象所提供的接口方法来实现的。观察者模式较完美地将目标对象与观察者对象解耦。</p>
</blockquote>

<p>我们一般用到的都是自动实现<code>KVO</code>，所以我这里就不实现手动的<code>KVO</code>了。实现<code>KVO</code>需要两个主要的方法：</p>

<pre><code class="language-objc">//注册观察者
- (void)addObserver:(NSObject *)observer 
        forKeyPath:(NSString *)keyPath 
        options:(NSKeyValueObservingOptions)options 
        context:(void *)context;
        
//当观察的对象属性有所改变就会通知观察者，该方法用来处理变更通知
- (void)observeValueForKeyPath:(NSString *)keyPath 
                     ofObject:(id)object 
                        change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change 
                        context:(void *)context;
</code></pre>

<p>这两个方法在<code>Foundation/NSKeyValueObserving.h</code>中，<code>NSObject，NSArray，NSSet</code>均实现了以上方法，因此我们不仅可以观察普通对象，还可以观察数组或结合类对象。</p>

<p>我们来举例说明：</p>

<p>创建一个观察者类：</p>

<pre><code class="language-objc">//
//  Observer.h
//  KVO机制
//

#import &lt;Foundation/Foundation.h&gt;

@interface Observer : NSObject

@end



//  Observer.m
//  KVO机制
#import &quot;Observer.h&quot;

@implementation Observer

-(void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary&lt;NSKeyValueChangeKey,id&gt; *)change context:(void *)context{
    //判断发送过来的通知中更改的属性是否是name
    if ([keyPath isEqualToString:@&quot;name&quot;]) {
        //获取更改属性的类的信息
        Class classInfo = (__bridge Class)context;
        NSString *className = [NSString stringWithFormat:@&quot;%s&quot;, object_getClassName(classInfo)];
        NSLog(@&quot; &gt;&gt; class : [%@] , Name changed&quot;, className);
        NSLog(@&quot; &gt;&gt; old name is %@&quot;, [change objectForKey:@&quot;old&quot;]);
        NSLog(@&quot; &gt;&gt; new name is %@&quot;, [change objectForKey:@&quot;new&quot;]);
    
    }else{
        /*
         *注意：在实现处理变更通知方法 observeValueForKeyPath 时，
         *要将不能处理的 key 转发给 super 的 observeValueForKeyPath 来处理。
         */
        [super observeValueForKeyPath:keyPath ofObject:object change:change context:context];
    }
}

@end

</code></pre>

<p>然后创建一个用于观察的<code>Target</code>类</p>

<pre><code class="language-objc">//  Target.h
//  KVO机制


#import &lt;Foundation/Foundation.h&gt;

@interface Target : NSObject

@property(nonatomic,assign) NSString *name;

@end


//  Target.m
//  KVO机制


#import &quot;Target.h&quot;

@implementation Target
//给name属性一个初始值，用于检测变化
-(instancetype)init{
    if (self = [super init]) {
        _name = @&quot;yue&quot;;
    }
    return self;
}
@end
</code></pre>

<p>然后我们在<code>main.m</code>中添加观察者来执行：</p>

<pre><code class="language-objc">//  main.m
//  KVO机制


#import &lt;Foundation/Foundation.h&gt;
#import &quot;Observer.h&quot;
#import &quot;Target.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        //分别创建实例
        Observer *observer = [[Observer alloc]init];
        Target *target = [[Target alloc]init];
        
        //target 增加一个观察者，用于观察name属性
        [target addObserver:observer forKeyPath:@&quot;name&quot; options:NSKeyValueObservingOptionNew|NSKeyValueObservingOptionOld context:(__bridge void * _Nullable)([Target class])];
        //更改name属性的值，响应观察者的动作
        [target setName:@&quot;hao&quot;];
        //移除name的观察者，防止内存泄露
        [target removeObserver:observer forKeyPath:@&quot;name&quot;];
    }
    return 0;
}

</code></pre>

<p>我们运行后结果如下：</p>

<p><img src="media/15042539845357/15042556319090.jpg" alt=""/></p>

<p>可以发现是<code>Target</code>类发送过来的通知，说明属性已经变更。</p>

<p>下面我们来讨论一下传过来了的参数。其中<code>addObserver</code>方法中的<code>option：</code>参数用于指定应该包含哪种通知。其中主要有以下几种：</p>

<ul>
<li><strong>NSKeyValueObservingOptionNew</strong>：指出<code>change</code>字典应该包含有新的属性（如果适用）。</li>
<li><strong>NSKeyValueObservingOptionOld</strong>：指出<code>change</code>字典应该包含有旧的属性（如果适用）。</li>
<li><strong>NSKeyValueObservingOptionInitial</strong>：把初始化的值提供给处理方法，一旦注册，立马就会调用一次。通常它会带有新值，而不会带有旧值。</li>
<li><strong>NSKeyValueObservingOptionPrior</strong>： 分2次调用。在值改变之前和值改变之后。</li>
</ul>

<p>其中<code>observeValueForKeyPath</code>方法中的<code>change</code>参数是一个字典型数据。会根据<code>option</code>参数的变化来生成不同的数据。一般会包含<code>new</code>和<code>old</code>两个<code>key</code>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第27条 使用“class-continuation分类”隐藏实现细节]]></title>
    <link href="https://lockxmonk.github.io/15042325338088.html"/>
    <updated>2017-09-01T10:22:13+08:00</updated>
    <id>https://lockxmonk.github.io/15042325338088.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第一种用途</h2>

<p>类中经常会包含一些无须对外公布的方法及实例变最。其实这些内容也可以对外公布, 并且写明其为私有，开发者不应依赖它们。但是<code>OC</code>的动态性，使得不可能实现真正的私有方法或私有实例变量。</p>

<p>但是我们最好还是只把确实需要对外公布的那部分内容公开。那么，这种不需对外公布但却应该具有的方法及实例变量应该怎么写呢？此时，这个特殊的<code>“class-continuation分类”</code>就派上用场了。</p>

<p><font color=red><strong>“class-continuation分类”和普通的分类不同，它必须定义在其所接续的那个类的实现文件里。</strong></font></p>

<p>例如：</p>

<pre><code class="language-objc">//EOCPerson.m
@interface EOCPerson () {
    NSString * _anInstanceVariable;
}
// Method declarations here 
@end
@implementation EOCPerson {
    int _anotherInstanceVariable;
}
// Method implementations here 
@end
</code></pre>

<p>我们这样定义的目的是将这些方法或者实例变量隐藏起来，只供本类使用。即便在公共接口里将其标注为private,也还是会泄漏实现细节。</p>

<p>例如有个绝密的类，不想给其他人知道。 假设你所写的某个类拥有那个绝密类的实例，而这个实例变量又声明在公共接口里面：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

@class EOCSuperSecretClass;

@interface EOCClass : NSObject {
@private
    EOCSuperSecretClass *_secretInstance;
@end
</code></pre>

<p>这样别人就会知道有一个叫<code>EOCSuperSecretClass</code>的类了。</p>

<p>所以我们通常应该这样：</p>

<pre><code class="language-objc">// EOCClass.h
#import &lt;Foundation/Foundation.h&gt;
@interface EOCClass : NSObject 
@end

// EOCClass .m 
#import &quot;EOCClass.h&quot;
#import &quot;EOCSuperSecretClass.h&quot;
@interface EOCClass ()  {
    EOCSuperSecretClass *_secretInstance;
@end

@implementation EOCClass
// Methods here
@end
</code></pre>

<h2 id="toc_1">第二种用途</h2>

<p>编写<code>Objective-C++</code>代码时 <code>“class-continuation分类”</code>也很有用。<code>Objective-C++</code>是 <code>OC</code>与<code>C++</code>的混合体，其代码可以用这两种语言来编写。由于兼容性原因，游戏后 端一般用<code>C++</code>来写。另外，有时候要使用的第三方库可能只有<code>C++</code>绑定，此时也必须使用 <code>C++</code>来编码。在这些情况下，使用<code>&quot;class-continuation分类&quot;</code>会很方便。假设某个类打算这样写：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt; 
#include &quot;SomeCppClass.h&quot; 
@interface EOCClass : NSObject { 
@private
    SomeCppClass _cppClass;
@end
</code></pre>

<p>该类的实现文件可能叫做<code>EOCClass.mm</code>,其中<code>.mm</code>扩展名表示编译器应该将此文件按<code>Objective-C++</code>来编译，否则，就无法正确引人<code>SomeCppClass.h</code>了。然而请注意，名为<code>SomeCppClass</code>的这个<code>C++</code>类必须完全引入，因为编译器要完整地解析其定义方能得知<code>_cppClass</code>实例变量的大小。于是，只要是包含<code>EOCClass.h</code>的类，都必须编译为 <code>Objective-C++</code>才行，因为它们都引入了<code>SomeCppClass</code>类的头文件。这很快就会失控，最终 导致整个应用程序全部都要编译为ObjeCtive-C++。这样显然会增加编码的负担。</p>

<p>也许我们会想用前向声明来避免导入<code>SomeCppClass.h</code>,比如：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt; 

class SomeCppClass;

@interface EOCClass : NSObject { 
@private
    SomeCppClass *_cppClass;
@end
</code></pre>

<p>现在实例变量必须是指针，若不是，则编译器无法得知其大小，从而会报错。但所有指针的大小确实都是固定的，于是编译器只需知道其所指的类型即可。</p>

<p>虽然我们这样做没有<code>#include &quot;SomeCppClass.h&quot;</code>但是我们前向声明该类时所用的<code>class</code>关键字还是<code>C++</code>下的关键字，所以仍然需要按照<code>OC</code>来编译才行。</p>

<p>我们这里的解决方法还是一样，既然变量是<code>private</code>的，我们还是可以将它在<code>“class-continuation分类”</code>声明，改写成：</p>

<pre><code class="language-objc">// EOCClass. h

#import &lt;Foundation/Foundation.h&gt;

@interface EOCClass : NSObject


// EOCClass.mm 
#import &quot;EOCClass.h&quot;
#include &quot;SomeCppClass.h&quot;

@interface EOCClass ()  {
    SomeCppClass _cppClass;
}
@end

@implementation EOCClass 
@end
</code></pre>

<p>改写后的<code>EOCClass</code>类，其头文件里就没有<code>C++</code>代码了，使用头文件的人甚至意识不到其底层实现代码中混有<code>C++</code>成分。某些系统库用到了这种模式，比如网页浏览器框架<code>WebKit</code>,其大部分代码都以<code>C++</code>编写，然而对外展示出来的却是一套整洁的<code>Objective-C</code>接口。<code>CoreAnimation</code>里面也用到了此模式，它的许多后端代码都用<code>C++</code>写成，但对外公布的却是一套纯<code>Objective-C</code>接口。</p>

<h2 id="toc_2">第三种用法</h2>

<p>就是将<code>public</code>接口中声明为“只读”的 属性扩展为“可读写”，以便在类的内部设置其值。</p>

<p>例如：</p>

<pre><code class="language-objc">// .h文件
#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject

@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName;

-(id) initWithFirstName : (NSString*) firstName
                lastName: (NSString*) lastName;

@end

</code></pre>

<p>我们一般会在<code>“class-continuaticm分类”</code>中把这两个属性扩展为“可读写”：</p>

<pre><code class="language-objc">@interface EOCPerson ()
@property (nonatomic, copy, readwrite) NSString *firstName;
@property (nonatomic, copy, readwrite) NSString *lastName;

-(void)p_privateMethod;
@end
</code></pre>

<p>只需要用上面几行代码就行了。现在<code>EOCPerson</code>的实现代码可以随意调用<code>“setFirstName:”</code>或<code>“setLastName:”</code>这两个设置方法，也可以用“点语法”来设置属性。这样做很有用，既能令外界无法修改对象，又能在其内部按照需要管理其数据。</p>

<p>只会在类的实现代码中用到的私有方法也可以声明在<code>“class-continuation分类”</code>中。这么做比较合适，因为它描述了那些只在类实现代码中才会使用的方法。上述的私有方法加上了<code>p_</code>前缀。</p>

<h2 id="toc_3">第四种用法</h2>

<p>当我们想要把对象所遵守的协议视为私有，就可以在<code>“class-continuation分类”</code>中声明。例如：</p>

<pre><code class="language-objc">#import &quot;EOCPerson•h&quot;
#import &quot;EOCSecretDelegate.h&quot;
@interface EOCPerson () &lt;EOCSecretDelegate&gt; 
@end
@implementation EOCPerson
    /*.....*/
@end
</code></pre>

<h2 id="toc_4">要点</h2>

<ul>
<li><p>通过<code>“class-continuation分类”</code>向类中新增实例变量。</p></li>
<li><p>如果某属性在主接口中声明为“只读”，而类的内部又要用设置方法修改此属性，那么就在<code>“class-continuation分类”</code>中将其扩展为“可读写”</p></li>
<li><p>把私有方法的原型声明在<code>“class-continuation分类”</code>里面。</p></li>
<li><p>若想使类所遵循的协议不为人所知，则可于<code>“class-continuation分类”</code>中声明。 </p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第26条 不要在分类中声明属性]]></title>
    <link href="https://lockxmonk.github.io/15042285213204.html"/>
    <updated>2017-09-01T09:15:21+08:00</updated>
    <id>https://lockxmonk.github.io/15042285213204.html</id>
    <content type="html"><![CDATA[
<p>属性是封装数据的方式（参见第6条)。尽管从技术上说，分类里也可以声明属性，但这种做法还是要尽量避免。</p>

<p>原因在于，除了<code>“class-continuation分类”</code>（参见第27条）之外，其他分类都无法向类中新增实例变量，因此，它们无法把实现属性所需的实例变量合成出来。如果我们在分类中声明了一个<code>friends</code>属性。会提示我们</p>

<blockquote>
<p>warning: property  &#39;friends&#39; requires method &#39;friends&#39; to be defined - use @dynamic or provide a method implementation in this category [-Wobjc-property-implementation]</p>

<p>warning: property &#39;friends&#39; requires method &#39;setFriends:&#39; to be defined - use @dynamic or provide a method implementation in this category [-Wobjc-property-implementation]</p>
</blockquote>

<p>说明系统没有为我们自动合成属性的<code>set</code>和<code>get</code>方法。我们要自己在分类中去实现，可以把存取方法声明为<code>@dynamic</code>, 也就是说，这些方法等到运行期再提供，编译器目前是看不见的。如果决定使用消息转发机制（参见第12条）在运行期拦截方法调用，并提供其实现，那么或许可以采用这种做法。</p>

<p>当然我们也可以使用关联对象的方法。<strong><mark>但是还是不建议我们在分类中定义封装数据的属性。</mark></strong></p>

<p>正确做法是把所有属性都定义在主接口里。类所封装的全部数据都应该定义在主接口中，这里是唯一能够定义实例变量(也就是数据）的地方。而属性只是定义实例变量及相关存取方法所用的“语法糖”，所以也应遵循同实例变量一样的规则。<mark>至于分类机制,则应将其理解为一种手段，目标在于扩展类的功能，而非封装数据。</mark></p>

<p>但是有时候，只读属性（readonly）可以在分类中使用，但是我们要手动实现它的<code>get</code>方法。当然我们不建议搞特殊。最好还是在主接口中声明。然后在分类中声明一个获取方法，来获取数据。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>把封装数据所用的全部属性都定义在主接口里。</li>
<li>在<code>“class-contimiation分类”</code>之外的其他分类中，可以定义存取方法，但尽量不要定义属性。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第25条 总是为第三方类的分类名称加前缀]]></title>
    <link href="https://lockxmonk.github.io/15042274785369.html"/>
    <updated>2017-09-01T08:57:58+08:00</updated>
    <id>https://lockxmonk.github.io/15042274785369.html</id>
    <content type="html"><![CDATA[
<p>分类机制通常用于向无源码的既有类中新增功能。这个特性极为强大，但在使用时也很容易忽视其中可能产生的问题。</p>

<p>我们在分类中添加方法，系统在运行期时会将分类中的方法加入类中。运行期系统会把分类中所实现的每个方法都加入类的方法列表中。<strong><font color=red>如果类中本来就有此方法，而分类又实现了一次，那么分类中的方法会覆盖原来那一份实现代码。实际上可能会发生很多次榭盖，比如某个分类中的方法覆盖了“主实现”中的相关方法，而另外一个分类 中的方法又覆盖了这个分类中的方法。多次覆盖的结果以最后一个分类为准。</font></strong></p>

<p>所以我们为了解决此问题，一般做法是：<strong><font color=red>以命名空间来区别各个分类的名称与其中所定义的方法。</font></strong>我们这里的命名空间只是在相关名称前都加上公用的前缀。</p>

<p>所以我们举例来说就是这样的：</p>

<pre><code class="language-objc">@interface NSString (ABC_HTTP)
//Encode a string with URL encoding 
-(NSString*) abc_urlEncodedStiring;

// Decode a URL ©ncodeci string
-(NSString*) abc_urlDecodedString;
@end
</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li>向第三方类中添加分类时，总应给其名称加上你专用的前缀。</li>
<li>向第三方类中添加分类时，总应给其中的方法名加上你专用的前缀。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[指针问题]]></title>
    <link href="https://lockxmonk.github.io/15041689865677.html"/>
    <updated>2017-08-31T16:43:06+08:00</updated>
    <id>https://lockxmonk.github.io/15041689865677.html</id>
    <content type="html"><![CDATA[
<pre><code>#include &lt;stdio.h&gt;  
   
int main() {  
      
    int num = 10;  
    int *p1 = &amp;num//p1存储num的地址  
    int **p2 = &amp;p1;//p2存储p1的地址  
    int ***p3 = &amp;p2;//p3存储p2的地址  
      
    *p1 = 100;//*p1取出num变量  
    **p2 = 200;//**p2取出num变量  
    ***p3 = 300;//***p3也是取出num变量  
    printf(&quot;num = %d\n&quot;,num);  
    printf(&quot;num = %d\n&quot;,***p3);  
      
    return 0;  
}  
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[消息转发机制的简单实现]]></title>
    <link href="https://lockxmonk.github.io/15041475233104.html"/>
    <updated>2017-08-31T10:45:23+08:00</updated>
    <id>https://lockxmonk.github.io/15041475233104.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">第一种</h2>

<p>首先我们来实现这两个方法：<br/><br/>
+(BOOL)resolveInstanceMethod:    (SEL)sel</p>

<p>+(BOOL)resolveClassMethod:(SEL)sel</p>

<p>这两个方法用于方法的动态解析，当一个对象执行一个方法时，发现没有找到所对应的实现。这是就要靠上面的方法来动态添加实现了</p>

<p>举例来说：</p>

<pre><code class="language-objc">//
//  Person.h
//  消息转发

#import &lt;Foundation/Foundation.h&gt;

@interface Person : NSObject
//接口中声明一个方法
-(void)run;

@end

//
//  Person.m
//  消息转发


#import &quot;Person.h&quot;
#import &lt;objc/runtime.h&gt;
@implementation Person //在部署的时候我们没有实现接口中声明的run方法


//编写C函数实现代码
void addrun (id self, SEL _cmd){
    NSLog(@&quot;%@　%s&quot;,self,sel_getName(_cmd));
}

+(BOOL)resolveInstanceMethod:(SEL)sel{
    if (sel ==@selector(run)) {
    //如果响应run方法，我们动态将上面实现的addrun方法添加到当前类中。
        class_addMethod(self, sel, (IMP)addrun, &quot;v@:&quot;);
    }
    
    return [super resolveInstanceMethod:sel];
}

@end

//  main.m
//  消息转发


#import &lt;Foundation/Foundation.h&gt;
#import &quot;Person.h&quot;
int main(int argc, const char * argv[]) {
    @autoreleasepool {
    //执行代码
        Person *man = [Person new];
        [man run];
    }
    return 0;
}
</code></pre>

<p>结果为：<img src="media/15041475233104/15041480973843.jpg" alt=""/><br/>
说明执行了我们添加的那个方法，而并没有报错。</p>

<h2 id="toc_1">第二种</h2>

<p>我们可以动态的向类中添加方法来解决无选择子的问题，我们也可以选择转换接受者来选择可以处理该选择子的对象。</p>

<p>首先当我们，没有处理第一种方法的时候，运行期系统会给我们第二个机会，询问是否有备用的接受者。我们就要实现<code>orwardingTargetForSelector</code>了</p>

<p>我们举例来看：</p>

<p>首先我们先创建一个新类Car，并且创建一个<code>run</code>方法：</p>

<p><img src="media/15041475233104/15041487720558.jpg" alt=""/></p>

<p>然后在Person.m中，不对<code>resolveInstanceMethod</code>进行任何处理，在<code>forwardingTargetForSelector</code>中返回一个<code>Car</code>实例：<br/>
<img src="media/15041475233104/15041488721835.jpg" alt=""/></p>

<p>然后继续执行<code>main.m</code>文件，运行为：<br/>
<img src="media/15041475233104/15041489461207.jpg" alt=""/></p>

<p>说明系统已经将所要实现方法的对象转换为<code>Car</code>的实例对象。</p>

<h2 id="toc_2">第三种</h2>

<p>如果前两种我们都没有实现的话，就会进入第三种，执行完整的消息转发机制。</p>

<p>就会调用两个方法<code>methodSignatureForSelector</code>和<code>forwardInvocation</code></p>

<p><code>methodSignatureForSelector</code>方法用来指定方法签名，返回<code>nil</code>表示不处理，否则会进入下一步调用<code>forwardInvocation</code>方法。其中这个签名就是给<code>forwardInvocation</code>中的参数<code>NSInvocation</code>调用的。</p>

<p><img src="media/15041475233104/15041604848181.jpg" alt=""/></p>

<p>开头我们要找的错误<code>unrecognized selector sent to instance</code>原因，原来就是因为<code>methodSignatureForSelector</code>这个方法中，由于没有找到<code>run</code>对应的实现方法，所以返回了一个空的方法签名，最终导致程序报错崩溃。</p>

<p>所以我们需要做的是自己新建方法签名，再在<code>forwardInvocation</code>中用你要转发的那个对象调用这个对应的签名，这样也实现了消息转发。</p>

<p>关于生成签名的类型<code>&quot;v@:&quot;</code>解释一下。每一个方法会默认隐藏两个参数，<code>self</code>、<code>_cmd</code>，<code>self</code>代表方法调用者，<code>_cmd</code>代表这个方法的<code>SEL</code>，签名类型就是用来描述这个方法的返回值、参数的，<code>v</code>代表返回值为<code>void</code>，<code>@</code>表示<code>self</code>，<code>:</code>表示<code>_cmd</code>。</p>

<p><strong>所以第二个和第三个字符必须是<code>“@:”</code> ，第一个字符是返回类型.</strong></p>

<p><strong>具体的可以看一下了解</strong>：<a href="https://developer.apple.com/library/etc/redirect/xcode/content/1189/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html#//apple_ref/doc/uid/TP40008048-CH100">Type Encodeing</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第24条 将类的实现代码分散到便于管理的数个分类之中]]></title>
    <link href="https://lockxmonk.github.io/15041406291157.html"/>
    <updated>2017-08-31T08:50:29+08:00</updated>
    <id>https://lockxmonk.github.io/15041406291157.html</id>
    <content type="html"><![CDATA[
<p>一个类里面经常会填满各种各样的方法，有时候将那么多方法放在一个类的实现文件里是合理的。但是我们如果通过OC的<code>分类</code>机制将类代码按逻辑划入几个分区中，这对于开发和调试都有帮助。</p>

<p>我们来举个例子，我们对个人信息建模分类：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
Sinterface EOCPerson : NSObject
@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName; 
@property (nonatomic, strong, readonly) NSArray *friends;

-(id)initWithFirstName:(NSString*) firstName
            andLastName:(NSString*)lastName;
            
/* Friendship methods */
-(void)addFriend:(EOCPerson*)person;
- (void)removeFriend:(EOCPerson*)person;
-(BOOL)isFriendsWith:(EOCPerson*)person;

/* Work methods */
-(void)performDaysWork;
-(void)takeVacationFromWork;

/* Play methods */
-(void)goToTheCinema;
-(void)goToSportsGame;
</code></pre>

<p>在实现该类时，所有方法的代码可能会写在一个大文件里。显得很臃肿。所以可以用“分类”机制把刚才的类改写成下面这样：</p>

<pre><code class="language-objc">@import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject
@property (nonatomic, strong, readonly) NSArray *friends;
@property (nonatomic, copy, readonly) NSString *lastName;
@property (nonatomic, copy, readonly) NSString *firstName; 
 
-(id) initWithFirstName: (NSString*)firstName
            andLastNames:(NSString*)lastName;

@end

@interface EOCPerson (Friendship)
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;
-(BOOL)isFriendsWith:(EOCPerson*)person; 
@end

@interface EOCPerson (Work)
-(void)performDaysWork;
-(void)takeVacationFromWork; 
@end

@interface EOCPerson (Play)
-(void)goToTheCinema;
-(void)goToSportsGame;
@end
</code></pre>

<p>现在，类的实现代码按照方法分成了好几个部分。所以说，这项语言特性当然就叫做<code>“分类”</code>啦。</p>

<p>但是这些代码还是在一个文件中声明的，所以我们还可以将其拆分为多个文件：</p>

<ul>
<li>  EOCPerson+Friendship(.h/.m)</li>
<li> EOCPerson+Work(.h/.m)</li>
<li> EOCPerson+Play(.h/.m)</li>
</ul>

<p>比方说，与交友功能相关的那个分类可以这样写：</p>

<pre><code class="language-objc">// EOCPerson+Friendship.h
#import &quot;EOCPerson.h&quot;
@interface EOCPerson (Friendship)
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;
-(BOOL)isFriendsWith:(EOCPerson*)person;
@end

// EOCPerson+Friendship.m 

#import EOCPerson+Friendship.h
@implementation EOCPerson (Friendship)
-(void)addFriend:(EOCPerson*)person {
    /*...*/
}
-(void)removeFriend:(EOCPerson*)person {
    /*...*/
}
-(BOOL)isFriendsWith:(EOCPerson*)person {
    /*...*/
}
@end
</code></pre>

<p>通过分类机制，可以把类代码分成很多个易于管理的小块，以便单独检视。<mark>使用分类机制之后，如果想用分类中的方法，那么要记得在引入<code>EOCPerson.h</code>时一并引入分类的头文件</mark>。</p>

<p>这样使用分类之后，对于某个分类中的所有 方法来说，分类名称都会出现在其符号中。例如，<code>“addFriend:”</code>方法的“符号名”（symbol name)如下：</p>

<pre><code class="language-objc">-[EOCPerson(Friendship) addFriend:]
</code></pre>

<p>也可以创建名为<code>Private</code>的分类把这种方法全都放在里面。这个分类里的方法一般只会在类或框架内部使用，而无须对外公布。这样一来，类的使用者有时可能会在査看回溯信息时发现<code>private</code>一词，就知道不应该直接调用此方法了。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>使用分类机制把类的实现代码划分成易于管理的小块。</li>
<li>将应该视为“私有”的方法归入名叫<code>Private</code>的分类中，以隐藏实现细节。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS基础概念总结（一）]]></title>
    <link href="https://lockxmonk.github.io/15040800241477.html"/>
    <updated>2017-08-30T16:00:24+08:00</updated>
    <id>https://lockxmonk.github.io/15040800241477.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">1. OC的前向声明</a>
</li>
<li>
<a href="#toc_1">2. #import和#include的区别？</a>
</li>
<li>
<a href="#toc_2">3. 用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数</a>
</li>
<li>
<a href="#toc_3">4.property属性的修饰符有什么样的作用</a>
</li>
<li>
<a href="#toc_4">5. self.name=@object和_name=@object有什么不同?</a>
</li>
</ul>


<h2 id="toc_0">1. OC的前向声明</h2>

<p>由于在编译 <code>Person</code> 类的文件时，不需要知道Dog类的全部细节（Dog类中的方法），若使用 <code>#import &quot;Dog.h&quot;</code> 则必须知道<code>Dog.h</code>的全部细节，而Person类中只需要知道类名Dog就可以了,可用通过以下方式告诉编译器<code>@class Dog;</code>这种方式叫<code>向前声明 （forward declaring）</code>,当<code>.m</code>文件中要了解实现细节的时候在引入<code>dog.h</code></p>

<pre><code class="language-objc">//Person.h
#import &lt;Foundation/Foundation.h&gt;
@class Dog;  //前向声明
@interface Person : NSObject
@property (nonatomic, strong) NSString *name;
@property (nonatomic, strong) Dog *dog;

</code></pre>

<ul>
<li><strong>向前声明解决了两个类互相引用的问题。</strong></li>
<li><strong>向前声明可用降低编译时间，除非必要，则可以使用向前申明，并在实现文件中映入头文件，这样做可用尽量降低类之间的耦合。</strong></li>
</ul>

<h2 id="toc_1">2. #import和#include的区别？</h2>

<p><code>#import</code>是<code>Objective-C</code>导入头文件的语法，可保证不会重复导入。<br/>
<code>#include</code>是C/C++导入头文件的语法，如果是objective-c与C/C++混编码，对于C/C++类型的文件，还是使用#include来引入，这种写法需要添加防重复导入的语法。</p>

<h2 id="toc_2">3. 用NSLog函数输出一个浮点类型，结果四舍五入，并保留一位小数</h2>

<pre><code class="language-objc">float money = 1.011;
NSLog(@&quot;%.1f&quot;, money);
</code></pre>

<h2 id="toc_3">4.property属性的修饰符有什么样的作用</h2>

<p><code>property</code>是属性访问声明，扩号内支持以下几个属性：</p>

<ul>
<li><strong>getter=getName、setter=setName</strong>：设置setter与getter的方法名</li>
<li><p><strong>readwrite、readonly</strong>：设置可供访问级别</p></li>
<li><p><strong>assign</strong>：方法直接赋值，不进行任何retain操作，为了解决原类型与环循引用问题</p></li>
<li><p><strong>retain</strong>：其setter方法对参数进行release旧值再retain新值，所有实现都是这个顺序</p></li>
<li><p><strong>strong</strong>：此特质表明该属性定义了一种“拥有关系”（owning relationship)。为这种属性设置新值时，设置方法会先保留新值，并释放旧值，然后再将新值设置上去。</p></li>
<li><p><strong>weak</strong>  此特质表明该属性定义了一种“非拥有关系”（nonowning relationship)。<strong>为这种属性设置新值时，设置方法既不保留新值，也不释放旧值</strong>。此特质同assign类似,然而在属性所指的对象遭到摧毁时，属性值也会清空（nil out)。</p></li>
<li><p><strong>unsafe_unretained</strong>  此特质的语义和assign相同，但是它适用于“对象类型”（object type),该特质表达一种“非拥有关系”（“不保留”，unretained),<strong>当目标对象遭到摧毁时，属性值不会自动清空（“不安全”，unsafe),这一点与weak有区别</strong>。</p></li>
<li><p><strong>copy</strong>：其setter方法进行copy操作，与retain处理流程一样，先对旧值release，再copy出新的对象，retainCount为1。这是为了减少对上下文的依赖而引入的机制。</p></li>
<li><p><strong>nonatomic</strong>：非原子性访问，不加同步， 多线程并发访问会提高性能。注意，如果不加此属性，则默认是两个访问方法都为原子型事务访问。</p></li>
</ul>

<h2 id="toc_4">5. self.name=@object和_name=@object有什么不同?</h2>

<p><code>self.name =”object”：</code>会调用对象的<code>setName()</code>方法；<code>name = “object”：</code>会直接把<code>&quot;object&quot;</code>字符串赋值给当前对象的<code>name</code>属性。后者的效率会很高，因为没有调用set方法而是直接方法问内存。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第23条：通过委托与数据源协议进行对象间通信]]></title>
    <link href="https://lockxmonk.github.io/15040539328891.html"/>
    <updated>2017-08-30T08:45:32+08:00</updated>
    <id>https://lockxmonk.github.io/15040539328891.html</id>
    <content type="html"><![CDATA[
<p>Objective-C语言有一项特性叫做<code>“协议”（protocol)</code>，它与<code>Java的“接口&quot;（interface)类似</code>。 <code>Objective-C</code>不支持多重继承，因而我们把某个类应该实现的一系列方法定义在协议里面。<strong><mark>协议最为常见的用途是实现委托模式，不过也有其他用法。</mark></strong>理解并善用协议可令代码变得更易维护，因为协议这种方式能很好地描述接口。</p>

<p><strong><font color=red><code>“分类”（Category)</code>也是<code>Objective-C</code>的一项重要语言特性。利用分类机制，我们无须继承子类即可直接为当前类添加方法，而在其他编程语言中，则需通过继承子类来实现。</font></strong>由于 <code>Objective-C</code>运行期系统是髙度动态的，所以才能支持这一特性，然而，其中也隐藏着一些陷阱，因此在使用分类之前，应该先理解它。</p>

<p>OC中的通信方式有很多种，我们经常使用一种叫做<code>“委托模式”（Delegate pattem)</code>的编程设计模式来实现对象间的通信，<strong><font color=red>该模式的主旨是: 定义一套接口，某对象若想接受另一个对象的委托，则需遵从此接口，以便成为其“委托对象”（delegate)。而这“另一个对象”则可以给其委托对象回传一些信息，也可以在发生相关事件时通知委托对象。</font></strong></p>

<p>此模式可将数据与业务逻辑解耦。比方说，用户界面里有个显示一系列数据所用的视图，那么，此视图只应包含显示数据所需的逻辑代码，而不应决定要显示何种数据以及数据之间如何交互等问题。<mark>视图对象的属性中，可以包含负责数据与事件处理的对象。这两种对象分别称为“数据源&quot;（data source)与“委托”（delegate)</mark>。</p>

<p>我们来举个假设要编写一个从网上获取数据的类。此类也许要从远程服务器的某个资源里获取数据。那个远程服务器可能过很长时间才会应答，而在获取数据的过程中阻塞应用程序则是一种非常糟糕的做法。于是，在这种情况下，我们通常会使用委托模式：获取网络数据的类含有一个“委托对象”，在获取完数据之后，它会回调这个委托对象。</p>

<p><code>EOCDataModel</code>对象就是<code>EOCNetworkFetcher</code>的委托对象。<code>EOCDataModel</code>请求<code>EOCNetworkFetcher</code> &quot;以异步方式执行一项任务&quot;（perform a task asynchronously),<code>EOCNetworkFetcher</code>在执行完这项任务之后，就会通知其委托对象，也就是<code>EOCDataModel</code>。<br/>
<img src="media/15040539328891/15040737659871.jpg" alt=""/></p>

<p>利用协议机制，很容易就能以<code>Objective-C</code>代码实现此模式。在图4-1所演示的这种情况 下，协议可以这样来定义：</p>

<pre><code class="language-objc">@protocol EOCNetworkFetcherDelegate 
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
        didReceiveData:(NSData*)data;
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
     didFailWithError:(NSError*)error;
@end
</code></pre>

<p><strong><font color=red>委托协议名通常是在相关类名后面加上Delegate一词，整个类名采用“驼峰法”来写。</font></strong> 以这种方式来命名委托协议的话，使用此代码的人很快就能理解其含义了。</p>

<p>然后我们要在这个<code>EOCNetworkFetcher</code>中设置一个属性来存放其委托对象。接口可以写成这样：</p>

<pre><code class="language-objc">@interface EOCNetworkFetcher : NSObject 
@property (nonatomic, weak) id&lt;EOCNetworkFetcherDelegate&gt; delegate; 
</code></pre>

<p><strong><font color=red>一定要注意：这个属性需定义成<code>weak</code>,而非<code>strong</code>,因为两者之间必须为“非拥有关系” (nonowning relationship)。通常情况下，扮演<code>delegate</code>的那个对象也要持有本对象。所以我们要用weak来声明一种非拥有关系来避免“保留环”。</font></strong></p>

<p><img src="media/15040539328891/15040757649151.jpg" alt=""/></p>

<p>实现委托对象的办法是声明某个类遵从委托协议，然后把协议中想实现的那些方法在类 里实现出来。某类若要遵从委托协议，可以在其接口中声明，也可以在<code>“class-contimiation分类”</code>中声明。如果要向外界公布此类实现了某协议，那么就在接口中声明，而如果这个协议是个委托协议的话，那么通常只会在类的内部使用。所以说，这种情况一般都是在<code>“class-continuation分类”</code>里声明的：</p>

<pre><code class="language-objc">@implementation EOCDataModel () &lt;EOCNetworkFetcherDelegate&gt; 
@end
@implementation EOCDataModel
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
        didReceiveData:(NSData*)data {
/* Handle data */
}
-(void)networkFetcher:(EOCNetworkFetcher*)fetcher 
        didFailWithError:(NSError*)error {
/* Handle error */
}
@and
</code></pre>

<p>之后要用委托对象来调用方法时，必须提前使用类型信息査询方法（参见第14条）判断这个委托对象能否响应相关选择子。以<code>EOCNetworkFetcher</code>为例，应该这样写：</p>

<pre><code class="language-objc">NSData *data = /*data obtained from network */;
if ([_delegate respondsToSelector:
     @selector(networkFetcher:didReceiveData:)))
{ 
    [_delegate networkFetcher:self  didReceiveData:data];
}
</code></pre>

<p>但是当方法变多了，我们就会频繁的来检查委托对象是否能够相应选择子，其实这个操作检测一次就可以了，<strong><font color=red>所以我们可以用“位段（bitfield)”数据类型将该方法响应能力缓存起来。</font></strong></p>

<p>这是一项乏人问津的C语言特性，但在此处用起来却正合适。我们可以把结构体中某个字段所占用的二进制位个数设为特定的值。比如像这样：</p>

<pre><code class="language-objc">struct data {
    unsigned int fieldA : 8; 
    unsigned int fieldB : 4; 
    unsigned int fieldC : 2; 
    unsigned int fieldD : 1;
};
</code></pre>

<p>在结构体中，<code>fieldA</code>位段将占用8个二进制位，<code>fieldB</code>占用4个，<code>fieldC</code>占用两个，<code>fieldD</code>占用1个。于是，<code>fieldA</code>可以表示0至255之间的值，而<code>fieldD</code>则可以表示0或1这两个值。 我们举例子来说的话就是：</p>

<pre><code class="language-objc">@interface EOCNetworkFetcher ()     {
    struct {
        unsigned int didReceiveData :   1;
        unsigned int didFailWithError : 1;      
        unsigned int didUpdateProgressTo : 1;
        }_delegateFlags;
</code></pre>

<p>这个结构体用来缓存委托对象是否能响应特定的选择子。实现缓存功能所用的代码可以 写在<code>delegate</code>属性所对应的设置方法里：</p>

<pre><code class="language-objc">-(void)setDelegate:(id&lt;EOCNetworkFetcherDelegate&gt;)delegate {
    _delegate = delegate;   
    
    _delegateFlags.didReceiveData  = 
        [delegate respondsToSelector:
              @selector(networkFetcher:didReceiveData:)]; 
    
    _delegateFlags.didFailWithError =
        [delegate respondsToSelector:
              @selector(networkFetcher:didFailWithError:)]; 

    _delegateFlags.didUpdateProgressTo =
        [delegate respondsToSelector:
              @selector(networkFetcher:didUpdateProgressTo:)];

}
</code></pre>

<p>这样的话，每次调用<code>delegate</code>的相关方法之前，就不用检测委托对象是否能响应给定的选择子了，而是直接查询结构体里的标志：</p>

<pre><code class="language-objc">if (_delegateFlags.didUpdateProgressTo) {
    [_delegate networkFetcher:self
          didUpdateProgressTo:currentProgress];
}
</code></pre>

<p>在相关方法要调用很多次时，值得进行这种优化。而是否需要优化，则应依照具体代码来定。这就需要分析代码性能，并找出瓶颈，若发现执行速度需要改进，则可使用此技巧。如果要频繁通过数据源协议从数据源中获取多份相互独立的数据，那么这项优化技术极有可能会提高程序效率.</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>委托模式为对象提供了一套接口，使其可由此将相关事件告知其他对象。</li>
<li>将委托对象应该支持的接口定义成协议，在协议中把可能需要处理的事件定义成方法。</li>
<li>当某对象需要从另外一个对象中获取数据时，可以使用委托模式。这种情境下，该模式亦称“数据源协议”（data source protocal)。</li>
<li>若有必要，可实现含有位段的结构体，将委托对象是否能响应相关协议方法这一信息 缓存至其中。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二十二条 理解NSCopying协议]]></title>
    <link href="https://lockxmonk.github.io/15039678296448.html"/>
    <updated>2017-08-29T08:50:29+08:00</updated>
    <id>https://lockxmonk.github.io/15039678296448.html</id>
    <content type="html"><![CDATA[
<p>使用对象时经常需要拷贝它。在<code>Objective-C</code>中，此操作通过copy方法完成。如果想令自己的类支持拷贝操作，那就要实现<code>NSCopying</code>协议，该协议只有一个方法：</p>

<pre><code class="language-objc">-(id)copyWithZone:(NSZone*)zone
</code></pre>

<p>为何会出现<code>NSZone</code>呢？因为以前开发程序时，会据此把内存分成不同的“区”（zone), 而对象会创建在某个区里面。现在不用了，每个程序只有一个区：<code>“默认区”（default zone)</code>。 所以说，尽管必须实现这个方法，但是你不必担心其中的<code>zone</code>参数。</p>

<p><strong><font color=red>copy方法由NSObject实现，该方法只是以“默认区”为参数来调用<code>“copyWithZone:”</code>。 我们总是想覆写copy方法，其实真正需要实现的却是<code>“copyWithZone:”</code>方法。这里我们一定要注意。</font></strong></p>

<p><mark>若想使某个类支持拷贝功能，只需声明该类遵从NSCopying协议，并实现其中的那个方法即可。</mark>比方说，有个表示个人信息的类，可以在其接口定义中声明此类遵从 <code>NSCopying</code> 协议：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject &lt;NSCopying&gt;
@property (nonatomic, copy, readonly) NSString *firstName;
@property (nonatomic, copy, readonly) NSString *lastName;
-(id)initWithFirstName:(NSString*)firstName
          andLastName: (NSString*)lastName;

@end
</code></pre>

<p>然后，实现协议中规定的方法：</p>

<pre><code class="language-objc">-(id)copyWithZone:(NSZone*)zone {
    EOCPerson *copy = [[[self class] allocWithZone:zone]
                     initWithFirstName :_firstName
                            andLastName:_lastName];
    return copy;
}
</code></pre>

<p>当然我们又是也要考虑具体情况，除了要拷贝对象，还要完成其他一些操作，比如类对象中的数据结构可能并未在初始化方法中设置好，需要另行设置。</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@interface EOCPerson : NSObject&lt;NSCopying&gt;
@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName;
-(id)initWithFirstName: (NSString*) firstName
            andLastName:(NSString*)lastName;
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;

@end

@implementation EOCPerson {
    NSMutableSet *_friends;
)
- (id)initWithFirstName: (NSString*) firstName
             andLastName:(NSString*)lastName { 
    if ((self = [super init])) {
    _firstName = [firstName copy];
    _lastName = [lastName copy];
    _friends = [NSMutableSet newJ;
    }
    return self;

}
-(void)addFriend:(EOCPerson*)person {
    [_friends addObject:person];
}
-(void)removeFriend:(EOCPerson*)person {
    [_friends removeObject:person];
}
-(id)copyWithZone:(NSZone*)zone {
    EOCPerson *copy =[[[self class] allocWithZone:zone]
                        initWithFirstName: _firstName
                        andLastName:_lastName]; 
    copy-&gt;_friends = [_friends mutableCopy]; 
    return copy;
}
@end
</code></pre>

<p><mark>这次所实现的方法比原来多了一些代码，它把本对象的<code>_friends</code>实例变量复制了一份, 令<code>copy</code>对象的<code>_frieiids</code>实例变量指向这个复制过的<code>set</code>。注意，这里使用了<code>-&gt;</code>语法，因为<code>_friends</code>并非属性，只是个在内部使用的实例变量。</mark>其实也可以声明一个属性来表示它，不过由于该变量不会在本类之外使用，所以那么做没必要。</p>

<p>我们在上面发现了一个<code>mutableCopy</code>方法，此方法来自另一个叫做<code>NSMutableCopying</code>的协议。该协议与<code>NSCopying</code>类似，也只定义了一个方法，然而方法名不同：</p>

<pre><code class="language-objc">- (id)mutableCopyWithZone:(NSZone*)zone
</code></pre>

<p><code>mutableCopy</code>这个“辅助方法”（helper)与<code>copy</code>相似，也是用默认的<code>zone</code>参数来调<code>“mutableCopyWithZone:”</code>。如果你的类分为可变版本（mutable variant)与不可变版本 (immutable variant),那么就应该实现<code>NSMutableCopying</code>。若采用此模式，则在可变类中覆写<code>“copyWithZone:”</code>方法时，<font color=red>不要返回可变的拷贝，而应返回一份不可变的版本。</font><mark><strong>无论当前实例是否可变，若需获取其可变版本的拷贝，均应调用<code>mutableCopy</code>方法。同理，若需要不可变的拷贝，则总应通过<code>copy</code>方法来获取。</strong></mark></p>

<p>对于不可变的<code>NSArray</code>与可变的<code>NSMutableArray</code>来说，下列关系总是成立的：</p>

<pre><code class="language-objc">-[NSMutableArray copy] =&gt;NSArray
-[NSArray mutableCopy】 =&gt;NSMutableArray
</code></pre>

<p>所谓我们会发现：<strong><font color=red>在可变对象上调用copy方法会返冋另外一个不可变类的实例。这样做是为了能在可变版本与不可变版本之间自由切换。</font></strong></p>

<h2 id="toc_0">浅拷贝与深拷贝</h2>

<p>在编写拷贝方法时，还要决定一个问题，就是应该执行<code>“深拷贝”（deep copy)</code>还是<code>“浅拷贝”（shallow copy)</code>。<font color=red>深拷贝的意思就是：在拷贝对象自身时，将其底层数据也一并复制过 去。</font><mark><code>Foundation</code>框架中的所有<code>collection</code>类在默认情况下都执行浅拷贝，也就是说，只拷贝容器对象本身，而不复制其中数据。这样做的主要原因在于，容器内的对象未必都能拷贝，而且调用者也未必想在拷贝容器时一并拷贝其中的每个对象</mark>。</p>

<p><img src="media/15039678296448/15039726127594.jpg" alt=""/></p>

<p>一般情况下，我们会遵照系统框架所使用的那种模式，在自定义的类中以浅拷贝的方式实现<code>“copyWithZone:”</code>方法。但如果有必要的话，也可以增加一个执行深拷贝的方法。以 <code>NSSet</code>为例，该类提供了下面这个初始化方法，用以执行深拷贝：</p>

<pre><code class="language-objc">-(id)initWithSet:(NSArray*)array copyltems:(BOOL)copyltems
</code></pre>

<p>若<code>copyltem</code>参数设为<code>YES</code>,则该方法会向数组中的每个元素发送<code>copy</code>消息，用拷贝好的元素创建新的set,并将其返回给调用者。<br/>
在<code>EOCPerson</code>那个例子中，存放朋友对象的<code>set</code>是用<code>“ copyWithZone:”</code>方法来拷贝的， 根据刚才讲的内容可知，这种浅拷贝方式不会逐个复制<code>set</code>中的元素。若需要深拷贝的话, 则可像下面这样，编写一个专供深拷贝所用的方法：</p>

<pre><code class="language-objc">-(id)deepCopy {
    EOCPerson *copy =[[[self class] alloc]
                initWithFirstName:_firstName
                      andLastName:_lastName];               
    copy-&gt;_friends = [[NSMutableSet alloc] initWithSetfriends copyltems:YES];
    return copy;
}
</code></pre>

<p>因为没有专门定义深拷贝的协议，所以其具体执行方式由每个类来确定，你只需决定自 己所写的类是否要提供深拷贝方法即可。另外，不要假定遵从了 <code>NSCopying</code>协议的对象都会执行深拷贝。在绝大多数情况下，执行的都是浅拷贝。如果需要在某对象上执行深拷贝，那 么除非该类的文档说它是用深拷贝来实现<code>NSCopying</code>协议的，否则，要么寻找能够执行深拷贝的相关方法，要么自己编写方法来做。</p>

<h2 id="toc_1">要点</h2>

<ul>
<li>若想令自己所写的对象具有拷贝功能，则需实现<code>NSCopying</code>协议。</li>
<li>如果自定义的对象分为可变版本与不可变版本，那么就要同时实现<code>NSCopying</code>与 <code>NSMutableCopying</code> 协议。</li>
<li>复制对象时需决定采用浅拷贝还是深拷贝，一般情况下应该尽量执行浅拷贝。</li>
<li>如果你所写的对象需要深拷贝，那么可考虑新增一个专门执行深拷贝的方法。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS 中协议和委托传值的用法]]></title>
    <link href="https://lockxmonk.github.io/15038893459243.html"/>
    <updated>2017-08-28T11:02:25+08:00</updated>
    <id>https://lockxmonk.github.io/15038893459243.html</id>
    <content type="html"><![CDATA[
<p>虽然之前一直听过和看过委托模式，但是并没有实际的操作。这次来实现一个简单的委托样例。来加深自己的了解。</p>

<p>项目目录结构为：<br/>
<img src="media/15038893459243/15039018875452.jpg" alt=""/></p>

<p>首先我们创建一个协议：<code>ProtocolA</code></p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;

@protocol ProtocolA &lt;NSObject&gt;

@required

-(void)sendValue:(NSString*)str;


@end
</code></pre>

<p>其中有一个方法<code>sendValue:</code>，由于加上了<code>@required</code>前缀，所以这个方法时必须实现的。如果想要一个方法是可选则实现与否，则要加上<code>@optional</code>。</p>

<p>之后我们创建一个类<code>ClassA</code>：</p>

<pre><code class="language-objc">//该类遵循ProtocolA，并且实现了它的方法

//ClassA.h
#import &lt;Foundation/Foundation.h&gt;
#import &quot;ProtocolA.h&quot;

@interface ClassA : NSObject&lt;ProtocolA&gt;

@end

//ClassA.m
#import &quot;ClassA.h&quot;

@implementation ClassA

-(void)sendValue:(NSString *)str{
    NSLog(@&quot;我是传过来的值：%@&quot; , str);
}

@end

</code></pre>

<p>写到这里，我们大概可以猜到，我们想让<code>ClassA</code>的实例来接受一个委托实现<code>ProtocolA</code>中的方法。</p>

<p>所以我们这里继续创建一个<code>ClassB</code>，让它来发出一个委托，让<code>ClassA</code>代替它实现。</p>

<pre><code class="language-objc">//ClassB.h

#import &lt;Foundation/Foundation.h&gt;
#import &quot;ClassA.h&quot;

@interface ClassB : NSObject
//这里我们创建了一个delegate对象，用于设置委托对象。
@property(weak,nonatomic) id&lt;ProtocolA&gt; delegate;
//创建一个方法来执行委托操作
-(void)dowork;

@end

//ClassB.m

#import &quot;ClassB.h&quot;

@implementation ClassB

//创建a的实例，将a设置为接受委托的对象。
-(void)dowork{
    ClassA *a = [ClassA new];
    self.delegate = a;
    //当响应了委托方法时，执行sendValue：
    if ([self.delegate respondsToSelector:@selector(sendValue:)]) { // 如果协议响应了sendValue:方法
        [self.delegate sendValue:@&quot;Hello&quot;]; // 通知执行协议方法
    }
}

@end
</code></pre>

<p>最后在<code>main.m</code>中，执行：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
#import &quot;ClassB.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        ClassB *b = [ClassB new];
        [b dowork];
    }
    return 0;
}
</code></pre>

<p><strong>运行结果为：</strong><br/>
<img src="media/15038893459243/15039016722409.jpg" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二十一条 理解Objective-C的错误模型]]></title>
    <link href="https://lockxmonk.github.io/15038851180831.html"/>
    <updated>2017-08-28T09:51:58+08:00</updated>
    <id>https://lockxmonk.github.io/15038851180831.html</id>
    <content type="html"><![CDATA[
<p><code>Objective-C</code>语言不例外的也有“异常”（exception)机制，但是与其它语言肯定存在差异。我们要重新学习一下。</p>

<p>首先就是，<code>“自动引用计数”（Automatic ReferenceCounting, ARC)</code>在默认情况下不是<code>“异常安全的&quot;（exception safe)</code>。具体来说，这意味着：如果抛出异常，那么本应在作用域末尾释放的对象现在却不会自动释放了。<strong><font color=red>如果想生成“异常安全”的代码，可以通过设置编译器的标志来实现，不过这将引入一些额外代码，在不抛出异常时，也照样要执行这部分代码。</font></strong>需要打开的编译器标志叫做<code>-fobjc-arc-exceptions</code>。</p>

<p>但是我们应该注意，<mark>Objective-C语言只有在极其罕见的情况下拋出异常，异常拋出之后，无须考虑恢复问题，而且应用程序此时也应该退出。</mark>这就是说，不用再编写复杂的“异常安全”代码了。</p>

<p>异常只应该用于极其严重的错误，比如说，你编写了某个抽象基类，它的正确用法是先从中继承一个子类，然后使用这个子类。在这种情况下，如果有人直接使用了这个抽象基类，那么可以考虑抛出异常。</p>

<p>与其他语言不同，Objective-C中没办法将某个类标识为“抽象 类”。要想达成类似效果，最好的办法是在那些子类必须覆写的超类方法里抛出异常。这样的话，只要有人直接创建抽象基类的实例并使用它，即会拋出异常：</p>

<pre><code class="language-objc">-(void)mustOverrideMethod {
NSString *reason = [NSStringstringWithFormat: 
                    @&quot;%@ must be overridden&quot;,
                    NSStringFromSelector(_cmd)];
@throw [NSException
    exceptionWithName:NSInternalInconsistencyException 
    reason:reason 
    userInfo：nil];
}
</code></pre>

<p>既然异常只用于处理严重错误（fatal error,致命错误)，那么对其他错误怎么办呢？在出 现“不那么严重的错误&quot;（nonfatal error,非致命错误）时，Objective-C语言所用的编程范式为: 令方法返回<code>nil/0</code>,或是使用<code>NSError</code>，以表明其中有错误发生。例如，如果初始化方法无法根据传入的参数来初始化当前实例，那么就可以令其返回nil/0:</p>

<pre><code class="language-objc">-(id)initWithValue:(id)value { 
    if ((self = [super init])){
        if ( /* Value means instance can11 be created */ ) { 
        self = nil;
     } else {
        // Initialize instance
        }
     }
    return self;
}
</code></pre>

<p>在这种情况下，如果<code>if</code>语句发现无法用传人的参数值来初始化当前实例（比如这个方法 要求传入的value参数必须是<code>non-nil</code>的)，那么就把<code>self</code>设置成<code>nil</code>,这样的话，整个方法的 返回值也就是<code>nil</code>了。调用者发现初始化方法并没有把实例创建好，于是便可确定其中发生了错误。</p>

<p><code>NSError</code>的用法更加灵活，因为经由此对象，我们可以把导致错误的原因回报给调用者。 <code>NSError</code>对象里封装了三条信息：</p>

<ul>
<li><p><strong>Error domain(错误范围，其类型为字符串）</strong><br/>
错误发生的范围。也就是产生错误的根源，通常用一个特有的全局变量来定义。比方说，<code>“处理URL的子系统”（URL-handling subsystem)</code>在从URL中解析或取得数据时如果出错了，那么就会使用<code>NSURLErrorDomain</code>来表示错误范围。</p></li>
<li><p><strong>Error code(错误码，其类型为整数）</strong><br/>
独有的错误代码，用以指明在某个范围内具体发生了何种错误。某个特定范围内可能会发生一系列相关错误，这些错误情况通常采用<code>enum</code>来定义。例如，当<code>HTTP</code>请求出错时，可能会把<code>HTTP</code>状态码设为错误码。</p></li>
<li><p><strong>Uesr info(用户信息，其类型为字典）</strong><br/>
有关此错误的额外信息，其中或许包含一段“<code>本地化的描述”（localized description)</code>, 或许还含有导致该错误发生的另外一个错误，经由此种信息，可将相关错误串成一条 <code>“错误链”（chain of errors)</code>。</p></li>
</ul>

<p>NSError的一种常见用法是，经由方法的“输出参数”返回给调用者。比如像这样：</p>

<pre><code class="language-objc">-(BOOL)doSomething: (NSError**)error
</code></pre>

<p>用例为：</p>

<pre><code class="language-objc">NSError *error = nil;
BOOL ret = [object doSomething:&amp;error];
    if (error) {
//There was an error
}
</code></pre>

<p>也可以通过委托协议来传递此错误。有错误发生时，当前对象会把错误信息经由协议中的某个方法传给其<code>委托对象（delegate)</code>。这里不做过多说明。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>只有发生了可使整个应用程序崩溃的严重错误时，才应使用异常。</li>
<li>在错误不那么严重的情况下，可以指派“委托方法”（delegate method)来处理错误，也可以把错误信息放在<code>NSError</code>对象里，经由“输出参数”返回给调用者。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第二十条 为私有方法名加上前缀]]></title>
    <link href="https://lockxmonk.github.io/15038831182450.html"/>
    <updated>2017-08-28T09:18:38+08:00</updated>
    <id>https://lockxmonk.github.io/15038831182450.html</id>
    <content type="html"><![CDATA[
<p>一个类所做的事情，通常要比外面看到的更多。编写类的实现代码时，我们经常要编写在内部使用的方法。<strong><font color=red>这里我们要注意，一定要为这种内部实现的方法加上前缀，这有助于调试，有利于区分私有方法和公共方法。区分私有和公共方法，主要是为了方便修改内部的私有方法和相关实现代码，防止随意修改公共API。</font></strong></p>

<p>我通常在私有方法前面加上<code>“_p”</code>，例如：</p>

<pre><code class="language-objc">
-(void)p_privateMethod{
    /*.....*/
}
</code></pre>

<p>我们之所以要加上前缀，是因为OC不像java和c++语言可以在前面将方法声明为私有。每个对象都可以响应任何方法(由于其强大的动态特性造成的)。</p>

<p>加前缀的时候要避免只用一个<code>“_”</code>，<strong><font color=red>因为苹果公司在自己的类中就是这么做的，所以我们要避开这种方式，防止造成继承一个类的时候，子类无意间覆写了父类的方法。</font></strong></p>

<h2 id="toc_0">要点</h2>

<ul>
<li>给私有方法的名称加上前缀，这样可以很容易地将其同公共方法区分开。</li>
<li>不要单用一个下划线做私有方法的前缀，因为这种做法是预留给苹果公司用的。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十九条 使用清晰而协调的命名方式]]></title>
    <link href="https://lockxmonk.github.io/15037310867483.html"/>
    <updated>2017-08-26T15:04:46+08:00</updated>
    <id>https://lockxmonk.github.io/15037310867483.html</id>
    <content type="html"><![CDATA[
<p>我们在使用OC的时候，发现这门语言很繁琐，代码中一般有<code>“in“，”for”，“with”</code>等介词，其他编程语言则很少使用这些他们认为多余的字眼。以下面代码为例子：</p>

<pre><code class="language-objc">NSString *text = @&quot;The quick brown fox jumped over the lazy dog&quot;;
NSString *newText =
[text stringByReplacingOccurrencesOfString: @&quot;fox&quot;,
                                withString:@&quot;cat&quot;];
</code></pre>

<p>但是，<code>Objective-C</code>的命名方式虽然长一点，但是却非常淸晰。</p>

<p><strong><font color=red>方法与变量名使用了“驼峰式大小写命名法&quot;（camel casing)——以小写字母开头，其后每个单词首字母大写。类名也用驼峰命名法，不过其首字母要大写，而且前面通常还有两三个前缀字母。</font></strong></p>

<h2 id="toc_0">方法命名</h2>

<p>方法名很长对冉繁琐，但是易于阅读，理解其中的意思。但是如果过长会起到反效果。例如：</p>

<pre><code class="language-objc">-(EOCRectangle*)union:(EOCRectangle*)rectangle // Unclear 
-(float) calculateTheArea // Too verbose

//应该改成
-(EOCRectangle*)unionRectangle:(EOCRectangle*)rectangle 
-(float) area
</code></pre>

<p><strong>给方法命名时的注意事项可总结成下面几条规则：</strong></p>

<blockquote>
<ul>
<li>如果方法的返回值是新创建的，那么方法名的首个词应是返回值的类型，除非前面还 有修饰语，例如<code>localizedString</code>。属性的存取方法不遵循这种命名方式，因为一般认 为这些方法不会创建新对象，即便有时返回内部对象的一份拷贝，我们也认为那相当 于原有的对象。这些存取方法应该按照其所对应的属性来命名。</li>
<li>应该把表示参数类型的名词放在参数前面。</li>
<li>如果方法要在当前对象上执行操作，那么就应该包含动词；若执行操作时还需要参数, 则应该在动词后面加上一个或多个名词。</li>
<li>不要使用str这种简称，应该用string这样的全称。</li>
<li>Boolean属性应加is前缀。如果某方法返回非属性的Boolean值，那么应该根据其功 能，选用has或is当前缀。</li>
<li>将get这个前缀留给那些借由“输出参数”来保存返回值的方法，比如说，把返回值 填充到“C语言式数组”（C_style array)里的那种方法就可以使用这个词做前缀。</li>
</ul>
</blockquote>

<h2 id="toc_1">类与协议的命名</h2>

<p>应该为类与协议的名称加上前缀，以避免命名空间冲突（参见第15条)，而且应该像给 方法起名时那样把词句组织好，使其从左至右读起来较为通顺。例如，在<code>NSArray</code>的子类中，有一个用于表示可变数组的类，叫做<code>NSMutableArray</code>, <code>mutable</code>这个词放在<code>array</code>前面, 用以表明这是一种特殊的<code>array</code>(数组）。</p>

<p>例如iOS的UI库UIKit，其中协议与类的命名惯例为：</p>

<ul>
<li>UIView    (类)</li>
<li>UIViewController（类）</li>
<li>UITableView （类）</li>
<li>UITableViewController（类）</li>
<li>UITableViewDelegate（协议）</li>
</ul>

<p>最重要的一点就是，命名方式应该协调一致。</p>

<h2 id="toc_2">要点</h2>

<ul>
<li>起名时应遵从标准的Objective-C命名规范，这样创建出来的接口更容易为开发者所理解。</li>
<li>方法名要言简意赅，从左至右读起来要像个日常用语中的句子才好。</li>
<li>方法名里不要使用缩略后的类型名称。</li>
<li>给方法起名时的第一要务就是确保其风格与你自己的代码或所要集成的框架相符。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十八条 尽量使用不可变对象]]></title>
    <link href="https://lockxmonk.github.io/15037148888105.html"/>
    <updated>2017-08-26T10:34:48+08:00</updated>
    <id>https://lockxmonk.github.io/15037148888105.html</id>
    <content type="html"><![CDATA[
<p>我们在设计类的时候，运用属性来封装数据。并且使用属性时候，<strong>可以将属性直接设置为“只读”（read-only）</strong>。默认情况下是“可读也可写”的。</p>

<p>不过，一般情况下我们要建模的数据未必需要改变。比方说，某数据所表示的对象源自一项只读的网络服务(web service),里面可能包含一系列需要显示在地图上的相关点，像这种对象就没必要改变其内容。即使修改了，新数据也不会推送回服务器.</p>

<p>而且如果把可变对象（mutable object)放入<code>collection</code>之后又修改其内容，那么很容易就会破坏<code>set</code>的内部数据结构，使其失去固有的语义。</p>

<p>我们来举例：</p>

<p>为了将<code>EOCPointOflnterest</code>做成不可变的类，需要把所有属性都声明为<code>readonly</code>:</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@interface EOCPointOfInterest : NSObject
@property (nonatomic, copy, readonly) NSString *identifier; 
@property (nonatomic, copy, readonly) NSString* title;
@property (nonatomic, assign, readonly) float latitude; 
@property (nonatomic, assign, readonly) float longitude;
-(id) initWithldentifier: (NSString*) identifier 
                   title:(NSString*)title 
                   latitude: (float) latitude 
                   longitude: (float) longitude;
@end

</code></pre>

<p>这样后如果有人想要改变属性值，那么编译时就会报错。对象中的属性值可以读出，但是无法写入，这就能保证<code>EOCPointOfluterest</code>中的各个数据之间总是相互协调的。</p>

<p>但是我们有时想要修改封装在对象内部的数据，不想令这些数据为外人所改动。这种情况下，通常做法是在对象内部将<code>readonly</code>属性重新声明为<code>readwrite</code>。当然，如果该属性是nonatomic 的，那么这样做可能会产生“竞争条件”（racecondition)。在对象内部写人某属性时，对象外的 观察者也许正读取该属性。若想避免此问题，我们可以在必要时通过<mark>“派发队列&quot;（dispatchqueue）等手段，将(包括对象内部的）所有数据存取操作都设为同步操作</mark>。<strong><font color=red>将属性在对象内部重新声明为<code>readwrite</code>这一操作可于<code>“class-continuation分类”</code>中完成，在公共接口中声明的属性可于此处重新声明，属性的其他特质必须保持不变，而<code>readonly</code>可扩展为<code>readwrite</code>。</font></strong></p>

<p>其 <code>“class-continuation分类”</code>可以这样写：</p>

<pre><code class="language-objc">// .m文件中
#import &quot;EOCPointOfInterest.h&quot;

@interface EOCPointOfInterest : NSObject
@property (nonatomic, copy, readwrite) NSString *identifier; 
@property (nonatomic, copy, readwrite) NSString* title;
@property (nonatomic, assign, readwrite) float latitude; 
@property (nonatomic, assign, readwrite) float longitude;

@implementation EOCPointOfInterest

/* ... */

@end
</code></pre>

<p>现在，只能于<code>EOCPoimOflnterest</code>实现代码内部设置这些属性值了。但是我们其实可以同构KVC键值编码来设置这些属性值。不过，这样显然违背了我们的本意，绕过了提供的API。不推荐这种做法。</p>

<p>我们定义类公共的API时，<strong><font color=red>要注意一件事情：对象里表示各种collection的那些属性究竞应该设成可变的，还是不可变的。</font></strong>例如，我们用某个类来表示个人信息，该类里还存放了一些引用，指向此人的诸位朋友。你可能想把这个人的全部朋友都放在一个“列表&quot;（list)里，并将其做成属性。假如开发者可以添加或删除此人的朋友，那么这个属性就需要用可变的<code>set</code>来实现。在这种情况下，通常应该提供一个<code>readonly</code>属性供外界使用，该属性将返回不可变的<code>set</code>, 而此<code>set</code>则是内部那个可变<code>set</code>的一份拷贝。比方说，下面这段代码就能够实现出这样一个类：</p>

<pre><code class="language-objc">// EOCPerson.h
#import &lt;Foundation/Foundation•h&gt;
@interface EOCPerson : NSObject
@property (nonatomic, copy, readonly) NSString *firstName; 
@property (nonatomic, copy, readonly) NSString *lastName; 
@property (nonatomic, strong, readonly) NSSet *friends;
-(id)initWithFirstName:(NSString*)firstName
          andLastName:(NSString*)lastName;
-(void)addFriend:(EOCPerson*)person;
-(void)removeFriend:(EOCPerson*)person;

@end

// EOCPerson.m #import &quot;EOCPerson•!!
@interface EOCPerson ()
@property (nonatomic, copy, readwrite) NSString *firstName; 
@property (nonatomic, copy, readwrite) NSString *lastName;
@end
@implementation EOCPerson {
    NSMutableSet *_internalFriends;
}

-(NSSet*)friends {
    return [_internalFriends copy];
}
-(void)addFriend:(EOCPerson*)person {
    [_internalFriends addObject:person];
} 

-(void)removeFriend:(EOCPerson*)person {
    [_internalFriends removeObjectrperson];
}

-(id)initWithFirstName: (NSString*)firstName andLastName:(NSString*)lastName { 
    if ((self = [super init】））{
         _firstName = firstName;
         _lastName = lastName;
         _internalFriends = [NSMutableSet new];
    }
    return self;
}

@end

</code></pre>

<h2 id="toc_0">要点</h2>

<ul>
<li>尽量创建不可变的对象。</li>
<li>若某属性仅可于对象内部修改，则在<code>“class-continuation分类”</code>中将其由<code>readonly</code>属性扩展为<code>readwrite</code>属性</li>
<li>不要把可变的<code>collection</code>作为属性公开，而应提供相关方法，以此修改对象中的可变<code>collection</code>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十七条 实现description方法]]></title>
    <link href="https://lockxmonk.github.io/15037100500253.html"/>
    <updated>2017-08-26T09:14:10+08:00</updated>
    <id>https://lockxmonk.github.io/15037100500253.html</id>
    <content type="html"><![CDATA[
<p>调试程序时，我们一般要将对象的属性<code>NSLog</code>出来：</p>

<pre><code class="language-objc">NSLog(@&quot;object = %@&quot;,object);
</code></pre>

<p>如果我们输出的对象是数组，或者字典和其它数据是可以将数据打印出来。但是如果打印的是自定义的类，那么输出的对象就类似于：</p>

<pre><code class="language-objc">object = &lt;EOCPerson:0x7fd9a1600600&gt;
</code></pre>

<p>上面这种信息很不实用，所以我们要在自己的类里覆写<code>description</code>方法，否则打印信息时就会调用<code>NSObject</code>类所实现的默认方法。此方法定义在<code>NSObject</code>协议里，不过<code>NSObject</code>类也实现了它。</p>

<p>想输出更为有用的信息也很简单，只需覆写<code>description</code>方法并将描述此对象的字符串 返回即可。例如，有下面这个代表个人信息的类：</p>

<pre><code class="language-objc">//EOCPerson.h
#import &lt;Foundation/Foundation.h&gt;

@interface EOCPerson : NSObject

@property(nonatomic, readonly, copy)NSString *firstname;
@property (nonatomic, copy, readonly) NSString *lastName;

-(id) initWithFirstName: (NSString*) firstName lastName:(NSString*) lastName;

@end

//EOCPerson.m
#import &quot;EOCPerson.h&quot;

@implementation EOCPerson

-(id)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName{
    if ((self = [super init])) {
        _firstname = [firstName copy];
        _lastName = [lastName copy];
    }
    return self;
}
//description方法
-(NSString*)description{

    return [NSString stringWithFormat:@&quot;&lt;%@ : %p , \&quot;%@ %@\&quot;&gt;&quot; , [self class], self ,_firstname ,_lastName ];
}

@end


</code></pre>

<p>那么输出就是：</p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
#import &quot;EOCPerson.h&quot;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        EOCPerson *person = [[EOCPerson alloc] initWithFirstName:@&quot;Liang&quot; lastName:@&quot;Zhonghao&quot;];
        NSLog(@&quot;Person = %@&quot; , person);
    }
    return 0;
}

</code></pre>

<p><img src="media/15037100500253/15037119639541.jpg" alt=""/></p>

<blockquote>
<p><strong>建议：在新实现的 description方法中，也应该像默认的实现那样，打印出类的名字和指针地址，因为这些内容 有时也许会用到。</strong></p>
</blockquote>

<p>我们也可以借助字典类型的<code>description</code>方法来将打印何种信息标识出来：</p>

<pre><code class="language-objc">
-(NSString*)description{
    return [NSString stringWithFormat:@&quot;&lt;%@ : %p , %@&gt;&quot; , 
    [self class],
     self, 
     @{@&quot;firstname&quot;:_firstname,
       @&quot;lastname&quot;:_lastName}];
}
</code></pre>

<p>输出为：<br/>
<img src="media/15037100500253/15037132520686.jpg" alt=""/></p>

<p><code>NSObject</code>协议中还有个方法要注意，那就是<code>debugDescription</code>,此方法的用意与 <code>description</code>非常相似。二者区别在于，<code>debugDescription</code>方法是开发者在调试器（debugger) 中以控制台命令打印对象时才调用的。在<code>NSObject</code>类的默认实现中，此方法只是直接调用了<code>description</code>。我们还拿上个例子来说明：</p>

<p><img src="media/15037100500253/15037137809556.jpg" alt=""/></p>

<p>我们在NSLog下面打一个断点，进入调试模式，之后向调试控制台里输入命令。LLDB的“po”命令 可以完成对象打印（print-object)工作，其输出如下：<br/>
<img src="media/15037100500253/15037138780545.jpg" alt=""/></p>

<p>当然我们可以把人名放在<code>EOCPerson</code>对象的普通描述信息中，而把更详尽的内容放在调试所用的描述信息里：</p>

<pre><code class="language-objc">-(NSString*)description{
    return [NSString stringWithFormat:@&quot;%@ : %@&gt;&quot; , _firstname ,_lastName ];
}

-(NSString*)debugDescription{
    return [NSString stringWithFormat:@&quot;&lt;%@ : %p , %@&gt;&quot; , [self class], self , @{@&quot;firstname&quot;:_firstname,@&quot;lastname&quot;:_lastName}];
}

</code></pre>

<p>运行之后如下：<br/>
<img src="media/15037100500253/15037141337080.jpg" alt=""/></p>

<p>你可能不想把类名与指针地址这种额外内容放在普通的描述信息里，但是却希望调试的 时候能够很方便地看到它们，在此情况下，就可以使用这种输出方式来实现。Foundation框架的<code>NSArray</code>类就是这么做的.</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>实现<code>description</code>方法返回一个有意义的字符串，用以描述该实例。</li>
<li>若想在调试时打印出更详尽的对象描述信息，则应实现<code>debugDescription</code>方法。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十六条 提供"全能初始化方法"]]></title>
    <link href="https://lockxmonk.github.io/15036443106558.html"/>
    <updated>2017-08-25T14:58:30+08:00</updated>
    <id>https://lockxmonk.github.io/15036443106558.html</id>
    <content type="html"><![CDATA[
<p>我们知道,所有的对象都要初始化但是有些对象可能有很多初始化方法(根据初始的信息来选择用哪个).我们以iOS的UI框架UIKit为例，其中有个类叫做<code>UITableViewCell</code>,初始化该类对象 时，需要指明其样式及标识符，标识符能够区分不同类型的单元格。由于这种对象的创 建成本较高，所以绘制表格时可依照标识符来复用，以提升程序效率。<strong><font color=red>我们把这种可为 对象提供必要信息以便其能完成工作的初始化方法叫做“全能初始化方法”（designated initializer)</font></strong></p>

<p>我们看下面这个NSDate的例子：</p>

<pre><code class="language-objc">-(id)init
-(id)initWithString:(NSString*)string
-(id)initWithTimelntervalSinceNow:(NSTimelnterval)seconds
-(id)initWithTimelnterval:(NSTimelnterval)seconds
                sinceDate:(NSDate*)refDate
-(id)initWithTimeIntervalSinceReferenceDate:(NSTimelnterval)seconds
-(id)initWithTimeIntervalSincel970:(NSTimelnterval)seconds
</code></pre>

<p><mark><strong>那么多的初始化方法中，我们要选一个全能初始化方法，让其他的初始化方法都来调用它。</strong></mark>，只有在全能初始化方法中，才会存储内部数据。这样的话，当底层数据存储机制改变时，只需修改此方法的代码就好，无须改动其他初始化方法。</p>

<p>我们来用代码举例：</p>

<p><em>首先定义一个表示矩形的类：</em></p>

<pre><code class="language-objc">#import &lt;Foundation/Foundation.h&gt;
@interface EOCRectangle : NSObject
@property (nonatomic, assign, readonly) float width;
@property (nonatomic, assign, readonly) float height; 
@end
</code></pre>

<p>然后定义一个初始化方法：</p>

<pre><code class="language-objc">-(id) initwithwidth: (float) width andHeight:(float)height
{
    if ((self = [super init])) {
        _width = width;
        _height = height;
    }
    return self;
}
</code></pre>

<p>这样就会有一个问题，当有人用<code>[[EOCRectanglealloc]init]</code>来创建矩形时，因为<code>NSObject</code>中已经实现了<code>init</code>方法，如果把<code>alloc</code>方法分配好的<code>EOCRectangle</code>交由此方法来初始化，那么矩形的宽度与高度就是0,因为全部实例变量都设为0了。这种情况我们应该覆写<code>init</code>方法：</p>

<pre><code class="language-objc">// Using default values
-(id)init {
    return [self initWithWidth:5.Of andHeight:10.Of];
)
// Throwing an exception
-(id)init {
    @throw [NSException
    exceptionWithName:NSInternalInconsistencyException 
    reason:@&quot;Must use initWithWidth:andHeight: instead.&quot; 
    userInfo：nil]；
}
</code></pre>

<p>还有一种情况，当我们创建名叫<code>EOCSquare</code>的类，令其成为<code>EOCRectangle</code>的子类时，新类的初始化方法写的时候要注意：</p>

<pre><code class="language-objc">@import &quot;EOCRectangle.h&quot;
@interface EOCSquare : EOCRectangle 
-(id)initWithDimension:(float)dimension; 
@end

@implementation EOCSquare
-(id)initWithDimension:(float)dimension {
    return [super initwithwidth:dimension andHeightidimension];
}
@end
</code></pre>

<p>这了我们发现上面代码的初始化方法调用了父类的初始化方法，这样可能会导致一个问题：创建出一个”高度”和“宽度”不相等的正方形。所以：<strong><font color=red>如果子类的全能初始化方法与超类方法的名称不 同，那么总应覆写超类的全能初始化方法。</font></strong>在<code>EOCSquare</code>这个例子中，应该像下面这样覆写<code>EOCRectangle</code>的全能初始化方法：</p>

<pre><code class="language-objc">-(id)initWithWidth:(float)width andHeight:(float)height { 
    float dimension = MAX (width, height);  
    return [self initWithDimension:dimension];
}
</code></pre>

<p>覆写了这个方法之后，即便使用<code>init</code>来初始化<code>EOCSquare</code>对象，也能照常工作。原因在于, <code>EOCRectangle</code>类覆写了 <code>init</code>方法，并以默认值为参数，调用了该类的全能初始化方法。在用<code>init</code>方法初始化<code>EOCSquare</code>对象时，也会这么调用，不过由于<code>“initWithWidth:andHeight:”</code>已经在子类中覆写了，所以实际上执行的是<code>EOCSquare</code>类的这一份实现代码，而此代码又会调用本类的全能初始化方法。因此一切正常，调用者不可能创建出边长不相等的<code>EOCSquare</code>对象。</p>

<p>当然如果我们不想覆写父类的全能初始化方法，认为这是调用者自己犯了错误。在这种情况下，常用的办法是覆写超类的全能初始化方法并于其中抛出异常：</p>

<pre><code class="language-objc">-(id) initwithwidth: (float) width andHeight: (float) height {
    @throw 
        [NSException 
            exceptionWithName:NSInternallnconsistencyException
            reason: @&quot;Must use initWithDimension: instead.&quot;
             userInfo：nil];
</code></pre>

<p><strong><mark>有时如果某个队形对象的实例有两种完全不同的创建方式，必须分开处理，所以就要编写多个全能初始化方法。</mark></strong>只要记住每个子类的全能初始化方法都应该调用其超类的对应方法，并逐层向上，应该先调用超类的相关方法，然后再执行与本类有关的任务。</p>

<h2 id="toc_0">要点</h2>

<ul>
<li>在类中提供一个全能初始化方法，并于文档里指明。其他初始化方法均应调用此方法。</li>
<li><p>若全能初始化方法与超类不同，则需覆写超类中的对应方法。</p></li>
<li><p>如果超类的初始化方法不适用于子类，那么应该覆写这个超类方法，并在其中抛出异常。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十五条 用前缀避免命名空间冲突]]></title>
    <link href="https://lockxmonk.github.io/15036306506140.html"/>
    <updated>2017-08-25T11:10:50+08:00</updated>
    <id>https://lockxmonk.github.io/15036306506140.html</id>
    <content type="html"><![CDATA[
<p>oc与其他语言一个主要区别是没有那种内置的命名空间(namespace)机制. <mark>所以我们在编码时一定要注意命名冲突,尤其是潜在的命名冲突.</mark></p>

<p>我们在创建应用程序时一定要注意,使用Cocoa创建应用程序时一定要注意,<strong><font color=red>Apple宣称保留使用&quot;两个字母前缀&quot;的权利</font></strong>,也就是说选用的前缀应该都是<strong><font color=red>三个字母</font></strong>.</p>

<p>我们尤其应该注意,当你使用的一个三方库引入了一个你之前引入过的三方库.如果引入的这两个库的作者都没有给自己的库加前缀,那么应用程序很容易出现重复符号错误.</p>

<h2 id="toc_0">要点</h2>

<ul>
<li><p>选择与你公司,应用程序或二者有关联的名称作为类名的前缀,并在所有代码中均使用这一前缀.</p></li>
<li><p>若自己所开发的程序库用到了第三方库,则应该为其中的名称加上前缀.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十四条 理解"类对象"的用意]]></title>
    <link href="https://lockxmonk.github.io/15035622628066.html"/>
    <updated>2017-08-24T16:11:02+08:00</updated>
    <id>https://lockxmonk.github.io/15035622628066.html</id>
    <content type="html"><![CDATA[
<p>OC是一个极其动态的语言,那么运行期时,如何知道某个对象的类型呢? <mark>对象类型并非在编译期就绑定好了，而是要在运行期査找</mark>。而 且，还有个特殊的类型叫做id,它能指代任意的Objective-C对象类型。一般情况下，应该指明消息接收者的具体类型，这样的话，如果向其发送了无法解读的消息，那么编译器就会产生警告信息。而类型为<code>id</code>的对象则不然，编译器假定它能响应所有消息。</p>

<p>“在运行期检视对象类型”这一操作也叫做<code>“类型信息査询”（introspection, “内省”）</code>，这 个强大而有用的特性内置于<code>Foundation</code>框架的<code>NSObject</code>协议里，凡是由公共根类（common root class，即NSObject与NSProxy)继承而来的对象都要遵从此协议。在程序中不要直接比较对象所属的类，明智的做法是调用“类型信息査询方法”</p>

<p>我们先来了解Objective-C对象的本质:</p>

<p><font color=red>每个Objective-C对象实例都是指向某块内存数据的指针。</font>所以在声明变量时，类型后面要跟一个字符：</p>

<pre><code class="language-objc">NSString *pointerVariable = @&quot;Some string&quot;;
</code></pre>

<p>对于通用的对象类型id,由于其本身已经是指针了，所以我们能够这样写：</p>

<pre><code class="language-objc">id genericTypedString = @&quot;Some string&quot;;
</code></pre>

<p>上面这种定义方式与用<code>NSString*</code>来定义相比，其语法意义相同。唯一区别在于，如果声明时指定了具体类型，那么在该类实例上调用其所没有的方法时，编译器会探知此情况,并发出警告信息。</p>

<p>描述Objective-C对象所用的数据结构定义在运行期程序库的头文件里，<code>id</code>类型本身也<br/>
在定义在这里：</p>

<pre><code class="language-objc">typedef struct objc_object {
    Class isa;
} *id;
</code></pre>

<p><mark>由此可见，每个对象结构体的首个成员是<code>Class</code>类的变量。该变量定义了对象所属的类, 通常称为<code>“is a”</code>指针。例如，刚才的例子中所用的对象“是一个”（is a) NSString,所以其<code>“is a”</code>指针就指向<code>NSString</code>。</mark></p>

<p><code>Class</code>对象也定义在运行期程序库的头文件中：</p>

<pre><code class="language-objc">typedef struct objc_class *Class;
struct objc_class {
    Class isa;
    Class super_class;
    const char *name;
    long version;
    long info;
    long instance_size;
    struct objc_ivar_list *ivars;
    struct objc_method_list **methodLists;
    struct objc_cache *cache;
    struct objc_protocol list *protocols;
)；
</code></pre>

<p>此结构体存放类的<code>“元数据&quot;（metadata)</code>,例如类的实例实现了几个方法，具备多少个实例变量等信息。此结构体的首个变量也是<code>isa</code>指针，这说明<code>Class</code>本身亦为Objective-C对象。<font color=red> <strong>结构体里还有个变量叫做<code>superclass</code>,它定义了本类的超类。类对象所属的类型（也就是isa 指针所指向的类型）是另外一个类，叫做“元类&quot;（metaclass)，用来表述类对象本身所具备的元数据。“类方法”就定义于此处，因为这些方法可以理解成类对象的实例方法。</strong></font><mark>每个类仅有一个“类对象”，而每个“类对象”仅有一个与之相关的“元类”。</mark></p>

<p>假设有个名为<code>SomeClass</code>的子类从<code>NSObject</code>中继承而来，则其继承体系如图所示。</p>

<p><img src="media/15035622628066/15035642742167.jpg" alt=""/></p>

<p><font color=red><strong>superclass 指针确立了继承关系，而 isa 指针描述了实例所属的类。</strong></font>通过这张布局关系图即可执行“类型信息査询”。我们可以査出对象是否能响应某个选择子，是否遵从某项协议，并且能看出此对象位于“类继承体系”（class hierarchy)的哪一部分。</p>

<h2 id="toc_0">在类继承体系中查询类型信息</h2>

<p>可以用类信息査询方法来检视类继承体系。<code>“isMemberOfClass:”</code>能够判断出对象是否为某个特定类的实例，而<code>“isKindOfClass:”</code>则能够判断出对象是否为某类或其派生类的实例,例如：</p>

<pre><code class="language-objc">NSMutableDictionary *dict = [NSMutableDictionary new];
[diet isMemberOfClass: [NSDictionary class] ] ; ///&lt; NO 
[diet isMemberOfClass:[NSMutableDictionary class】】； ///&lt; YES 
[diet isKindOfClass: [NSDictionary class】];///&lt; YES 
[diet isKindOfClass2 [NSArray class]]; ///&lt; NO
</code></pre>

<p>像这样的类型信息査询方法使用isa指针获取对象所属的类，然后通过superclass指针 在继承体系中游走。由于对象是动态的，所以此特性显得极为重要。Objective-C与你可能熟 悉的其他语言不同，在此语言中，必须査询类型信息，方能完全了解对象的真实类型。</p>

<p>由于Objective-C使用“动态类型系统&quot;（dynamic typing)，所以用于査询对象所属类的类 型信息査询功能非常有用。从<code>collection</code>中获取对象时，通常会査询类型信息，这些对象不 是“强类型的”（strongly typed),把它们从<code>collection</code>中取出来时，其类型通常是<code>id</code>。如果想 知道具体类型，那就可以使用类型信息査询方法。例如，想根据数组中存储的对象生成以逗 号分隔的字符串（comma-separated string),并将其存至文本文件，就可以使用下列代码：</p>

<pre><code class="language-objc">-(NSString*)commaSeparatedStringFromObjects:(NSArray*)array {
    NSMutablestring *string = [NSMutableStringnew]; 
    for (id object in array) {
        if ([object isKindOfClass:[NSStringclass]]) {
            [string appendFormat:@&quot;%@,&quot;, object];
        }else if ([object isKindOfClass:[NSNumberclass]）{
            [string appendFormat:@&quot;%d&quot;, [object intValue]]；
        } else if ([object isKindOfClass:[NSDataclass]])    {
            NSString *base64Encoded = /* base64 encoded data */;
            [string appendFormat: @&quot;%@&quot;, base64Encoded];
        } else {
              //Type not supported
        }
    }   
    return string;
}
</code></pre>

<p><mark>我们应该尽量使用类型信息査询方法，而不应该直接比较两个类对象是否等同(例如<code>if([object class] == [EOCSomeClass class])</code>)</mark>，因为前者可以正确处理那些使用了消息传递机制（参见第12条）的对象。比方 说，某个对象可能会把其收到的所有选择子都转发给另外一个对象。这样的对象叫做“代理” (proxy)，此种对象均以<code>NSProxy</code>为根类。</p>

<p>通常情况下，如果在此种代理对象上调用class方法，那么返回的是代理对象本身（此类 是NSProxy的子类)，而非接受的代理的对象所属的类。然而，若是改用“isKindOfClass:” 这样的类型信息査询方法，那么代理对象就会把这条消息转给“接受代理的对象”（proxied object)。<font color=red>也就是说，这条消息的返回值与直接在接受代理的对象上面査询其类型所得的结果 相同。因此，这样査出来的类对象与通过class方法所返回的那个类对象不同，class方法所返回的类表示发起代理的对象，而非接受代理的对象。</font></p>

<h2 id="toc_1">要点</h2>

<ul>
<li>每个实例都有一个指向Class对象的指针，用以表明其类型，而这些Class对象则构成了类的继承体系。</li>
<li>如果对象类型无法在编译期确定，那么就应该使用类型信息査询方法来探知。</li>
<li>尽量使用类型信息査询方法来确定对象类型，而不要直接比较类对象，因为某些对象可能实现了消息转发功能。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第十三条 用"方法调配技术"调试"黑盒方法"]]></title>
    <link href="https://lockxmonk.github.io/15034774413129.html"/>
    <updated>2017-08-23T16:37:21+08:00</updated>
    <id>https://lockxmonk.github.io/15034774413129.html</id>
    <content type="html"><![CDATA[
<p>因为OC可以在运行期解析 一个对象究竟调用何种方法,所以我们也可以在运行期改变相对应的方法. </p>

<p><font color=red>因为与给定的选择子名称相对应的方法也可以在运行期改变.所以若能善用此特性，则可发挥出巨大优势，因为我们既不需要源代码，也不需要通过继承子类来覆写方法就能改变这个类本身的功能。这样一来，新功能将在本类的所有实例中生效，而不是仅限于覆写了相关方法的那些子类实例。此方案经常称为<mark>“方法调配”（method swizzling)</mark> e</font></p>

<p>类的方法列表会把选择子的名称映射到相关的方法实现之上，使得“动态消息派发系统” 能够据此找到应该调用的方法。这些方法均以函数指针的形式来表示，这种指针叫做<code>IMP</code>, 其原型如下：</p>

<pre><code class="language-objc">
id (*IMP)(id, SEL ,...)

</code></pre>

<p>我们用NSString类来举例,下图表示<code>lowercaseString、uppercaseString、capitalizedString</code>方法映射到了不同的<code>IMP</code>上.</p>

<p><img src="media/15034774413129/15034784608780.jpg" alt=""/></p>

<p>OC运行期系统,提供有方法来操作这个映射表.我们可以向这个表中,<strong>新增选择子,改变选择子所对应的方法实现,交换两个选择子所映射的指针</strong>.类似下图:<br/>
<img src="media/15034774413129/15034786156175.jpg" alt=""/></p>

<p>新表中,多了一个<code>newSelector</code>选择子,并且其他方法的实现也互换了.上述修改均无须编写子类，只是修改了“方法表”的布局.</p>

<p>下面我们来讨论如何互换两个方法的实现:</p>

<p>想要互换两个方法的实现可以,有下列函数:</p>

<pre><code class="language-objc">//互换m1和m2的实现
void method_exchangeImplementations(Method m1, Method m2)

</code></pre>

<p>m1和m2的方法实现可以通过下面方法实现:</p>

<pre><code class="language-objc">
Method class_getInstanceMethod(Class aClass, SEL aSelector)

</code></pre>

<p>此函数根据给定的选择从类中取出与之相关的方法。</p>

<p>下面我们完整的举一个例子,来演示交换前面提到的<code>lowercaseString</code> 与 <code>uppercaseString</code>方法实现:</p>

<pre><code class="language-objc">
Method originalMethod =
    class_getInstanceMethod([NSStringclass],
                            @selector(lowercaseString));
Method swappedMethod =
    class_getInstanceMethod([NSStringclass],
                            @selector(uppercaseString)); 
                            method_exchangeImplementations(originalMethod,swappedMethod);

</code></pre>

<p>从现在开始,如果在NSString实例上调用<code>lowercaseString</code>,那么执行的将是<code>uppercaseString</code>,反之亦然:</p>

<pre><code class="language-objc">
NSString *string = @&quot;This iS tHe StRiNg&quot;;
NSString *lowercaseString = [string lowercaseString];
NSLog(&quot;lowercaseString = %@&quot;, lowercaseString);
// Output: lowercaseString = THIS IS THE STRING


NSString *uppercaseString - [string uppercaseString】；
NSLog (@&quot;uppercaseString = %@&quot;, uppercaseString);
// Output: uppercaseString = this is the string

</code></pre>

<p>刚才向大家演示了如何交换两个方法实现，然而在实际应用中，像这样直接交换两 个方法实现的，意义并不大。因为<code>lowercaseString</code>与<code>uppercaseString</code>这两个方法已经各自实现得很好，没必要再交换了。但是，可以通过这一手段来为既有的方法实现增添新功能。<font color=red>比方说，想要在调用<code>lowercaseString</code>时记录某些信息，这时就可以通过交换方法实现来达成此目标。我们新编写一个方法，在此方法中实现所需的附加功能，并调用原有实现</font>。</p>

<p>新方法可以添加至NSString的一个&quot;分类(category)&quot;中:</p>

<pre><code class="language-objc">
@interface NSString (EOCMyAdditions)

-(NSString*)eoc_myLowercaseString;

@end

</code></pre>

<p>上面的新方法将与原有的方法互换,如下图所示:</p>

<p><img src="media/15034774413129/15034869016993.jpg" alt=""/></p>

<p>新方法的实现代码可以这样写:</p>

<pre><code class="language-objc">
0implementation NSString (EOCMyAdditions)

-(NSString*)eoc_myLowercaseString {
    NSString *lowercase = [self eoc_myLowercaseString];
    NSLog (@&quot;%@ =&gt; %@&quot;, self, lowercase); 
    return lowercase;
)
@end

</code></pre>

<p>这段代码看上去好像会陷人递归调用的<strong>死循环</strong>，<mark><strong>不过大家要记住，此方法是准备和 lowercaseString方法互换的。所以，在运行期，eoc_myLowercaseString选择子实际上对应于原有的lowercaseString方法实现</strong>。</mark>最后，通过下列代码来交换这两个方法实现：</p>

<pre><code class="language-objc">Method originalMethod =
    class_getInstanceMethod([NSString class],
                            @selector(lowercaseString)〉；
Method swappedMethod =
    class_getInstanceMethod([NSString class]f
                            @selector(eoc_myLowercaseString)); 
                            method_exchangeImplementations(originalMethod , swappedMethod);

</code></pre>

<p>之后我们只要如下执行就会发现:</p>

<pre><code class="language-objc">
NSString *string = @&quot;ThIs iS tHe StRiNg&quot;;
NSString *lowercaseString = [string lowercaseString];
//输出了下面这行
// Output: This iS tHe StRiNg =&gt; this is the string

</code></pre>

<blockquote>
<p><strong>通过此方案，开发者可以为那些“完全不知道其具体实现的&quot;（completely opaque, “完全 不透明的”）黑盒方法增加日志记录功能，这非常有助于程序调试。然而，此做法只在调试程序时有用。很少有人在调试程序之外的场合用上述“方法调配技术”来永久改动某个类的功能。不能仅仅因为Objective-C语言里有这个特性就一定要用它。若是滥用，反而会令代码变得不易读懂且难于维护。</strong></p>
</blockquote>

<h2 id="toc_0">要点</h2>

<ul>
<li><p>在运行期，可以向类中新增或替换选择子所对应的方法实现。</p></li>
<li><p>使用另一份实现来替换原有的方法实现，这道工序叫做“方法调配”，开发者常用此技术向原有实现中添加新功能。</p></li>
<li><p>一般来说，只有调试程序的时候才需要在运行期修改方法实现，这种做法不宜滥用。</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
